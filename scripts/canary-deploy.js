#!/usr/bin/env node

require('dotenv').config();
const axios = require('axios');

const VERCEL_TOKEN = process.env.VERCEL_TOKEN;
const VERCEL_PROJECT_ID = process.env.VERCEL_PROJECT_ID;
const VERCEL_TEAM_ID = process.env.VERCEL_TEAM_ID;

if (!VERCEL_TOKEN || !VERCEL_PROJECT_ID) {
  console.error('‚ùå VERCEL_TOKEN –∏–ª–∏ VERCEL_PROJECT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã');
  process.exit(1);
}

async function canaryDeploy() {
  const percentage = parseInt(process.argv[2], 10) || 10;

  if (percentage < 0 || percentage > 100) {
    console.error('‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100');
    process.exit(1);
  }

  try {
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ø–ª–æ—è—Ö...`);

    const headers = {
      Authorization: `Bearer ${VERCEL_TOKEN}`,
    };

    let url = `https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}&limit=2`;
    if (VERCEL_TEAM_ID) {
      url += `&teamId=${VERCEL_TEAM_ID}`;
    }

    const deploymentsResponse = await axios.get(url, { headers });

    if (
      !deploymentsResponse.data.deployments ||
      deploymentsResponse.data.deployments.length < 2
    ) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–ø–ª–æ–µ–≤ –¥–ª—è canary —Ä–µ–ª–∏–∑–∞');
      return;
    }

    const [newDeployment, stableDeployment] = deploymentsResponse.data.deployments;

    console.log(
      `üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: ${percentage}% –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é, ${100 - percentage}% –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é...`
    );

    const trafficUrl = `https://api.vercel.com/v2/deployments/${VERCEL_PROJECT_ID}/traffic`;
    const trafficData = {
      deployments: {
        [newDeployment.id]: percentage,
        [stableDeployment.id]: 100 - percentage,
      },
    };

    if (VERCEL_TEAM_ID) {
      trafficData.teamId = VERCEL_TEAM_ID;
    }

    const trafficResponse = await axios.post(trafficUrl, trafficData, { headers });

    if (trafficResponse.status === 200) {
      console.log(`‚úÖ –¢—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
      console.log(`üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (${newDeployment.id}): ${percentage}%`);
      console.log(`üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (${stableDeployment.id}): ${100 - percentage}%`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:', trafficResponse.data);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    process.exit(1);
  }
}

canaryDeploy();
