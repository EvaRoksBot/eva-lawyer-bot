const fetch = global.fetch;

/**
 * Look up counterparty details using the DaData API.
 * Returns a formatted string ready to be sent back to the user.
 *
 * @param {string} query   INN (10 or 12 digits) or company name
 * @param {string} apiKey  DaData API key
 * @returns {Promise<string>} summary text
 */
async function lookupCounterparty(query, apiKey) {
  if (!apiKey) {
    return '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DADATA_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Vercel.';
  }
  const isInn = /^\d{10}(\d{2})?$/.test(query);
  const endpoint = isInn ? 'findById/party' : 'suggest/party';
  try {
    const resp = await fetch(`https://suggestions.dadata.ru/suggestions/api/4_1/rs/${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        Authorization: `Token ${apiKey}`,
      },
      body: JSON.stringify({ query }),
    }).then((r) => r.json());
    const data = resp?.suggestions?.[0]?.data;
    if (!data) return '–ù–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–ù–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.';
    const name = data.name?.short_with_opf || data.name?.full_with_opf || '‚Äî';
    const innkpp = `${data.inn || '‚Äî'} / ${data.kpp || '‚Äî'}`;
    const addr = data.address?.value || '‚Äî';
    const state = data.state?.status || 'ACTIVE';
    return `üè¢ ${name}\n–ò–ù–ù/–ö–ü–ü: ${innkpp}\n–ê–¥—Ä–µ—Å: ${addr}\n–°—Ç–∞—Ç—É—Å: ${state}`;
  } catch (e) {
    return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É DaData.';
  }
}

module.exports = { lookupCounterparty };
