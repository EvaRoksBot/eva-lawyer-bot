import os
import io
import tempfile
import logging
from dotenv import load_dotenv

from PIL import Image
import pytesseract
from docx import Document
from pdf2image import convert_from_bytes

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from openai import OpenAI

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
client = OpenAI(api_key=OPENAI_API_KEY)

SYSTEM_PROMPT = (
    "–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ. "
    "–ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∂–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å. –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: —Ä—É—Å—Å–∫–∏–π."
)


def _llm(prompt: str) -> str:
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt},
        ],
        temperature=0.2,
        max_tokens=800,
    )
    return resp.choices[0].message.content or ""


def _build_task_prompt(task: str, text: str) -> str:
    if task == "analyze_contract":
        return (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä. –í—ã–¥–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, "
            "—à—Ç—Ä–∞—Ñ—ã, —Ä–∏—Å–∫–∏, —Å–ø–æ—Å–æ–±—ã –∑–∞—â–∏—Ç—ã.\n\n–¢–µ–∫—Å—Ç:\n" + text
        )
    if task == "risk_table":
        return (
            "–°–¥–µ–ª–∞–π —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤: –†–∏—Å–∫ | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å | –í–ª–∏—è–Ω–∏–µ | –ú–∏—Ç–∏–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ä—ã."\
            "\n\n–¢–µ–∫—Å—Ç:\n" + text
        )
    if task == "verify_dd":
        return (
            "–°—Ñ–æ—Ä–º–∏—Ä—É–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (Due Diligence) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞."\
            "\n\n–¢–µ–∫—Å—Ç:\n" + text
        )
    if task == "court_search":
        return (
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ—Ä–º—ã/–ø—Ä–∞–∫—Ç–∏–∫—É, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—Å—Ç–æ–º."\
            "\n\n–¢–µ–∫—Å—Ç:\n" + text
        )
    if task == "analyze_claim":
        return (
            "–ü–æ–¥–≥–æ—Ç–æ–≤—å —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ç–µ–∫—Å—Ç."\
            "\n\n–¢–µ–∫—Å—Ç:\n" + text
        )
    return "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:\n\n" + text


async def handle_any_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.document:
        return
    doc = update.message.document
    name = (doc.file_name or "").lower()
    mime = (doc.mime_type or "").lower()

    tg_file = await doc.get_file()
    file_bytes = await tg_file.download_as_bytearray()

    if "pdf" in mime or name.endswith(".pdf"):
        await update.message.reply_text("–†–∞—Å–ø–æ–∑–Ω–∞—é PDF‚Ä¶")
        images = convert_from_bytes(bytes(file_bytes))
        full_text = ""
        for i, image in enumerate(images, 1):
            page_text = pytesseract.image_to_string(image, lang="rus")
            full_text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i}:\n{page_text}\n"
        context.user_data["extracted_text"] = full_text.strip()
    elif "wordprocessingml" in mime or name.endswith(".docx"):
        await update.message.reply_text("–ß–∏—Ç–∞—é .docx‚Ä¶")
        with tempfile.NamedTemporaryFile(suffix=".docx", delete=False) as tmp:
            tmp.write(file_bytes)
            tmp.flush()
            docx = Document(tmp.name)
        parts = []
        parts.extend(p.text for p in docx.paragraphs if p.text)
        for t in docx.tables:
            for row in t.rows:
                cells = [c.text.strip() for c in row.cells]
                parts.append(" | ".join(cells))
        full_text = "\n".join(filter(None, parts)).strip()
        context.user_data["extracted_text"] = full_text
    elif mime.startswith("text/") or name.endswith(".txt"):
        await update.message.reply_text("–ß–∏—Ç–∞—é .txt‚Ä¶")
        try:
            full_text = bytes(file_bytes).decode("utf-8", errors="replace")
        except Exception:
            full_text = bytes(file_bytes).decode("cp1251", errors="replace")
        context.user_data["extracted_text"] = full_text.strip()
    else:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ PDF, DOCX –∏–ª–∏ TXT.")
        return

    msg = f"üìÑ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –°–∏–º–≤–æ–ª–æ–≤: {len(context.user_data.get('extracted_text',''))}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞", callback_data='analyze_contract')],
        [InlineKeyboardButton("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤", callback_data='risk_table')],
        [InlineKeyboardButton("üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (DD)", callback_data='verify_dd')],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data='court_search')],
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é", callback_data='analyze_claim')],
    ])
    await update.message.reply_text(msg, reply_markup=kb)


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task = query.data
    text = context.user_data.get("extracted_text") or ""
    if not text:
        await query.edit_message_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ PDF/DOCX/TXT.")
        return
    await query.edit_message_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ò–ò‚Ä¶")
    snippet = text if len(text) <= 18000 else text[:18000]
    prompt = _build_task_prompt(task, snippet)
    try:
        answer = _llm(prompt)
    except Exception as e:
        log.exception("LLM error")
        answer = f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ò–ò: {e}"
    await query.edit_message_text(answer[:4000])


def build_app() -> Application:
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.Document.ALL, handle_any_document))
    app.add_handler(CallbackQueryHandler(on_button))
    return app


def main():
    app = build_app()
    log.info("Bot started (long polling)‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
