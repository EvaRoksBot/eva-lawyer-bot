import os
import io
import logging
import tempfile

from dotenv import load_dotenv

from PIL import Image
import pytesseract
from docx import Document
from pdf2image import convert_from_bytes

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

# ---- LLM (OpenAI SDK v1.x) -----------------------------------------------
from openai import OpenAI

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("eva-lawyer-bot")

# ---- env ------------------------------------------------------------------
load_dotenv()

# —á–∏—Ç–∞–µ–º –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞, —Ç–∞–∫ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or os.getenv("AI_API_KEY", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TELEGRAM", "")
AI_BASE_URL = os.getenv("OPENAI_BASE_URL") or os.getenv("AI_BASE_URL")
AI_MODEL = os.getenv("AI_MODEL", "gpt-4o-mini")

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞).")
if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –∏–ª–∏ AI_API_KEY (–∫–ª—é—á –ò–ò).")

client = OpenAI(api_key=OPENAI_API_KEY, base_url=AI_BASE_URL) if AI_BASE_URL else OpenAI(api_key=OPENAI_API_KEY)

# ---- prompts --------------------------------------------------------------
SYSTEM_PROMPT = (
    "–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ. "
    "–ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å. –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: —Ä—É—Å—Å–∫–∏–π."
)


# ---- LLM helpers ----------------------------------------------------------
def llm_chat(prompt: str) -> str:
    resp = client.chat.completions.create(
        model=AI_MODEL,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt},
        ],
        temperature=0.2,
        max_tokens=900,
    )
    return (resp.choices[0].message.content or "").strip()


def build_task_prompt(task: str, text: str) -> str:
    if task == "analyze_contract":
        return (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä. –ö—Ä–∞—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–∂–∏–º–∫–∞:\n"
            "1) –ü—Ä–µ–¥–º–µ—Ç\n2) –ü—Ä–∞–≤–∞/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω\n3) –°—Ä–æ–∫–∏/—ç—Ç–∞–ø—ã\n"
            "4) –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å/—à—Ç—Ä–∞—Ñ—ã\n5) –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ—Ç–∫–∞–∑/—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ\n"
            "6) –†–∏—Å–∫–∏ –∏ –∫–∞–∫ –∏—Ö —Å–Ω–∏–∑–∏—Ç—å\n7) –ß—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞.\n\n–¢–µ–∫—Å—Ç:\n" + text
        )
    if task == "risk_table":
        return "–°–¥–µ–ª–∞–π —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤: –†–∏—Å–∫ | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å | –í–ª–∏—è–Ω–∏–µ | –ú–µ—Ä—ã. –¢–µ–∫—Å—Ç:\n" + text
    if task == "verify_dd":
        return "–°—Ñ–æ—Ä–º–∏—Ä—É–π —á–µ–∫‚Äë–ª–∏—Å—Ç Due Diligence –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª—è–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏. –¢–µ–∫—Å—Ç:\n" + text
    if task == "court_search":
        return "–ü—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–∞—Ä—Ç–æ—Ç–µ–∫—É/–ì–ê–° –ü—Ä–∞–≤–æ—Å—É–¥–∏–µ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã. –¢–µ–∫—Å—Ç:\n" + text
    if task == "analyze_claim":
        return "–ü–æ–¥–≥–æ—Ç–æ–≤—å —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é (–ø–æ–∑–∏—Ü–∏—è, –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–æ—Ä–º—ã). –¢–µ–∫—Å—Ç:\n" + text
    return "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:\n" + text


# ---- handlers -------------------------------------------------------------
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞", callback_data='analyze_contract')],
        [InlineKeyboardButton("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤", callback_data='risk_table')],
        [InlineKeyboardButton("üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (DD)", callback_data='verify_dd')],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data='court_search')],
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é", callback_data='analyze_claim')],
    ])
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ PDF/DOCX/TXT (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è/–¥–æ–≥–æ–≤–æ—Ä). –Ø –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç –∏ –¥–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=kb,
    )


async def cmd_ping(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: PDF (OCR) / DOCX / TXT
async def handle_any_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.document:
        return

    doc = update.message.document
    name = (doc.file_name or "").lower()
    mime = (doc.mime_type or "").lower()

    tg_file = await doc.get_file()
    file_bytes = await tg_file.download_as_bytearray()

    # 1) PDF —á–µ—Ä–µ–∑ OCR
    if "pdf" in mime or name.endswith(".pdf"):
        await update.message.reply_text("–†–∞—Å–ø–æ–∑–Ω–∞—é PDF‚Ä¶")
        images = convert_from_bytes(bytes(file_bytes))
        full_text = []
        for i, image in enumerate(images, 1):
            page_text = pytesseract.image_to_string(image, lang="rus")
            full_text.append(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i}:\n{page_text}")
        extracted = "\n".join(full_text).strip()

    # 2) DOCX –Ω–∞—Ç–∏–≤–Ω–æ
    elif "wordprocessingml" in mime or name.endswith(".docx"):
        await update.message.reply_text("–ß–∏—Ç–∞—é .docx‚Ä¶")
        with tempfile.NamedTemporaryFile(suffix=".docx", delete=False) as tmp:
            tmp.write(file_bytes)
            tmp.flush()
            docx = Document(tmp.name)
        parts = []
        parts.extend(p.text for p in docx.paragraphs if p.text)
        for t in docx.tables:
            for row in t.rows:
                cells = [c.text.strip() for c in row.cells]
                parts.append(" | ".join(cells))
        extracted = "\n".join(filter(None, parts)).strip()

    # 3) TXT
    elif mime.startswith("text/") or name.endswith(".txt"):
        await update.message.reply_text("–ß–∏—Ç–∞—é .txt‚Ä¶")
        try:
            extracted = bytes(file_bytes).decode("utf-8", errors="replace").strip()
        except Exception:
            extracted = bytes(file_bytes).decode("cp1251", errors="replace").strip()

    else:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ PDF, DOCX –∏–ª–∏ TXT.")
        return

    context.user_data["extracted_text"] = extracted
    msg = f"üìÑ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –°–∏–º–≤–æ–ª–æ–≤: {len(extracted)}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞", callback_data='analyze_contract')],
        [InlineKeyboardButton("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤", callback_data='risk_table')],
        [InlineKeyboardButton("üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (DD)", callback_data='verify_dd')],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data='court_search')],
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é", callback_data='analyze_claim')],
    ])
    await update.message.reply_text(msg, reply_markup=kb)


# –ö–Ω–æ–ø–∫–∏ -> –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task = query.data
    text = context.user_data.get("extracted_text") or ""
    if not text:
        await query.edit_message_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ PDF/DOCX/TXT.")
        return

    await query.edit_message_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ò–ò‚Ä¶")
    snippet = text if len(text) <= 18000 else text[:18000]
    prompt = build_task_prompt(task, snippet)

    try:
        answer = llm_chat(prompt)
    except Exception as e:
        log.exception("LLM error")
        answer = f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ò–ò: {e}"

    # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤
    await query.edit_message_text(answer[:4000] if answer else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")


# ---- app ------------------------------------------------------------------
def build_app() -> Application:
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_any_document))
    app.add_handler(CallbackQueryHandler(on_button))
    return app


def main():
    log.info("Bot starting (long polling)‚Ä¶")
    app = build_app()
    app.run_polling()


if __name__ == "__main__":
    main()
