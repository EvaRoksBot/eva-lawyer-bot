// Eva Lawyer Bot - Enhanced Logic v6.1
// –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ —Å GPT API, –ø—Ä–æ–º–ø—Ç–∞–º–∏, —Å–∫–æ—Ä–∏–Ω–≥–æ–º –∏ inline –º–µ–Ω—é

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');

class EvaLawyerBotEnhanced {
    constructor() {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            telegramToken: process.env.TELEGRAM_BOT_TOKEN,
            openaiApiKey: process.env.OPENAI_API_KEY,
            model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
            maxTokens: 2000,
            temperature: 0.3
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.bot = new TelegramBot(this.config.telegramToken, { polling: true });
        this.openai = new OpenAI({ apiKey: this.config.openaiApiKey });
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.userSessions = new Map();
        this.userScores = new Map();
        
        // –ú–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.metrics = {
            totalUsers: 0,
            totalQueries: 0,
            successfulQueries: 0,
            averageScore: 0,
            popularCategories: {},
            startTime: Date.now()
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initializeBot();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    async initializeBot() {
        console.log('üöÄ Initializing Eva Lawyer Bot Enhanced...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.setupHandlers();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ GPT API
        await this.testGPTConnection();
        
        console.log('‚úÖ Eva Lawyer Bot Enhanced is ready!');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GPT API
    async testGPTConnection() {
        try {
            const response = await this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{ role: 'user', content: 'Test connection' }],
                max_tokens: 10
            });
            
            console.log('‚úÖ GPT API connection successful');
            return true;
        } catch (error) {
            console.error('‚ùå GPT API connection failed:', error.message);
            return false;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, (msg) => this.handleStart(msg));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
        this.bot.on('callback_query', (query) => this.handleCallbackQuery(query));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => this.handleMessage(msg));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        this.bot.on('document', (msg) => this.handleDocument(msg));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.bot.on('error', (error) => {
            console.error('Bot error:', error);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    async handleStart(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.initializeUserSession(userId, userName);
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!

üèõÔ∏è **Eva Lawyer Bot** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:
‚Ä¢ üìã –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ –≤—Å–µ–º –æ—Ç—Ä–∞—Å–ª—è–º –ø—Ä–∞–≤–∞
‚Ä¢ üìÑ –ê–Ω–∞–ª–∏–∑–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ ‚öñÔ∏è –û—Ü–µ–Ω–∫–æ–π –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
‚Ä¢ üìä –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ üîç –ü–æ–∏—Å–∫–æ–º —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞:`;

        // Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
        const keyboard = this.createMainMenu();
        
        await this.bot.sendMessage(chatId, welcomeMessage, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        this.metrics.totalUsers++;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    createMainMenu() {
        return [
            [
                { text: 'üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'category_corporate' },
                { text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'category_family' }
            ],
            [
                { text: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data: 'category_realestate' },
                { text: 'üíº –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'category_labor' }
            ],
            [
                { text: 'üí∞ –ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'category_tax' },
                { text: 'üèõÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'category_admin' }
            ],
            [
                { text: 'üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', callback_data: 'analyze_document' },
                { text: 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'user_profile' }
            ],
            [
                { text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' },
                { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º', callback_data: 'contact_lawyer' }
            ]
        ];
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    async handleCallbackQuery(query) {
        const chatId = query.message.chat.id;
        const userId = query.from.id;
        const data = query.data;
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è callback
        await this.bot.answerCallbackQuery(query.id);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
        if (data.startsWith('category_')) {
            await this.handleCategorySelection(chatId, userId, data);
        } else if (data === 'analyze_document') {
            await this.handleDocumentAnalysis(chatId, userId);
        } else if (data === 'user_profile') {
            await this.handleUserProfile(chatId, userId);
        } else if (data === 'ask_question') {
            await this.handleAskQuestion(chatId, userId);
        } else if (data === 'contact_lawyer') {
            await this.handleContactLawyer(chatId, userId);
        } else if (data === 'back_to_main') {
            await this.handleBackToMain(chatId, userId);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞
    async handleCategorySelection(chatId, userId, data) {
        const category = data.replace('category_', '');
        const categoryNames = {
            corporate: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ',
            family: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ',
            realestate: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            labor: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
            tax: '–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
            admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ'
        };
        
        const categoryName = categoryNames[category];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const session = this.userSessions.get(userId);
        if (session) {
            session.currentCategory = category;
            session.lastActivity = Date.now();
        }
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const message = `üìö **${categoryName}**

–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª "${categoryName}". –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:

‚Ä¢ –ó–∞–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∞–≤–∞
‚Ä¢ –û–ø–∏—Å–∞—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`;

        const keyboard = [
            [{ text: 'üìù –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data: `examples_${category}` }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ];
        
        await this.bot.editMessageText(message, {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        this.metrics.popularCategories[category] = (this.metrics.popularCategories[category] || 0) + 1;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleMessage(msg) {
        if (msg.text && !msg.text.startsWith('/')) {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const userMessage = msg.text;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const session = this.userSessions.get(userId);
            if (!session) {
                await this.handleStart(msg);
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await this.bot.sendChatAction(chatId, 'typing');
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            await this.processUserQuery(chatId, userId, userMessage);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    async processUserQuery(chatId, userId, query) {
        try {
            const session = this.userSessions.get(userId);
            const category = session?.currentCategory || 'general';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
            const analysisMessage = await this.bot.sendMessage(chatId, 
                'üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...**\n\n' +
                '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞\n' +
                'üìä –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n' +
                'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...',
                { parse_mode: 'Markdown' }
            );
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const systemPrompt = this.getSystemPrompt(category);
            
            // –°–∫–æ—Ä–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            const score = await this.calculateQueryScore(query, category);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT API
            const response = await this.generateGPTResponse(query, systemPrompt, score);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await this.bot.editMessageText(
                `‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n${response}\n\n` +
                `üìä **–û—Ü–µ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:** ${score.total}/100\n` +
                `‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${score.complexity}/25\n` +
                `‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ${score.relevance}/25\n` +
                `‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: ${score.completeness}/25\n` +
                `‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å: ${score.specificity}/25`,
                {
                    chat_id: chatId,
                    message_id: analysisMessage.message_id,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üëç –ü–æ–ª–µ–∑–Ω–æ', callback_data: 'feedback_positive' },
                                { text: 'üëé –ù–µ –ø–æ–º–æ–≥–ª–æ', callback_data: 'feedback_negative' }
                            ],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
                        ]
                    }
                }
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.updateMetrics(userId, score, true);
            
        } catch (error) {
            console.error('Error processing query:', error);
            await this.bot.sendMessage(chatId, 
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }
                        ]]
                    }
                }
            );
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getSystemPrompt(category) {
        const prompts = {
            corporate: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –û–û–û, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Ä–∞–º, M&A —Å–¥–µ–ª–∫–∞–º. –°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§.`,
            
            family: `–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ –ø–æ –±—Ä–∞–∫—É, —Ä–∞–∑–≤–æ–¥—É, –∞–ª–∏–º–µ–Ω—Ç–∞–º, —Ä–∞–∑–¥–µ–ª—É –∏–º—É—â–µ—Å—Ç–≤–∞. –ë—É–¥—å—Ç–µ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã –∏ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é.`,
            
            realestate: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –∑–µ–º–µ–ª—å–Ω–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ –ø–æ –∫—É–ø–ª–µ-–ø—Ä–æ–¥–∞–∂–µ, –∞—Ä–µ–Ω–¥–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤, —Å–ø–æ—Ä–∞–º —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞–º–∏.`,
            
            labor: `–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ –ø–æ —Ç—Ä—É–¥–æ–≤—ã–º –¥–æ–≥–æ–≤–æ—Ä–∞–º, —É–≤–æ–ª—å–Ω–µ–Ω–∏—é, –∑–∞—Ä–ø–ª–∞—Ç–µ, —Ç—Ä—É–¥–æ–≤—ã–º —Å–ø–æ—Ä–∞–º, –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞.`,
            
            tax: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ –ø–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—é —Ñ–∏–∑–ª–∏—Ü –∏ —é—Ä–ª–∏—Ü, –ù–î–°, –Ω–∞–ª–æ–≥—É –Ω–∞ –ø—Ä–∏–±—ã–ª—å, –ª—å–≥–æ—Ç–∞–º –∏ –≤—ã—á–µ—Ç–∞–º.`,
            
            admin: `–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è–º, –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—é, –≥–æ—Å—É—Å–ª—É–≥–∞–º, –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—é –¥–µ–π—Å—Ç–≤–∏–π –≤–ª–∞—Å—Ç–µ–π.`,
            
            general: `–í—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –æ—Ç—Ä–∞—Å–ª—è–º –ø—Ä–∞–≤–∞ –†–§.`
        };
        
        return prompts[category] || prompts.general;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT API
    async generateGPTResponse(query, systemPrompt, score) {
        try {
            const messages = [
                {
                    role: 'system',
                    content: systemPrompt + `\n\n–û—Ü–µ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${score.total}/100. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞.`
                },
                {
                    role: 'user',
                    content: query
                }
            ];
            
            const response = await this.openai.chat.completions.create({
                model: this.config.model,
                messages: messages,
                max_tokens: this.config.maxTokens,
                temperature: this.config.temperature
            });
            
            return response.choices[0].message.content;
            
        } catch (error) {
            console.error('GPT API Error:', error);
            return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.';
        }
    }

    // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞
    async calculateQueryScore(query, category) {
        const score = {
            complexity: 0,      // –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ (0-25)
            relevance: 0,       // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (0-25)
            completeness: 0,    // –ü–æ–ª–Ω–æ—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è (0-25)
            specificity: 0,     // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å (0-25)
            total: 0
        };
        
        // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–¥–ª–∏–Ω–∞, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤)
        const words = query.split(' ').length;
        const legalTerms = this.countLegalTerms(query);
        const questions = (query.match(/\?/g) || []).length;
        
        score.complexity = Math.min(25, Math.floor(
            (words / 10) * 5 + 
            legalTerms * 3 + 
            questions * 2
        ));
        
        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryKeywords = this.getCategoryKeywords(category);
        const relevanceCount = categoryKeywords.filter(keyword => 
            query.toLowerCase().includes(keyword.toLowerCase())
        ).length;
        
        score.relevance = Math.min(25, relevanceCount * 5);
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è
        const hasContext = query.includes('—Å–∏—Ç—É–∞—Ü–∏—è') || query.includes('—Å–ª—É—á–∞–π') || query.includes('–ø—Ä–æ–±–ª–µ–º–∞');
        const hasDetails = words > 20;
        const hasSpecifics = /\d+/.test(query) || query.includes('—Ä—É–±–ª') || query.includes('–≥–æ–¥');
        
        score.completeness = 
            (hasContext ? 8 : 0) + 
            (hasDetails ? 10 : 0) + 
            (hasSpecifics ? 7 : 0);
        
        // –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏
        const isSpecific = query.includes('—Å—Ç–∞—Ç—å—è') || query.includes('–∑–∞–∫–æ–Ω') || query.includes('–∫–æ–¥–µ–∫—Å');
        const hasNumbers = /\d+/.test(query);
        const hasDates = /\d{4}/.test(query);
        
        score.specificity = 
            (isSpecific ? 10 : 0) + 
            (hasNumbers ? 8 : 0) + 
            (hasDates ? 7 : 0);
        
        // –û–±—â–∏–π –±–∞–ª–ª
        score.total = score.complexity + score.relevance + score.completeness + score.specificity;
        
        return score;
    }

    // –ü–æ–¥—Å—á–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    countLegalTerms(text) {
        const legalTerms = [
            '–¥–æ–≥–æ–≤–æ—Ä', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '–∏—Å–∫', '—Å—É–¥', '–ø—Ä–∞–≤–æ', '–∑–∞–∫–æ–Ω', '—Å—Ç–∞—Ç—å—è', '–∫–æ–¥–µ–∫—Å',
            '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '–∞–ª–∏–º–µ–Ω—Ç—ã',
            '—Ä–∞–∑–≤–æ–¥', '–±—Ä–∞–∫', '–æ–æ–æ', '–∞–æ', '–∏–ø', '–Ω–∞–ª–æ–≥', '—à—Ç—Ä–∞—Ñ', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è'
        ];
        
        return legalTerms.filter(term => 
            text.toLowerCase().includes(term)
        ).length;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryKeywords(category) {
        const keywords = {
            corporate: ['–æ–æ–æ', '–∞–æ', '—É—Å—Ç–∞–≤', '—É—á—Ä–µ–¥–∏—Ç–µ–ª—å', '–¥–æ–ª—è', '–∞–∫—Ü–∏—è', '—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'],
            family: ['–±—Ä–∞–∫', '—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã', '—Ä–µ–±–µ–Ω–æ–∫', '—Å—É–ø—Ä—É–≥', '–∏–º—É—â–µ—Å—Ç–≤–æ'],
            realestate: ['–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '—É—á–∞—Å—Ç–æ–∫', '–∞—Ä–µ–Ω–¥–∞', '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–æ–¥–∞–∂–∞'],
            labor: ['—Ä–∞–±–æ—Ç–∞', '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–æ—Ç–ø—É—Å–∫', '—Ç—Ä—É–¥–æ–≤–æ–π'],
            tax: ['–Ω–∞–ª–æ–≥', '–Ω–¥—Ñ–ª', '–Ω–¥—Å', '–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è', '–ª—å–≥–æ—Ç–∞', '–≤—ã—á–µ—Ç'],
            admin: ['—à—Ç—Ä–∞—Ñ', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ª–∏—Ü–µ–Ω–∑–∏—è', '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', '–∂–∞–ª–æ–±–∞']
        };
        
        return keywords[category] || [];
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    initializeUserSession(userId, userName) {
        if (!this.userSessions.has(userId)) {
            this.userSessions.set(userId, {
                userId,
                userName,
                startTime: Date.now(),
                lastActivity: Date.now(),
                currentCategory: null,
                queryCount: 0,
                averageScore: 0,
                totalScore: 0
            });
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    updateMetrics(userId, score, success) {
        this.metrics.totalQueries++;
        if (success) this.metrics.successfulQueries++;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
        const session = this.userSessions.get(userId);
        if (session) {
            session.queryCount++;
            session.totalScore += score.total;
            session.averageScore = session.totalScore / session.queryCount;
            session.lastActivity = Date.now();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        const totalScores = Array.from(this.userSessions.values())
            .reduce((sum, session) => sum + session.totalScore, 0);
        const totalQueries = Array.from(this.userSessions.values())
            .reduce((sum, session) => sum + session.queryCount, 0);
        
        this.metrics.averageScore = totalQueries > 0 ? totalScores / totalQueries : 0;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async handleBackToMain(chatId, userId) {
        const session = this.userSessions.get(userId);
        const userName = session?.userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        const message = `üèõÔ∏è **Eva Lawyer Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${userName}!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        const keyboard = this.createMainMenu();
        
        await this.bot.sendMessage(chatId, message, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async handleUserProfile(chatId, userId) {
        const session = this.userSessions.get(userId);
        if (!session) {
            await this.handleStart({ chat: { id: chatId }, from: { id: userId } });
            return;
        }
        
        const uptime = Math.floor((Date.now() - session.startTime) / 1000 / 60);
        
        const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: ${session.queryCount}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${session.averageScore.toFixed(1)}/100
‚Ä¢ –í—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ: ${uptime} –º–∏–Ω
‚Ä¢ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${session.currentCategory || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
${this.getUserAchievements(session)}`;

        const keyboard = [
            [{ text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ];
        
        await this.bot.sendMessage(chatId, message, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserAchievements(session) {
        const achievements = [];
        
        if (session.queryCount >= 5) achievements.push('üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        if (session.averageScore >= 70) achievements.push('‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
        if (session.queryCount >= 10) achievements.push('üèÖ –û–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç');
        
        return achievements.length > 0 ? achievements.join('\n') : '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async handleDocumentAnalysis(chatId, userId) {
        const message = `üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

üìã **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ Word —Ñ–∞–π–ª—ã (.doc, .docx)
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)

üîç **–ß—Ç–æ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:**
‚Ä¢ –ü—Ä–∞–≤–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`;

        const keyboard = [
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ];
        
        await this.bot.sendMessage(chatId, message, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async handleDocument(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        await this.bot.sendMessage(chatId, 
            'üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...\n\n' +
            '‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n' +
            'üîç –ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑\n' +
            'üìä –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤...',
            { parse_mode: 'Markdown' }
        );
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        setTimeout(async () => {
            await this.bot.sendMessage(chatId,
                '‚úÖ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n' +
                'üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n' +
                '‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n' +
                '‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 2 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–∞\n' +
                '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å 3 –ø—É–Ω–∫—Ç–∞\n\n' +
                'üìä **–û—Ü–µ–Ω–∫–∞:** 75/100',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'detailed_report' }],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
                        ]
                    }
                }
            );
        }, 3000);
    }

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    start() {
        console.log('üöÄ Eva Lawyer Bot Enhanced v6.1 started successfully!');
        console.log(`üìä Monitoring metrics at: ${Date.now()}`);
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        setInterval(() => {
            console.log('üìä Bot Metrics:', {
                users: this.metrics.totalUsers,
                queries: this.metrics.totalQueries,
                success_rate: ((this.metrics.successfulQueries / this.metrics.totalQueries) * 100).toFixed(1) + '%',
                avg_score: this.metrics.averageScore.toFixed(1)
            });
        }, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (require.main === module) {
    const bot = new EvaLawyerBotEnhanced();
    bot.start();
}

module.exports = EvaLawyerBotEnhanced;

