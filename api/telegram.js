// Telegram Bot API Handler for Vercel
export default async function handler(req, res) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
          return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
          const update = req.body;
          console.log('üì® Webhook received:', JSON.stringify(update, null, 2));

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const token = process.env.TELEGRAM_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN_NEW;

        if (!token) {
                  console.error('‚ùå No bot token found');
                  return res.status(500).json({ error: 'Bot token not configured' });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.message) {
                  const chatId = update.message.chat.id;
                  const text = update.message.text;
                  const userId = update.message.from.id;
                  const userName = update.message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

            console.log(`üí¨ Message from ${userName} (${userId}): ${text}`);

            let responseText = '';

            if (text === '/start') {
                        responseText = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!

                        –Ø –Æ—Ä–∏—Å—Ç –ï–≤–∞ - –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.

                        üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        ‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                        ‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
                        ‚Ä¢ /inn [–Ω–æ–º–µ—Ä] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù

                        üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!`;
            } 
            else if (text === '/help') {
                        responseText = `üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

                        üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
                        üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
                        üîπ /inn [–Ω–æ–º–µ—Ä] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù

                        üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
                        ‚Ä¢ "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?"
                        ‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?"
                        ‚Ä¢ "–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"

                        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!`;
            } 
            else if (text && text.startsWith('/inn')) {
                        const innMatch = text.match(/\/inn\s+(\d+)/);
                        if (innMatch) {
                                      const inn = innMatch[1];
                                      responseText = `üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–ø–∞–Ω–∏—é —Å –ò–ù–ù: ${inn}

                                      ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. 
                                      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
                        } else {
                                      responseText = `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.

                                      –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /inn [–Ω–æ–º–µ—Ä –ò–ù–ù]
                                      –ü—Ä–∏–º–µ—Ä: /inn 7707083893`;
                        }
            }
                  else if (text) {
                              // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ AI –ø–æ–º–æ—â–Ω–∏–∫
                    responseText = `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã

                    –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: "${text}"

                    ü§ñ –Ø –Æ—Ä–∏—Å—Ç –ï–≤–∞, –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤—ã–º–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
                    ‚Ä¢ /help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                    ‚Ä¢ /inn [–Ω–æ–º–µ—Ä] - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π

                    –°–∫–æ—Ä–æ —è —Å—Ç–∞–Ω—É –µ—â–µ —É–º–Ω–µ–µ! üöÄ`;
                  }
                  else {
                              responseText = `–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.`;
                  }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram API
            const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;
                  const response = await fetch(telegramUrl, {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({
                                            chat_id: chatId,
                                            text: responseText,
                                            parse_mode: 'HTML'
                              })
                  });

            if (!response.ok) {
                        const errorText = await response.text();
                        console.error('‚ùå Failed to send message:', errorText);
                        return res.status(500).json({ error: 'Failed to send message' });
            }

            console.log('‚úÖ Message sent successfully');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
        if (update.callback_query) {
                  console.log('üîò Callback query received:', update.callback_query.data);

            const callbackQuery = update.callback_query;
                  const chatId = callbackQuery.message.chat.id;

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            const answerUrl = `https://api.telegram.org/bot${token}/answerCallbackQuery`;
                  await fetch(answerUrl, {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({
                                            callback_query_id: callbackQuery.id,
                                            text: '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
                              })
                  });
        }

        return res.status(200).json({ ok: true });
  } catch (error) {
          console.error('‚ùå Webhook error:', error);
          return res.status(500).json({ error: 'Internal server error' });
  }
}
