/**
 * Eva Lawyer Bot - Telegram webhook handler
 * Handles incoming messages from Telegram and integrates with OpenAI Assistant
 */

// Import modules
const { EvaAssistant, PromptCategory } = require('./modules/assistant');
const { checkCounterparty } = require('./modules/counterparty');
const { processDocument } = require('./modules/document-processor');
const { analyzeImage } = require('./modules/vision-analyzer');
const { render } = require('./modules/menus');
const { handleAction } = require('./modules/action-handlers');
const { executeTicket, link } = require('./modules/action-bus');
const { VectorMemory } = require('./modules/vector-memory');
const { ReActAgent } = require('./modules/react-planner');
const { addQuickActions, handleActionResult } = require('./modules/enhanced-ui');

// Environment variables
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ASSISTANT_ID = process.env.ASSISTANT_ID;
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET;
const DADATA_API_KEY = process.env.DADATA_API_KEY;
const DADATA_SECRET_KEY = process.env.DADATA_SECRET_KEY;

// Initialize Eva Assistant
const assistant = new EvaAssistant({
  assistantId: ASSISTANT_ID,
  apiKey: OPENAI_API_KEY
});

// Initialize Vector Memory
const vectorMemory = new VectorMemory(OPENAI_API_KEY);

// Initialize ReAct Agent
const reactAgent = new ReActAgent(OPENAI_API_KEY, ASSISTANT_ID);

// User sessions storage
const userSessions = {};

/**
 * Send message to Telegram
 * @param {number} chatId - Telegram chat ID
 * @param {string} text - Message text
 * @param {object} options - Additional options
 * @returns {Promise<boolean>} - Success status
 */
async function sendMessage(chatId, text, options = {}) {
  try {
    // Default options
    const messageOptions = {
      parse_mode: 'Markdown',
      ...options
    };

    // Prepare request body
    const body = {
      chat_id: chatId,
      text: text,
      ...messageOptions
    };

    // Send request to Telegram API
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body)
    });
    
    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error('Send message error:', error);
    return false;
  }
}

/**
 * Edit message text
 * @param {number} chatId - Telegram chat ID
 * @param {number} messageId - Message ID to edit
 * @param {string} text - New message text
 * @param {object} options - Additional options
 * @returns {Promise<boolean>} - Success status
 */
async function editMessage(chatId, messageId, text, options = {}) {
  try {
    const messageOptions = {
      parse_mode: 'Markdown',
      ...options
    };

    const body = {
      chat_id: chatId,
      message_id: messageId,
      text: text,
      ...messageOptions
    };

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body)
    });
    
    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error('Edit message error:', error);
    return false;
  }
}

/**
 * Send typing action to Telegram
 * @param {number} chatId - Telegram chat ID
 * @returns {Promise<boolean>} - Success status
 */
async function sendTypingAction(chatId) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendChatAction`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        action: 'typing'
      })
    });
    
    return response.ok;
  } catch (error) {
    console.error('Send typing action error:', error);
    return false;
  }
}

/**
 * Answer callback query
 * @param {string} callbackQueryId - Callback query ID
 * @param {string} text - Answer text (optional)
 * @returns {Promise<boolean>} - Success status
 */
async function answerCallbackQuery(callbackQueryId, text = '') {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text
      })
    });
    
    return response.ok;
  } catch (error) {
    console.error('Answer callback query error:', error);
    return false;
  }
}

/**
 * Process user message with Eva Assistant
 * @param {string} text - User message text
 * @param {number} userId - User ID
 * @param {number} chatId - Chat ID
 * @returns {Promise<string>} - Assistant response
 */
async function processUserMessage(text, userId, chatId) {
  try {
    // Check for INN pattern (10-12 digits)
    const innMatch = text.match(/^\d{10,12}$/);
    if (innMatch) {
      await sendTypingAction(chatId);
      return await processInnQuery(text);
    }

    // Get user session or create new one
    const userSession = userSessions[userId] || {};
    const threadId = userSession.threadId;
    
    // Send typing indicator
    await sendTypingAction(chatId);
    
    // Process message with assistant
    const response = await assistant.askAssistant(text, threadId, userId.toString());
    
    // Save thread ID for future conversations
    if (response.success && response.threadId) {
      userSessions[userId] = {
        threadId: response.threadId,
        lastActivity: Date.now(),
        ...userSession
      };
    }
    
    return response.success ? response.message : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.';
  } catch (error) {
    console.error('Process message error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

/**
 * Process INN query with DaData
 * @param {string} inn - INN number
 * @returns {Promise<string>} - Formatted response
 */
async function processInnQuery(inn) {
  try {
    // Check if DaData credentials are available
    if (!DADATA_API_KEY || !DADATA_SECRET_KEY) {
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
    }
    
    // Call DaData API
    const result = await checkCounterparty(inn, DADATA_API_KEY, DADATA_SECRET_KEY);
    
    if (!result.success) {
      return `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ò–ù–ù ${inn}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.`;
    }
    
    // Format response
    const data = result.data;
    let response = `üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù ${inn}*\n\n`;
    
    if (data.name) {
      response += `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${data.name.short || data.name.full || '–ù/–î'}\n`;
    }
    
    if (data.state) {
      const status = data.state.status === 'ACTIVE' ? '‚úÖ –î–µ–π—Å—Ç–≤—É—é—â–∞—è' : '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤—É—é—â–∞—è';
      response += `*–°—Ç–∞—Ç—É—Å:* ${status}\n`;
    }
    
    if (data.address) {
      response += `*–ê–¥—Ä–µ—Å:* ${data.address.value || '–ù/–î'}\n`;
    }
    
    if (data.management) {
      response += `*–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:* ${data.management.name || '–ù/–î'}\n`;
      response += `*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${data.management.post || '–ù/–î'}\n`;
    }
    
    return response;
  } catch (error) {
    console.error('Process INN query error:', error);
    return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù ${inn}.`;
  }
}

/**
 * Handle callback query (button press)
 * @param {Object} callbackQuery - Callback query object
 * @returns {Promise<void>}
 */
async function handleCallbackQuery(callbackQuery) {
  const { id, data, message, from } = callbackQuery;
  const chatId = message.chat.id;
  const messageId = message.message_id;
  const userId = from.id;
  
  try {
    // Answer callback query immediately
    await answerCallbackQuery(id);
    
    // Handle ticket-based actions
    if (data.startsWith('a:')) {
      const token = data.split(':')[1];
      const userSession = userSessions[userId] || {};
      const context = { userSession, userId, chatId };
      
      const result = await executeTicket(token, context);
      
      if (!result.success) {
        await sendMessage(chatId, '‚ö†Ô∏è –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        return;
      }
      
      await handleActionResult(result.result, chatId, messageId, userId);
      return;
    }
    
    // Handle menu navigation
    if (data.startsWith('MENU:')) {
      const section = data.split(':')[1];
      const ui = render(section);
      
      // Add contextual quick actions based on user session
      const userSession = userSessions[userId] || {};
      const enhancedUi = await addQuickActions(ui, userSession, userId);
      
      await editMessage(chatId, messageId, enhancedUi.text, { reply_markup: enhancedUi.reply_markup });
      return;
    }
    
    // Handle legacy actions (backward compatibility)
    if (data.startsWith('ACT:')) {
      const userSession = userSessions[userId] || {};
      const actionResult = await handleAction(data, chatId, messageId, userSession);
      await handleActionResult(actionResult, chatId, messageId, userId);
      return;
    }
    
    // Unknown callback data
    await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
  } catch (error) {
    console.error('Callback query error:', error);
    await answerCallbackQuery(id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
}

/**
 * Process prompt action
 * @param {Object} actionResult - Action result with prompt info
 * @param {number} userId - User ID
 * @param {number} chatId - Chat ID
 * @returns {Promise<string>} - Prompt response
 */
async function processPromptAction(actionResult, userId, chatId) {
  try {
    // Get user session
    const userSession = userSessions[userId] || {};
    const threadId = userSession.threadId;
    
    // Build prompt based on action
    let promptText = '';
    
    switch (actionResult.prompt) {
      case 'PROMPT_CONTRACT_REVIEW':
        promptText = '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.';
        break;
      case 'PROMPT_CONTRACT_RISKS':
        promptText = '–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É–Ω–∫—Ç–æ–≤, —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.';
        break;
      case 'PROMPT_LEGAL_OPINION':
        promptText = '–ü–æ–¥–≥–æ—Ç–æ–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –Ω–æ—Ä–º –ø—Ä–∞–≤–∞.';
        break;
      default:
        promptText = '–û–±—Ä–∞–±–æ—Ç–∞–π –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.';
    }
    
    // Process with assistant
    const response = await assistant.askAssistant(promptText, threadId, userId.toString());
    
    // Save thread ID
    if (response.success && response.threadId) {
      userSessions[userId] = {
        ...userSession,
        threadId: response.threadId,
        lastActivity: Date.now()
      };
    }
    
    return response.success ? response.message : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
  } catch (error) {
    console.error('Process prompt action error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
  }
}

/**
 * Handle command
 * @param {string} command - Command text
 * @param {number} chatId - Chat ID
 * @returns {Promise<string>} - Command response
 */
async function handleCommand(command, chatId) {
  switch (command) {
    case '/start':
      // Send main menu
      const ui = render('home');
      await sendMessage(chatId, ui.text, { reply_markup: ui.reply_markup });
      return null; // Don't send additional message
      
    case '/menu':
      // Send main menu
      const menuUi = render('home');
      await sendMessage(chatId, menuUi.text, { reply_markup: menuUi.reply_markup });
      return null;

    case '/help':
      return `*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Eva Lawyer Bot*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –í–≤–æ–¥–∏—Ç–µ –ò–ù–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ PDF, DOCX, TXT (–¥–æ 20 –ú–ë)
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG) –¥–ª—è OCR`;

    case '/clear':
      // Clear user session
      const userId = chatId;
      if (userSessions[userId]) {
        delete userSessions[userId];
      }
      return 'üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É!';

    default:
      return null; // Not a recognized command
  }
}

/**
 * Main webhook handler
 */
module.exports = async (req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Telegram-Bot-Api-Secret-Token');

  // Handle OPTIONS request
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Handle GET request
  if (req.method === 'GET') {
    return res.status(200).json({ 
      status: 'ok', 
      message: 'Eva Lawyer Bot API is running with menu system',
      timestamp: new Date().toISOString()
    });
  }

  // Handle POST request (webhook)
  if (req.method === 'POST') {
    try {
      const update = req.body;
      
      // Handle callback query (button press)
      if (update.callback_query) {
        await handleCallbackQuery(update.callback_query);
        return res.status(200).json({ status: 'ok' });
      }
      
      // Check if update contains a message
      if (!update.message) {
        return res.status(200).json({ status: 'ok' });
      }

      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      
      // Handle commands
      if (message.text && message.text.startsWith('/')) {
        const commandResponse = await handleCommand(message.text, chatId);
        
        if (commandResponse) {
          await sendMessage(chatId, commandResponse);
        }
        return res.status(200).json({ status: 'ok' });
      }
      
      // Handle document
      if (message.document) {
        const response = await processDocumentFile(message.document, chatId);
        await sendMessage(chatId, response);
        return res.status(200).json({ status: 'ok' });
      }
      
      // Handle photo
      if (message.photo && message.photo.length > 0) {
        const response = await processPhoto(message.photo, chatId);
        await sendMessage(chatId, response);
        return res.status(200).json({ status: 'ok' });
      }
      
      // Handle text message
      if (message.text) {
        const response = await processUserMessage(message.text, userId, chatId);
        await sendMessage(chatId, response);
        return res.status(200).json({ status: 'ok' });
      }

      // Default response for unsupported message types
      await sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      return res.status(200).json({ status: 'ok' });
    } catch (error) {
      console.error('Webhook error:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  return res.status(405).json({ error: 'Method not allowed' });
};

/**
 * Process document file (moved from main code for better organization)
 */
async function processDocumentFile(file, chatId) {
  try {
    // Send typing indicator
    await sendTypingAction(chatId);
    
    // Get file info
    const fileInfo = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${file.file_id}`);
    const fileInfoJson = await fileInfo.json();
    
    if (!fileInfoJson.ok || !fileInfoJson.result.file_path) {
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.';
    }
    
    // Get file URL
    const filePath = fileInfoJson.result.file_path;
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    
    // Process document
    const result = await processDocument(fileUrl, file.file_name);
    
    if (!result.success) {
      return `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: ${result.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
    
    // Send extracted text to assistant for analysis
    await sendMessage(chatId, 'üìÑ *–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...');
    await sendTypingAction(chatId);
    
    // Get user session or create new one
    const userId = chatId; // Use chatId as userId for simplicity
    const userSession = userSessions[userId] || {};
    const threadId = userSession.threadId;
    
    // Save document to user session
    userSessions[userId] = {
      ...userSession,
      lastDocument: result.text,
      lastActivity: Date.now()
    };
    
    // Create prompt for document analysis
    const analysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:\n\n${result.text}`;
    
    // Process with assistant
    const response = await assistant.askAssistant(analysisPrompt, threadId, userId.toString());
    
    // Save thread ID for future conversations
    if (response.success && response.threadId) {
      userSessions[userId] = {
        ...userSessions[userId],
        threadId: response.threadId,
        lastActivity: Date.now()
      };
    }
    
    return response.success ? response.message : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.';
  } catch (error) {
    console.error('Process document error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.';
  }
}

/**
 * Process photo with OCR (moved from main code for better organization)
 */
async function processPhoto(photo, chatId) {
  try {
    // Send typing indicator
    await sendTypingAction(chatId);
    
    // Get the largest photo
    const photoSize = photo[photo.length - 1];
    
    // Get file info
    const fileInfo = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${photoSize.file_id}`);
    const fileInfoJson = await fileInfo.json();
    
    if (!fileInfoJson.ok || !fileInfoJson.result.file_path) {
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ.';
    }
    
    // Get file URL
    const filePath = fileInfoJson.result.file_path;
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    
    // Process image with OCR
    await sendMessage(chatId, 'üîç *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*\n\n–ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR.');
    await sendTypingAction(chatId);
    
    const result = await analyzeImage(fileUrl, OPENAI_API_KEY);
    
    if (!result.success) {
      return `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${result.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
    
    // Send extracted text to assistant for analysis
    await sendMessage(chatId, 'üì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!*\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...');
    await sendTypingAction(chatId);
    
    // Get user session or create new one
    const userId = chatId; // Use chatId as userId for simplicity
    const userSession = userSessions[userId] || {};
    const threadId = userSession.threadId;
    
    // Create prompt for document analysis
    const analysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:\n\n${result.text}`;
    
    // Process with assistant
    const response = await assistant.askAssistant(analysisPrompt, threadId, userId.toString());
    
    // Save thread ID for future conversations
    if (response.success && response.threadId) {
      userSessions[userId] = {
        threadId: response.threadId,
        lastActivity: Date.now()
      };
    }
    
    return response.success ? response.message : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
  } catch (error) {
    console.error('Process photo error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
  }
}

