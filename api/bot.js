const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TG = `https://api.telegram.org/bot${TOKEN}`;

function replyKeyboard() {
  return {
    keyboard: [
      [{ text: "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã" }, { text: "‚öñÔ∏è –ü—Ä–æ–º–ø—Ç—ã —é—Ä–∏—Å—Ç–∞" }],
      [{ text: "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞" }, { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å" }]
    ],
    resize_keyboard: true
  };
}
function inlineDocs() {
  return { inline_keyboard: [[
    { text: "–°—á—ë—Ç", callback_data: "doc:invoice" },
    { text: "–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data: "doc:contract" },
    { text: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: "doc:spec" }
  ]]};
}
function inlinePrompts() {
  return { inline_keyboard: [[
    { text: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞", callback_data: "pr:contract_check" },
    { text: "–Æ—Ä. –∑–∞–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "pr:legal_opinion" },
    { text: "–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é", callback_data: "pr:claim_reply" }
  ]]};
}

async function send(chat_id, text, extra={}) {
  await fetch(`${TG}/sendMessage`, {
    method:"POST",
    headers:{ "Content-Type":"application/json" },
    body: JSON.stringify({ chat_id, text, ...extra })
  });
}

import { renderInvoice, renderContractSupply, renderSpec } from "../src/templates/index.js";
import { legalAssist } from "../src/openai.js";
import { checkCounterparty } from "../src/dadata.js";

export default async (req, res) => {
  if (req.method !== "POST") return res.status(405).end();

  const update = req.body;
  try {
    if (update.message) {
      const m = update.message;
      const chat = m.chat.id;
      const text = (m.text||"").trim();

      if (text === "/start") {
        await send(chat, "–ü—Ä–∏–≤–µ—Ç! –Ø –ï–≤–∞ ‚Äî –≤–∞—à —é—Ä–∏—Å—Ç-–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", {
          reply_markup: replyKeyboard()
        });
      } else if (text === "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã") {
        await send(chat, "–ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å?", {
          reply_markup: { inline_keyboard: inlineDocs().inline_keyboard }
        });
      } else if (text === "‚öñÔ∏è –ü—Ä–æ–º–ø—Ç—ã —é—Ä–∏—Å—Ç–∞") {
        await send(chat, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", {
          reply_markup: { inline_keyboard: inlinePrompts().inline_keyboard }
        });
      } else if (text === "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞") {
        await send(chat, "–ü—Ä–∏—à–ª–∏—Ç–µ –ò–ù–ù (10/12 —Ü–∏—Ñ—Ä) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.");
      } else if (/^\d{10}(\d{2})?$/.test(text) || text.length > 3) {
        const r = await checkCounterparty(text);
        await send(chat, r || "–ù–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–ù–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ.");
      } else if (text === "‚ÑπÔ∏è –ü–æ–º–æ—â—å") {
        await send(chat, "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –î–ª—è DaData: –ø—Ä–∏—à–ª–∏—Ç–µ –ò–ù–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ.");
      } else {
        const answer = await legalAssist("contract_check", text);
        await send(chat, answer);
      }
    }

    if (update.callback_query) {
      const cq = update.callback_query;
      const chat = cq.message.chat.id;
      const data = cq.data;

      if (data.startsWith("doc:")) {
        if (data === "doc:invoice") {
          const out = renderInvoice({
            invoice_number:"001", invoice_date:"11.08.2025",
            supplier_name:"–û–û–û –†–æ–º–∞—à–∫–∞", supplier_inn:"7700000000", supplier_kpp:"770001001",
            buyer_name:"–û–û–û –í–∞—Å–∏–ª—ë–∫", buyer_inn:"7800000000", buyer_kpp:"780001001",
            items:[{name:"–Æ—Ä. —É—Å–ª—É–≥–∏", qty:1, unit:"—É—Å–ª.", price:10000}]
          });
          await send(chat, out);
        }
        if (data === "doc:contract") {
          const out = renderContractSupply({ contract_number:"42", city:"–ú–æ—Å–∫–≤–∞", date:"11.08.2025" });
          await send(chat, out);
        }
        if (data === "doc:spec") {
          const out = renderSpec({
            spec_number:"1", contract_number:"42", contract_date:"11.08.2025",
            items:[{name:"–£—Å–ª—É–≥–∞", unit:"—É—Å–ª.", qty:1, price:10000, vat:20}]
          });
          await send(chat, out);
        }
      }

      if (data.startsWith("pr:")) {
        if (data === "pr:contract_check") {
          await send(chat, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–æ–≥–æ–≤–æ—Ä–∞ + —á—å—é –ø–æ–∑–∏—Ü–∏—é –∑–∞—â–∏—â–∞–µ–º (–∑–∞–∫–∞–∑—á–∏–∫/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å). –Ø –≤–µ—Ä–Ω—É —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–∞–≤–∫–∏.");
        }
        if (data === "pr:legal_opinion") {
          await send(chat, "–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.");
        }
        if (data === "pr:claim_reply") {
          await send(chat, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–µ–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç.");
        }
      }

      await fetch(`${TG}/answerCallbackQuery`, {
        method:"POST",
        headers:{ "Content-Type":"application/json" },
        body: JSON.stringify({ callback_query_id: cq.id })
      });
    }

    res.status(200).end("ok");
  } catch (e) {
    console.error(e);
    res.status(200).end("ok");
  }
};
