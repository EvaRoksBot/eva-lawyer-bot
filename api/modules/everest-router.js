// Everest Router - Handles all callback queries and routing
const {
    getMainMenu,
    getContractsMenu,
    getEverestPackageMenu,
    getINNMenu,
    getBillingMenu,
    getReportsMenu,
    getSettingsMenu,
    getHelpMenu,
    validateINN,
    routeCallback
} = require('./everest-menu');
const CounterpartyService = require('./counterparty-service');

class EverestRouter {
    constructor(bot) {
        this.bot = bot;
        this.userStates = new Map(); // Simple in-memory state storage
        this.counterpartyService = new CounterpartyService({ logger: console });
    }

    // Main routing handler
    async handleCallback(callbackQuery) {
        const { data } = callbackQuery;
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;

        try {
            const route = routeCallback(data);
            if (!route) {
                await this.bot.answerCallbackQuery(callbackQuery.id, { text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" });
                return;
            }

            const { module, action, params } = route;
            
            // Route to appropriate handler
            switch (module) {
                case 'home':
                    await this.handleHome(chatId, messageId);
                    break;
                case 'contracts':
                    await this.handleContracts(chatId, messageId, action, params);
                    break;
                case 'pkg':
                    await this.handlePackage(chatId, messageId, action, params);
                    break;
                case 'inn':
                    await this.handleINN(chatId, messageId, action, params);
                    break;
                case 'docs':
                    await this.handleDocs(chatId, messageId, action, params);
                    break;
                case 'reports':
                    await this.handleReports(chatId, messageId, action, params);
                    break;
                case 'settings':
                    await this.handleSettings(chatId, messageId, action, params);
                    break;
                case 'help':
                    await this.handleHelp(chatId, messageId, action, params);
                    break;
                case 'bill':
                    await this.handleBilling(chatId, messageId, action, params);
                    break;
                case 'act':
                    await this.handleActs(chatId, messageId, action, params);
                    break;
                default:
                    await this.bot.answerCallbackQuery(callbackQuery.id, { text: "–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" });
                    return;
            }

            await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('Router error:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, { text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
        }
    }

    // Home handler
    async handleHome(chatId, messageId) {
        await this.bot.editMessageText(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ¬´–ï–≤–∞ ‚Äî –≠–≤–µ—Ä–µ—Å—Ç¬ª",
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: getMainMenu()
            }
        );
    }

    // Contracts handlers
    async handleContracts(chatId, messageId, action, params) {
        switch (action) {
            case 'menu':
                await this.bot.editMessageText(
                    "üßæ –î–æ–≥–æ–≤–æ—Ä—ã",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getContractsMenu()
                    }
                );
                break;
            case 'analyze':
                await this.bot.editMessageText(
                    "üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ (DOCX/PDF). –Ø –∏–∑–≤–ª–µ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∏—Å–∫–∏.",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:contracts:menu" }]] }
                    }
                );
                this.userStates.set(chatId, { state: 'awaiting_contract_file', action: 'analyze' });
                break;
            case 'redline':
                await this.bot.editMessageText(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫.",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:contracts:menu" }]] }
                    }
                );
                this.userStates.set(chatId, { state: 'awaiting_contract_file', action: 'redline' });
                break;
            case 'protocol':
                await this.bot.editMessageText(
                    "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π.",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:contracts:menu" }]] }
                    }
                );
                this.userStates.set(chatId, { state: 'awaiting_contract_file', action: 'protocol' });
                break;
            case 'extract':
                await this.bot.editMessageText(
                    "üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤.",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:contracts:menu" }]] }
                    }
                );
                this.userStates.set(chatId, { state: 'awaiting_contract_file', action: 'extract' });
                break;
        }
    }

    // Package handlers
    async handlePackage(chatId, messageId, action, params) {
        switch (action) {
            case 'menu':
                await this.bot.editMessageText(
                    "üìö –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getEverestPackageMenu()
                    }
                );
                break;
            case 'supply':
                await this.bot.editMessageText(
                    "üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª...",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:pkg:menu" }]] }
                    }
                );
                // TODO: Generate supply contract
                break;
            case 'spec':
                await this.bot.editMessageText(
                    "üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n–°–æ–∑–¥–∞—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ—Å—Ç–∞–≤–∫–∏...",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:pkg:menu" }]] }
                    }
                );
                // TODO: Generate specification
                break;
            case 'prot':
                await this.bot.editMessageText(
                    "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π\n\n–§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π...",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:pkg:menu" }]] }
                    }
                );
                // TODO: Generate protocol
                break;
            case 'wizard':
                await this.bot.editMessageText(
                    "üßô‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä —Å–±–æ—Ä–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞\n\n–°–æ–±–µ—Ä—É –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –î–æ–≥–æ–≤–æ—Ä + –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è + –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π.\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:pkg:menu" }]] }
                    }
                );
                this.userStates.set(chatId, { state: 'pkg_wizard_step1' });
                break;
        }
    }

    // INN handlers
    async handleINN(chatId, messageId, action, params) {
        switch (action) {
            case 'prompt':
                await this.bot.editMessageText(
                    "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getINNMenu()
                    }
                );
                break;
            case 'input':
                await this.bot.editMessageText(
                    "üî¢ –í–≤–æ–¥ –ò–ù–ù\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:inn:prompt" }]] }
                    }
                );
                this.userStates.set(chatId, { state: 'awaiting_inn' });
                break;
            case 'history':
                await this.bot.editMessageText(
                    "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤:\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:inn:prompt" }]] }
                    }
                );
                break;
            case 'to_crm':
                await this.bot.editMessageText(
                    "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CRM\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:inn:prompt" }]] }
                    }
                );
                break;
        }
    }

    // Docs handlers
    async handleDocs(chatId, messageId, action, params) {
        switch (action) {
            case 'billing':
                await this.bot.editMessageText(
                    "üí≥ –°—á—ë—Ç/–∞–∫—Ç—ã",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getBillingMenu()
                    }
                );
                break;
        }
    }

    // Billing handlers
    async handleBilling(chatId, messageId, action, params) {
        switch (action) {
            case 'new':
                await this.bot.editMessageText(
                    "üßæ –ù–æ–≤—ã–π —Å—á—ë—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞:\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:docs:billing" }]] }
                    }
                );
                break;
            case 'send':
                await this.bot.editMessageText(
                    "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:docs:billing" }]] }
                    }
                );
                break;
        }
    }

    // Acts handlers
    async handleActs(chatId, messageId, action, params) {
        switch (action) {
            case 'new':
                await this.bot.editMessageText(
                    "üìã –ù–æ–≤—ã–π –∞–∫—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∞:\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:docs:billing" }]] }
                    }
                );
                break;
        }
    }

    // Reports handlers
    async handleReports(chatId, messageId, action, params) {
        switch (action) {
            case 'menu':
                await this.bot.editMessageText(
                    "üìà –°—Ç–∞—Ç—É—Å—ã –∏ –æ—Ç—á—ë—Ç—ã",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getReportsMenu()
                    }
                );
                break;
            case 'open':
                await this.bot.editMessageText(
                    "üîÑ –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:reports:menu" }]] }
                    }
                );
                break;
            case 'done':
                await this.bot.editMessageText(
                    "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:reports:menu" }]] }
                    }
                );
                break;
            case 'errors':
                await this.bot.editMessageText(
                    "‚ùå –û—à–∏–±–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:reports:menu" }]] }
                    }
                );
                break;
        }
    }

    // Settings handlers
    async handleSettings(chatId, messageId, action, params) {
        switch (action) {
            case 'menu':
                await this.bot.editMessageText(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getSettingsMenu()
                    }
                );
                break;
            case 'fmt':
                await this.bot.editMessageText(
                    "üìÑ –§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: DOCX\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:settings:menu" }]] }
                    }
                );
                break;
            case 'sign':
                await this.bot.editMessageText(
                    "‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∏ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:settings:menu" }]] }
                    }
                );
                break;
            case 'int': {
                const status = await this.counterpartyService.getIntegrationStatus();
                await this.bot.editMessageText(
                    this.formatIntegrationStatus(status),
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:settings:menu" }]] },
                        parse_mode: 'Markdown'
                    }
                );
                break;
            }
            case 'notif':
                await this.bot.editMessageText(
                    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:settings:menu" }]] }
                    }
                );
                break;
        }
    }

    // Help handlers
    async handleHelp(chatId, messageId, action, params) {
        switch (action) {
            case 'menu':
                await this.bot.editMessageText(
                    "üÜò –ü–æ–º–æ—â—å",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: getHelpMenu()
                    }
                );
                break;
            case 'upload':
                await this.bot.editMessageText(
                    "üì§ –ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä\n\n1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–î–æ–≥–æ–≤–æ—Ä—ã'\n2. –ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX –∏–ª–∏ PDF\n4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:help:menu" }]] }
                    }
                );
                break;
            case 'cmds':
                await this.bot.editMessageText(
                    "üè∑Ô∏è –ö–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–≥–∏\n\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ü–æ–º–æ—â—å\n\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä",
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: [[{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "eva:help:menu" }]] }
                    }
                );
                break;
        }
    }

    // Handle text messages (INN, etc.)
    async handleTextMessage(message) {
        const chatId = message.chat.id;
        const text = message.text;
        const userState = this.userStates.get(chatId);

        // Check if it's an INN
        if (/^\d{10}(\d{2})?$/.test(text)) {
            const validation = validateINN(text);
            if (!validation.valid) {
                await this.bot.sendMessage(chatId, `‚ùå –ò–ù–ù –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${validation.error}\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä).`);
                return;
            }

            await this.bot.sendMessage(chatId, `‚úÖ –ò–ù–ù –ø—Ä–∏–Ω—è—Ç: \`${text}\`\n\nüîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞...`, { parse_mode: 'Markdown' });

            try {
                const result = await this.counterpartyService.lookupByInn(text);
                await this.bot.sendMessage(
                    chatId,
                    this.counterpartyService.formatReport(result),
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'eva:home' }]]
                        }
                    }
                );
            } catch (error) {
                console.error('INN lookup failed:', error);
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                    reply_markup: {
                        inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'eva:home' }]]
                    }
                });
            }

            return;
        }

        // Handle other states
        if (userState) {
            switch (userState.state) {
                case 'awaiting_inn':
                    const validation = validateINN(text);
                    if (!validation.valid) {
                        await this.bot.sendMessage(chatId, `‚ùå –ò–ù–ù –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${validation.error}\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä).`);
                        return;
                    }
                    // Process INN as above
                    break;
                default:
                    await this.bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", {
                        reply_markup: { inline_keyboard: [[{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "eva:home" }]] }
                    });
            }
        }
    }

    // Get user state
    getUserState(chatId) {
        return this.userStates.get(chatId);
    }

    // Set user state
    setUserState(chatId, state) {
        this.userStates.set(chatId, state);
    }

    // Clear user state
    clearUserState(chatId) {
        this.userStates.delete(chatId);
}

    formatIntegrationStatus(status) {
        const bitrix = status.bitrix || {};
        const dadata = status.dadata || {};
        const lines = [
            'üîó *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏*',
            '',
            `Bitrix24: ${bitrix.connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}`
        ];

        if (bitrix.details) {
            lines.push(`‚Ä¢ ${bitrix.details}`);
        }
        if (bitrix.lastSync) {
            lines.push(`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${new Date(bitrix.lastSync).toLocaleString('ru-RU')}`);
        }

        lines.push('', `DaData: ${dadata.connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}`);
        if (dadata.details) {
            lines.push(`‚Ä¢ ${dadata.details}`);
        }
        if (dadata.balance !== undefined && dadata.balance !== null) {
            lines.push(`‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${dadata.balance}`);
        }
        if (dadata.lastSuccess) {
            lines.push(`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${new Date(dadata.lastSuccess).toLocaleString('ru-RU')}`);
        }

        lines.push('', `_–ò—Å—Ç–æ—á–Ω–∏–∫: ${status.source === 'mcp' ? 'MCP —Å–µ—Ä–≤–µ—Ä' : '–õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'}_`);
        return lines.join('\n');
    }
}

module.exports = EverestRouter;

