// Smart Router for Eva Lawyer Bot
// Advanced routing system with intelligent command processing and callback handling

const ContextManager = require('./context-manager');
const AIEngine = require('./ai-engine');
const CounterpartyService = require('./counterparty-service');

class SmartRouter {
    constructor() {
        this.contextManager = new ContextManager();
        this.aiEngine = new AIEngine();
        this.routes = new Map();
        this.middlewares = [];
        this.commandHandlers = new Map();
        this.callbackHandlers = new Map();
        this.counterpartyService = new CounterpartyService({ logger: console });
        
        this.initializeRoutes();
        this.initializeMiddlewares();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    initializeRoutes() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        this.addCommand('/start', this.handleStart.bind(this));
        this.addCommand('/help', this.handleHelp.bind(this));
        this.addCommand('/settings', this.handleSettings.bind(this));
        this.addCommand('/stats', this.handleStats.bind(this));
        this.addCommand('/export', this.handleExport.bind(this));
        this.addCommand('/clear', this.handleClear.bind(this));

        // Callback –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–µ–Ω—é
        this.addCallback('eva:main', this.handleMainMenu.bind(this));
        this.addCallback('eva:contracts:menu', this.handleContractsMenu.bind(this));
        this.addCallback('eva:contracts:upload', this.handleContractUpload.bind(this));
        this.addCallback('eva:contracts:analyze', this.handleContractAnalyze.bind(this));
        this.addCallback('eva:contracts:risks', this.handleContractRisks.bind(this));
        this.addCallback('eva:contracts:redline', this.handleContractRedline.bind(this));
        
        this.addCallback('eva:pkg:menu', this.handleEverestMenu.bind(this));
        this.addCallback('eva:pkg:contract', this.handleEverestContract.bind(this));
        this.addCallback('eva:pkg:spec', this.handleEverestSpec.bind(this));
        this.addCallback('eva:pkg:protocol', this.handleEverestProtocol.bind(this));
        this.addCallback('eva:pkg:bundle', this.handleEverestBundle.bind(this));
        
        this.addCallback('eva:inn:prompt', this.handleInnPrompt.bind(this));
        this.addCallback('eva:inn:check', this.handleInnCheck.bind(this));
        
        this.addCallback('eva:docs:billing', this.handleBillingDocs.bind(this));
        this.addCallback('eva:docs:invoice', this.handleInvoice.bind(this));
        this.addCallback('eva:docs:act', this.handleAct.bind(this));
        
        this.addCallback('eva:reports:menu', this.handleReportsMenu.bind(this));
        this.addCallback('eva:reports:usage', this.handleUsageReport.bind(this));
        this.addCallback('eva:reports:contracts', this.handleContractsReport.bind(this));
        
        this.addCallback('eva:settings:menu', this.handleSettingsMenu.bind(this));
        this.addCallback('eva:settings:lang', this.handleLanguageSettings.bind(this));
        this.addCallback('eva:settings:format', this.handleFormatSettings.bind(this));
        this.addCallback('eva:settings:notifications', this.handleNotificationSettings.bind(this));
        
        this.addCallback('eva:help:menu', this.handleHelpMenu.bind(this));
        this.addCallback('eva:help:guide', this.handleGuide.bind(this));
        this.addCallback('eva:help:contact', this.handleContact.bind(this));
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ callback
        this.addCallback('eva:back', this.handleBack.bind(this));
        this.addCallback('eva:cancel', this.handleCancel.bind(this));
        this.addCallback('eva:home', this.handleHome.bind(this));
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
    initializeMiddlewares() {
        this.addMiddleware(this.logRequest.bind(this));
        this.addMiddleware(this.updateUserActivity.bind(this));
        this.addMiddleware(this.checkUserPermissions.bind(this));
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    addCommand(command, handler) {
        this.commandHandlers.set(command, handler);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    addCallback(pattern, handler) {
        this.callbackHandlers.set(pattern, handler);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware
    addMiddleware(middleware) {
        this.middlewares.push(middleware);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    async route(update) {
        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
            for (const middleware of this.middlewares) {
                const result = await middleware(update);
                if (result === false) {
                    return; // Middleware –ø—Ä–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º
            if (update.message) {
                return await this.handleMessage(update);
            } else if (update.callback_query) {
                return await this.handleCallback(update);
            } else if (update.document || update.photo) {
                return await this.handleDocument(update);
            }

        } catch (error) {
            console.error('Router error:', error);
            return await this.handleError(update, error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleMessage(update) {
        const message = update.message;
        const userId = message.from.id;
        const text = message.text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text && text.startsWith('/')) {
            const command = text.split(' ')[0];
            const handler = this.commandHandlers.get(command);
            
            if (handler) {
                return await handler(update);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù
        if (text && this.isValidINN(text)) {
            return await this.handleInnCheck(update, text);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const context = this.contextManager.getUserContext(userId);
        
        if (context.currentSession.currentFlow) {
            return await this.handleFlowMessage(update, context);
        }

        // –û–±—ã—á–Ω—ã–π AI –∑–∞–ø—Ä–æ—Å
        return await this.handleAIQuery(update);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    async handleCallback(update) {
        const callbackQuery = update.callback_query;
        const data = callbackQuery.data;
        const userId = callbackQuery.from.id;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–µ–Ω—é
        this.contextManager.addToMenuHistory(userId, data);

        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        for (const [pattern, handler] of this.callbackHandlers.entries()) {
            if (data.startsWith(pattern)) {
                return await handler(update);
            }
        }

        // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return await this.handleUnknownCallback(update);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async handleDocument(update) {
        const userId = update.message?.from?.id || update.from?.id;
        const context = this.contextManager.getUserContext(userId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const document = update.message?.document || update.message?.photo?.[0];
        this.contextManager.setTemporaryData(userId, 'current_document', document);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ—Ç–æ–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (context.currentSession.currentFlow === 'contract_upload') {
            return await this.processDocumentUpload(update, context);
        }

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return await this.suggestDocumentActions(update);
    }

    // Middleware: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    async logRequest(update) {
        const timestamp = new Date().toISOString();
        const userId = update.message?.from?.id || update.callback_query?.from?.id;
        const type = update.message ? 'message' : 'callback';
        
        console.log(`[${timestamp}] ${type} from user ${userId}`);
        return true;
    }

    // Middleware: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserActivity(update) {
        const userId = update.message?.from?.id || update.callback_query?.from?.id;
        if (userId) {
            this.contextManager.refreshSession(userId);
        }
        return true;
    }

    // Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async checkUserPermissions(update) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        return true;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    async handleStart(update) {
        const userId = update.message.from.id;
        const userName = update.message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.contextManager.initializeUserContext(userId);
        
        const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!

–Ø Eva - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É —Å:

‚öñÔ∏è **–ê–Ω–∞–ª–∏–∑–æ–º –¥–æ–≥–æ–≤–æ—Ä–æ–≤** –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–æ–≤
üîç **–ü—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤** –ø–æ –ò–ù–ù
üìÑ **–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π
üìä **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –æ—Ç—á–µ—Ç–æ–≤** –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ:`;

        return {
            method: 'sendMessage',
            chat_id: userId,
            text: welcomeMessage,
            reply_markup: this.getMainMenuKeyboard(),
            parse_mode: 'Markdown'
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    async handleMainMenu(update) {
        const userId = update.callback_query.from.id;
        
        return {
            method: 'editMessageText',
            chat_id: userId,
            message_id: update.callback_query.message.message_id,
            text: `üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Eva Lawyer Bot**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:`,
            reply_markup: this.getMainMenuKeyboard(),
            parse_mode: 'Markdown'
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    async handleContractsMenu(update) {
        const userId = update.callback_query.from.id;
        
        return {
            method: 'editMessageText',
            chat_id: userId,
            message_id: update.callback_query.message.message_id,
            text: `üìÑ **–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏**

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
            reply_markup: this.getContractsMenuKeyboard(),
            parse_mode: 'Markdown'
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
    async handleContractUpload(update) {
        const userId = update.callback_query.from.id;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
        this.contextManager.startFlow(userId, 'contract_upload');
        
        return {
            method: 'editMessageText',
            chat_id: userId,
            message_id: update.callback_query.message.message_id,
            text: `üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ PDF
‚Ä¢ DOCX
‚Ä¢ DOC
‚Ä¢ TXT

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.`,
            reply_markup: this.getBackKeyboard(),
            parse_mode: 'Markdown'
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù
    async handleInnPrompt(update) {
        const userId = update.callback_query.from.id;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù
        this.contextManager.startFlow(userId, 'inn_check');
        
        return {
            method: 'editMessageText',
            chat_id: userId,
            message_id: update.callback_query.message.message_id,
            text: `üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

–§–æ—Ä–º–∞—Ç –ò–ù–ù:
‚Ä¢ 10 —Ü–∏—Ñ—Ä –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
‚Ä¢ 12 —Ü–∏—Ñ—Ä –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π

–ü—Ä–∏–º–µ—Ä: 7707083893`,
            reply_markup: this.getBackKeyboard(),
            parse_mode: 'Markdown'
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù —Å –¥–∞–Ω–Ω—ã–º–∏
    async handleInnCheck(update, inn = null) {
        const userId = update.message?.from?.id || update.callback_query?.from?.id;
        const innToCheck = inn || update.message?.text;
        
        if (!this.isValidINN(innToCheck)) {
            return {
                method: 'sendMessage',
                chat_id: userId,
                text: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä).'
            };
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await this.sendTypingAction(userId);

        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DaData API
            const innData = await this.checkInnWithDaData(innToCheck);

            // AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            const aiAnalysis = await this.aiEngine.analyzeCounterparty(userId, innData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.contextManager.addToHistory(userId, 'inn_check', {
                inn: innToCheck,
                data: innData,
                analysis: aiAnalysis.content
            });
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
            this.contextManager.completeFlow(userId, { inn: innToCheck, result: innData });
            
            return {
                method: 'sendMessage',
                chat_id: userId,
                text: this.formatInnCheckResult(innData, aiAnalysis.content),
                reply_markup: this.getMainMenuKeyboard(),
                parse_mode: 'Markdown'
            };
            
        } catch (error) {
            console.error('INN check error:', error);
            return {
                method: 'sendMessage',
                chat_id: userId,
                text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                reply_markup: this.getMainMenuKeyboard()
            };
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI –∑–∞–ø—Ä–æ—Å–æ–≤
    async handleAIQuery(update) {
        const userId = update.message.from.id;
        const query = update.message.text;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await this.sendTypingAction(userId);
        
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI Engine
            const response = await this.aiEngine.processQuery(userId, query);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.contextManager.addToHistory(userId, 'query', {
                query,
                response: response.content
            });
            
            return {
                method: 'sendMessage',
                chat_id: userId,
                text: response.content,
                reply_markup: this.getMainMenuKeyboard(),
                parse_mode: 'Markdown'
            };
            
        } catch (error) {
            console.error('AI query error:', error);
            return {
                method: 'sendMessage',
                chat_id: userId,
                text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                reply_markup: this.getMainMenuKeyboard()
            };
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    async handleBack(update) {
        const userId = update.callback_query.from.id;
        const previousAction = this.contextManager.getPreviousMenuAction(userId);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π update –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        const backUpdate = {
            callback_query: {
                ...update.callback_query,
                data: previousAction
            }
        };
        
        return await this.handleCallback(backUpdate);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    async handleCancel(update) {
        const userId = update.callback_query.from.id;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
        this.contextManager.completeFlow(userId);
        
        return await this.handleMainMenu(update);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    getMainMenuKeyboard() {
        return {
            inline_keyboard: [
                [
                    { text: "üìÑ –î–æ–≥–æ–≤–æ—Ä—ã", callback_data: "eva:contracts:menu" },
                    { text: "üìö –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª", callback_data: "eva:pkg:menu" }
                ],
                [
                    { text: "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", callback_data: "eva:inn:prompt" }
                ],
                [
                    { text: "üí≥ –°—á—ë—Ç/–∞–∫—Ç—ã", callback_data: "eva:docs:billing" },
                    { text: "üìà –û—Ç—á—ë—Ç—ã", callback_data: "eva:reports:menu" }
                ],
                [
                    { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "eva:settings:menu" },
                    { text: "üÜò –ü–æ–º–æ—â—å", callback_data: "eva:help:menu" }
                ]
            ]
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    getContractsMenuKeyboard() {
        return {
            inline_keyboard: [
                [
                    { text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data: "eva:contracts:upload" }
                ],
                [
                    { text: "üîç –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", callback_data: "eva:contracts:risks" },
                    { text: "‚úèÔ∏è –†–µ–¥–ª–∞–π–Ω", callback_data: "eva:contracts:redline" }
                ],
                [
                    { text: "üîô –ù–∞–∑–∞–¥", callback_data: "eva:back" },
                    { text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "eva:main" }
                ]
            ]
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ù–∞–∑–∞–¥"
    getBackKeyboard() {
        return {
            inline_keyboard: [
                [
                    { text: "üîô –ù–∞–∑–∞–¥", callback_data: "eva:back" },
                    { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "eva:cancel" }
                ]
            ]
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
    isValidINN(inn) {
        if (!inn || typeof inn !== 'string') return false;
        
        const cleanInn = inn.replace(/\D/g, '');
        return cleanInn.length === 10 || cleanInn.length === 12;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
    async sendTypingAction(chatId) {
        try {
            await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendChatAction`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: chatId,
                    action: 'typing'
                })
            });
        } catch (error) {
            console.error('Error sending typing action:', error);
        }
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∑–∞—Ö)
    async handleEverestMenu(update) { /* TODO */ }
    async handleBillingDocs(update) { /* TODO */ }
    async handleReportsMenu(update) { /* TODO */ }
    async handleSettingsMenu(update) { /* TODO */ }
    async handleHelpMenu(update) { /* TODO */ }
    async handleHelp(update) { /* TODO */ }
    async handleSettings(update) { /* TODO */ }
    async handleStats(update) { /* TODO */ }
    async handleExport(update) { /* TODO */ }
    async handleClear(update) { /* TODO */ }
    async handleError(update, error) { /* TODO */ }
    async handleUnknownCallback(update) { /* TODO */ }
    async checkInnWithDaData(inn) {
        return this.counterpartyService.lookupByInn(inn);
    }

    async formatInnCheckResult(data, analysis) {
        return this.counterpartyService.formatReport(data, analysis);
    }
}

module.exports = SmartRouter;

