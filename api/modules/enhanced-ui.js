/**
 * Enhanced UI module for Eva Lawyer Bot
 * Provides contextual quick actions and memory-enhanced interfaces
 */

const { link } = require('./action-bus');

/**
 * Add contextual quick actions to UI based on user session
 * @param {Object} ui - Base UI object
 * @param {Object} userSession - User session data
 * @param {number} userId - User ID
 * @returns {Promise<Object>} - Enhanced UI
 */
async function addQuickActions(ui, userSession, userId) {
  const quickActions = [];
  
  // Add document-related actions if document is available
  if (userSession.lastDocument) {
    quickActions.push(
      link('üß© –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', 'contracts.protocol_of_disagreements', { 
        file_id: userSession.lastDocumentId || 'current' 
      }),
      link('üõ† –ü–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∞–≤–æ–∫', 'contracts.suggest_edits', { 
        file_id: userSession.lastDocumentId || 'current' 
      }),
      link('üß™ –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', 'utils.risks_table', { 
        document: userSession.lastDocument 
      })
    );
  }
  
  // Add counterparty actions if INN is available
  if (userSession.lastInn) {
    quickActions.push(
      link('üìä –ü–æ–ª–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥', 'kyc.full_scoring', { 
        inn: userSession.lastInn 
      })
    );
  }
  
  // Add universal actions
  quickActions.push(
    link('üìë –Æ—Ä–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', 'utils.legal_opinion', { 
      topic: '—Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å' 
    })
  );
  
  // If there are quick actions, add them to the UI
  if (quickActions.length > 0) {
    const quickActionRows = [];
    for (let i = 0; i < quickActions.length; i += 2) {
      quickActionRows.push(quickActions.slice(i, i + 2));
    }
    
    // Add separator and quick actions
    const enhancedKeyboard = [
      ...ui.reply_markup.inline_keyboard,
      [{ text: '‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', callback_data: 'noop' }],
      ...quickActionRows
    ];
    
    return {
      ...ui,
      reply_markup: {
        inline_keyboard: enhancedKeyboard
      }
    };
  }
  
  return ui;
}

/**
 * Handle action result with enhanced processing
 * @param {Object} actionResult - Action result
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {number} userId - User ID
 * @returns {Promise<void>}
 */
async function handleActionResult(actionResult, chatId, messageId, userId) {
  const { sendMessage, sendTypingAction, vectorMemory, reactAgent, userSessions } = require('../telegram');
  
  switch (actionResult.type) {
    case 'force_reply':
      await sendMessage(chatId, actionResult.text, { reply_markup: actionResult.reply_markup });
      break;
      
    case 'message':
      await sendMessage(chatId, actionResult.text);
      break;
      
    case 'menu':
      const { render } = require('./menus');
      const ui = render(actionResult.section);
      const userSession = userSessions[userId] || {};
      const enhancedUi = await addQuickActions(ui, userSession, userId);
      await sendMessage(chatId, enhancedUi.text, { reply_markup: enhancedUi.reply_markup });
      break;
      
    case 'prompt':
      await sendTypingAction(chatId);
      
      // Get memory context for enhanced responses
      const memoryContext = await vectorMemory.enrichWithMemory(
        userId, 
        actionResult.prompt || 'legal analysis', 
        6
      );
      
      // Use ReAct agent for complex tasks
      if (actionResult.useReAct) {
        const reactResult = await reactAgent.execute(
          actionResult.prompt,
          memoryContext,
          {},
          { userSession: userSessions[userId] }
        );
        
        if (reactResult.success) {
          await sendMessage(chatId, reactResult.answer);
          
          // Record interaction in memory
          await vectorMemory.recordInteraction(
            userId,
            actionResult.prompt,
            reactResult.answer,
            { type: 'react_analysis', steps: reactResult.steps.length }
          );
        } else {
          await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.');
        }
      } else {
        // Use regular assistant with memory context
        const promptResponse = await processPromptActionWithMemory(
          actionResult, 
          userId, 
          chatId, 
          memoryContext
        );
        await sendMessage(chatId, promptResponse);
      }
      break;
      
    case 'clear_context':
      // Clear user session and memory
      if (userSessions[userId]) {
        delete userSessions[userId];
      }
      await sendMessage(chatId, actionResult.text);
      break;
      
    default:
      await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è.');
  }
}

/**
 * Process prompt action with memory context
 * @param {Object} actionResult - Action result
 * @param {number} userId - User ID
 * @param {number} chatId - Chat ID
 * @param {Array} memoryContext - Memory context
 * @returns {Promise<string>} - Response
 */
async function processPromptActionWithMemory(actionResult, userId, chatId, memoryContext) {
  const { assistant, userSessions, vectorMemory } = require('../telegram');
  
  try {
    // Get user session
    const userSession = userSessions[userId] || {};
    const threadId = userSession.threadId;
    
    // Build enhanced prompt with memory context
    let promptText = buildPromptFromAction(actionResult);
    
    // Add memory context if available
    if (memoryContext.length > 0) {
      const contextText = memoryContext
        .map(m => `‚Ä¢ ${m.content.slice(0, 200)}...`)
        .join('\n');
      
      promptText = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:\n${contextText}\n\n${promptText}`;
    }
    
    // Process with assistant
    const response = await assistant.askAssistant(promptText, threadId, userId.toString());
    
    // Save thread ID and record interaction
    if (response.success && response.threadId) {
      userSessions[userId] = {
        ...userSession,
        threadId: response.threadId,
        lastActivity: Date.now()
      };
      
      // Record in memory
      await vectorMemory.recordInteraction(
        userId,
        promptText,
        response.message,
        { 
          type: 'prompt_action',
          prompt_type: actionResult.prompt,
          has_memory_context: memoryContext.length > 0
        }
      );
    }
    
    return response.success ? response.message : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
  } catch (error) {
    console.error('Process prompt action with memory error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
  }
}

/**
 * Build prompt text from action result
 * @param {Object} actionResult - Action result
 * @returns {string} - Prompt text
 */
function buildPromptFromAction(actionResult) {
  switch (actionResult.prompt) {
    case 'PROMPT_CONTRACT_REVIEW':
      return '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.';
    case 'PROMPT_CONTRACT_RISKS':
      return '–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É–Ω–∫—Ç–æ–≤, —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.';
    case 'PROMPT_LEGAL_OPINION':
      return `–ü–æ–¥–≥–æ—Ç–æ–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ: ${actionResult.topic || '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å'}`;
    case 'PROMPT_PROTOCOL_DRAFT':
      return `–°–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π —Å –ø–æ–∑–∏—Ü–∏–∏ ${actionResult.side || '–∫–ª–∏–µ–Ω—Ç–∞'} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞.`;
    case 'PROMPT_CONTRACT_EDITS':
      return '–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.';
    case 'PROMPT_COUNTERPARTY_SCORING':
      return `–ü—Ä–æ–≤–µ–¥–∏ ${actionResult.mode || '–ø–æ–ª–Ω—ã–π'} —Å–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ò–ù–ù ${actionResult.inn}`;
    default:
      return '–û–±—Ä–∞–±–æ—Ç–∞–π –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.';
  }
}

// Export functions
module.exports = {
  addQuickActions,
  handleActionResult,
  processPromptActionWithMemory
};

