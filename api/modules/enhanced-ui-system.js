// Enhanced UI System for Eva Lawyer Bot
// Modern, intuitive and user-friendly interface

const PersonalizationEngine = require('./personalization-engine');

class EnhancedUISystem {
    constructor() {
        this.userStates = new Map();
        this.menuHistory = new Map();
        this.quickActions = new Map();
        this.personalization = new PersonalizationEngine();
        
        // UI Configuration
        this.config = {
            maxButtonsPerRow: 2,
            maxRows: 4,
            enableEmojis: true,
            enableBreadcrumbs: true,
            enableQuickActions: true
        };
    }

    // Main menu with personalization
    getMainMenu(userId) {
        // Initialize user profile if not exists
        if (!this.personalization.getUserProfile(userId)) {
            this.personalization.initializeUserProfile(userId, this.getUserState(userId));
        }

        // Get personalized welcome message
        const welcomeText = this.personalization.getPersonalizedWelcome(userId);
        
        // Get personalized menu layout
        const menuLayout = this.personalization.getPersonalizedMenuLayout(userId);
        
        // Build keyboard from layout
        const keyboard = [];
        
        menuLayout.forEach(section => {
            if (section.type === 'quick_actions' && section.buttons.length > 0) {
                // Add quick actions section
                keyboard.push([{ text: `‚ö° ${section.title}`, callback_data: 'quick_actions_header' }]);
                
                // Add quick action buttons in pairs
                for (let i = 0; i < section.buttons.length; i += 2) {
                    const row = section.buttons.slice(i, i + 2);
                    keyboard.push(row);
                }
                
                // Add separator
                keyboard.push([{ text: '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ', callback_data: 'separator' }]);
            }
            
            if (section.type === 'main_menu') {
                // Add main menu buttons in pairs
                for (let i = 0; i < section.buttons.length; i += 2) {
                    const row = section.buttons.slice(i, i + 2);
                    keyboard.push(row);
                }
            }
        });

        // Add bottom navigation
        keyboard.push([
            { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'help_menu' },
            { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
        ]);

        return {
            text: welcomeText,
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    // Consultation menu with specialized options
    getConsultationMenu(userId) {
        return {
            text: `üí¨ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞ –∏–ª–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_corporate' },
                        { text: 'üë• –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_labor' }
                    ],
                    [
                        { text: 'üè† –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_civil' },
                        { text: 'üí∞ –ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_tax' }
                    ],
                    [
                        { text: '‚öñÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ', callback_data: 'consult_admin' },
                        { text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_family' }
                    ],
                    [
                        { text: '‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: 'consult_general' },
                        { text: 'üö® –°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data: 'consult_urgent' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Documents menu with processing options
    getDocumentsMenu(userId) {
        return {
            text: `üìÑ <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'doc_analyze_contract' },
                        { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'doc_risk_check' }
                    ],
                    [
                        { text: 'üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', callback_data: 'doc_create' },
                        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'doc_edit' }
                    ],
                    [
                        { text: 'üìä –°—Ä–∞–≤–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: 'doc_compare' },
                        { text: 'üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è', callback_data: 'doc_compliance' }
                    ],
                    [
                        { text: 'üìÅ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: 'doc_my_files' },
                        { text: 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', callback_data: 'doc_upload' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Checks menu for various validations
    getChecksMenu(userId) {
        return {
            text: `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üè¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ù–ù', callback_data: 'check_inn_form' },
                        { text: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û–ì–†–ù', callback_data: 'check_ogrn' }
                    ],
                    [
                        { text: '‚öñÔ∏è –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞', callback_data: 'check_court_cases' },
                        { text: 'üí∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', callback_data: 'check_enforcement' }
                    ],
                    [
                        { text: 'üèõÔ∏è –†–µ–µ—Å—Ç—Ä –±–∞–Ω–∫—Ä–æ—Ç–æ–≤', callback_data: 'check_bankruptcy' },
                        { text: 'üìä –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', callback_data: 'check_financial' }
                    ],
                    [
                        { text: 'üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', callback_data: 'check_comprehensive' },
                        { text: 'üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π', callback_data: 'check_monitoring' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Legal base menu for research
    getLegalBaseMenu(userId) {
        return {
            text: `‚öñÔ∏è <b>–ü—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</b>

–ü–æ–∏—Å–∫ –≤ –ø—Ä–∞–≤–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìö –ö–æ–¥–µ–∫—Å—ã –†–§', callback_data: 'legal_codes' },
                        { text: 'üìú –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã', callback_data: 'legal_federal_laws' }
                    ],
                    [
                        { text: '‚öñÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', callback_data: 'legal_court_practice' },
                        { text: 'üìã –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –í–°', callback_data: 'legal_supreme_court' }
                    ],
                    [
                        { text: 'üèõÔ∏è –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', callback_data: 'legal_arbitration' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É–¥–æ–≤', callback_data: 'legal_statistics' }
                    ],
                    [
                        { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É', callback_data: 'legal_text_search' },
                        { text: 'üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–∞—Ö', callback_data: 'legal_changes' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Settings menu for personalization
    getSettingsMenu(userId) {
        const userState = this.userStates.get(userId) || {};
        
        return {
            text: `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' },
                        { text: 'üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', callback_data: 'settings_language' }
                    ],
                    [
                        { text: 'üìä –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', callback_data: 'settings_specialization' },
                        { text: '‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', callback_data: 'settings_timezone' }
                    ],
                    [
                        { text: 'üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è', callback_data: 'settings_theme' },
                        { text: 'üì± –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', callback_data: 'settings_quick_actions' }
                    ],
                    [
                        { text: 'üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'settings_export' },
                        { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: 'settings_clear_history' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Help menu with detailed sections
    getHelpMenu(userId) {
        return {
            text: `üÜò <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç', callback_data: 'help_quick_start' },
                        { text: 'üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'help_user_guide' }
                    ],
                    [
                        { text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'help_faq' },
                        { text: 'üé• –í–∏–¥–µ–æ—É—Ä–æ–∫–∏', callback_data: 'help_video_tutorials' }
                    ],
                    [
                        { text: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data: 'help_feedback' },
                        { text: 'üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', callback_data: 'help_bug_report' }
                    ],
                    [
                        { text: 'üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'help_support' },
                        { text: 'üìã –û –±–æ—Ç–µ', callback_data: 'help_about' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Quick actions panel
    getQuickActionsPanel(userId) {
        const userActions = this.quickActions.get(userId) || this.getDefaultQuickActions();
        
        return {
            text: `‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>

–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:`,
            reply_markup: {
                inline_keyboard: [
                    userActions.slice(0, 2).map(action => ({
                        text: action.text,
                        callback_data: action.callback_data
                    })),
                    userActions.slice(2, 4).map(action => ({
                        text: action.text,
                        callback_data: action.callback_data
                    })),
                    [
                        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è', callback_data: 'configure_quick_actions' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
    }

    // Form for INN check with validation
    getInnCheckForm(userId) {
        return {
            text: `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏</b>

–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

üìã <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ –°—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
‚Ä¢ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ —É—á—Ä–µ–¥–∏—Ç–µ–ª–∏
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

üí° <i>–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä</i>`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìù –í–≤–µ—Å—Ç–∏ –ò–ù–ù', callback_data: 'inn_input_mode' },
                        { text: 'üìã –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏', callback_data: 'inn_example' }
                    ],
                    [
                        { text: 'üìä –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', callback_data: 'inn_bulk_check' },
                        { text: '‚è∞ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫', callback_data: 'inn_history' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'checks_menu' }
                    ]
                ]
            }
        };
    }

    // Document creation wizard
    getDocumentCreationWizard(userId) {
        return {
            text: `üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –î–æ–≥–æ–≤–æ—Ä', callback_data: 'create_contract' },
                        { text: 'üìÑ –ó–∞—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_application' }
                    ],
                    [
                        { text: 'üìù –ü—Ä–µ—Ç–µ–Ω–∑–∏—è', callback_data: 'create_claim' },
                        { text: 'üìú –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', callback_data: 'create_power_of_attorney' }
                    ],
                    [
                        { text: 'üìã –ñ–∞–ª–æ–±–∞', callback_data: 'create_complaint' },
                        { text: 'üìÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', callback_data: 'create_notification' }
                    ],
                    [
                        { text: 'üìä –û—Ç—á–µ—Ç', callback_data: 'create_report' },
                        { text: 'üìã –°–ø—Ä–∞–≤–∫–∞', callback_data: 'create_certificate' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'documents_menu' }
                    ]
                ]
            }
        };
    }

    // Breadcrumb navigation
    getBreadcrumb(userId, currentMenu) {
        const history = this.menuHistory.get(userId) || [];
        if (history.length === 0) return '';
        
        const breadcrumbItems = history.map(item => item.title).join(' ‚Üí ');
        return `üìç <i>${breadcrumbItems} ‚Üí ${currentMenu}</i>\n\n`;
    }

    // Add menu to history
    addToHistory(userId, menuData) {
        const history = this.menuHistory.get(userId) || [];
        history.push(menuData);
        
        // Keep only last 5 items
        if (history.length > 5) {
            history.shift();
        }
        
        this.menuHistory.set(userId, history);
    }

    // Get back button with smart navigation
    getBackButton(userId) {
        const history = this.menuHistory.get(userId) || [];
        if (history.length === 0) {
            return { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' };
        }
        
        const previousMenu = history[history.length - 1];
        return { text: 'üîô –ù–∞–∑–∞–¥', callback_data: previousMenu.callback_data };
    }

    // Default quick actions
    getDefaultQuickActions() {
        return [
            { text: 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'consult_general' },
            { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ù–ù', callback_data: 'check_inn_form' },
            { text: 'üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'doc_analyze_contract' },
            { text: '‚öñÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', callback_data: 'legal_court_practice' }
        ];
    }

    // Welcome text with personalization
    getWelcomeText(userId = null) {
        const userState = this.userStates.get(userId) || {};
        const userName = userState.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const timeOfDay = this.getTimeOfDay();
        
        return `${timeOfDay}, ${userName}! üëã

ü§ñ <b>Eva Lawyer Bot</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –æ—Ç—Ä–∞—Å–ª—è–º –ø—Ä–∞–≤–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
‚Ä¢ –ü–æ–∏—Å–∫ –≤ –ø—Ä–∞–≤–æ–≤—ã—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ

üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</i>`;
    }

    // Get time of day greeting
    getTimeOfDay() {
        const hour = new Date().getHours();
        if (hour < 6) return 'üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏';
        if (hour < 12) return 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
        if (hour < 18) return '‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å';
        return 'üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    }

    // Update user state with personalization tracking
    updateUserState(userId, stateUpdate) {
        const currentState = this.userStates.get(userId) || {};
        const newState = { ...currentState, ...stateUpdate };
        this.userStates.set(userId, newState);
        
        // Update personalization profile
        if (this.personalization.getUserProfile(userId)) {
            this.personalization.updateUserPreferences(userId, stateUpdate);
        }
    }

    // Track user activity for personalization
    trackUserActivity(userId, activity) {
        if (this.personalization.getUserProfile(userId)) {
            this.personalization.updateUserActivity(userId, activity);
        }
    }

    // Get personalized recommendations
    getPersonalizedRecommendations(userId) {
        return this.personalization.generateRecommendations(userId);
    }

    // Get user statistics
    getUserStatistics(userId) {
        return this.personalization.getUserStatistics(userId);
    }

    // Export user personalization data
    exportUserPersonalizationData(userId) {
        return this.personalization.exportUserData(userId);
    }

    // Import user personalization data
    importUserPersonalizationData(userId, data) {
        this.personalization.importUserData(userId, data);
    }

    // Get user state
    getUserState(userId) {
        return this.userStates.get(userId) || {};
    }

    // Configure quick actions for user
    configureQuickActions(userId, actions) {
        this.quickActions.set(userId, actions);
    }

    // Get menu by callback data
    getMenuByCallback(userId, callbackData) {
        const menus = {
            'start': () => this.getMainMenu(userId),
            'consultation_menu': () => this.getConsultationMenu(userId),
            'documents_menu': () => this.getDocumentsMenu(userId),
            'checks_menu': () => this.getChecksMenu(userId),
            'legal_base_menu': () => this.getLegalBaseMenu(userId),
            'settings_menu': () => this.getSettingsMenu(userId),
            'help_menu': () => this.getHelpMenu(userId),
            'quick_actions': () => this.getQuickActionsPanel(userId),
            'check_inn_form': () => this.getInnCheckForm(userId),
            'doc_create': () => this.getDocumentCreationWizard(userId)
        };

        const menuFunction = menus[callbackData];
        if (menuFunction) {
            const menuData = menuFunction();
            
            // Add breadcrumb if enabled
            if (this.config.enableBreadcrumbs && callbackData !== 'start') {
                menuData.text = this.getBreadcrumb(userId, this.getMenuTitle(callbackData)) + menuData.text;
            }
            
            return menuData;
        }

        return null;
    }

    // Get menu title by callback data
    getMenuTitle(callbackData) {
        const titles = {
            'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            'consultation_menu': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
            'documents_menu': '–î–æ–∫—É–º–µ–Ω—Ç—ã',
            'checks_menu': '–ü—Ä–æ–≤–µ—Ä–∫–∏',
            'legal_base_menu': '–ü—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞',
            'settings_menu': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'help_menu': '–ü–æ–º–æ—â—å'
        };

        return titles[callbackData] || '–ú–µ–Ω—é';
    }

    // Generate inline keyboard with smart layout
    generateInlineKeyboard(buttons, maxPerRow = 2) {
        const keyboard = [];
        
        for (let i = 0; i < buttons.length; i += maxPerRow) {
            const row = buttons.slice(i, i + maxPerRow);
            keyboard.push(row);
        }
        
        return keyboard;
    }

    // Add loading state
    getLoadingMessage(action = '–û–±—Ä–∞–±–æ—Ç–∫–∞') {
        return {
            text: `‚è≥ ${action}...`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_operation' }]
                ]
            }
        };
    }

    // Success message template
    getSuccessMessage(message, nextActions = []) {
        const keyboard = nextActions.length > 0 ? 
            [nextActions, [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]] :
            [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]];

        return {
            text: `‚úÖ ${message}`,
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    // Error message template
    getErrorMessage(message, retryAction = null) {
        const keyboard = retryAction ? 
            [[{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: retryAction }], 
             [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]] :
            [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]];

        return {
            text: `‚ùå ${message}`,
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }
}

module.exports = EnhancedUISystem;

