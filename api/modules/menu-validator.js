// –í–∞–ª–∏–¥–∞—Ç–æ—Ä –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Eva Lawyer Bot
// –†–µ–∞–ª–∏–∑—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Manus –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram-–±–æ—Ç–æ–≤

class MenuValidator {
    constructor() {
        this.MAX_CALLBACK_LENGTH = 64;
        this.MAX_MESSAGE_LENGTH = 4096;
        this.MAX_BUTTONS_PER_ROW = 3;
        this.MAX_ROWS = 3;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é
    validateMenuStructure(menus) {
        const results = {
            summary: [],
            findings: [],
            fixes: [],
            testMatrix: [],
            memoryPlan: []
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –º–µ–Ω—é
        for (const [menuKey, menuData] of Object.entries(menus)) {
            this.validateSingleMenu(menuKey, menuData, results);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–µ–Ω—é
        this.validateMenuConnectivity(menus, results);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
        this.validateCallbacks(menus, results);

        return results;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –º–µ–Ω—é
    validateSingleMenu(menuKey, menuData, results) {
        const { text, keyboard } = menuData;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if (text && text.length > this.MAX_MESSAGE_LENGTH) {
            results.findings.push({
                type: 'FAIL',
                menu: menuKey,
                issue: `–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${this.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤: ${text.length}`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if (keyboard && keyboard.inline_keyboard) {
            this.validateKeyboard(menuKey, keyboard.inline_keyboard, results);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
        const hasHomeButton = this.hasHomeButton(keyboard);
        if (!hasHomeButton && menuKey !== 'home') {
            results.findings.push({
                type: 'WARN',
                menu: menuKey,
                issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ "–î–æ–º–æ–π"'
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    validateKeyboard(menuKey, inlineKeyboard, results) {
        if (inlineKeyboard.length > this.MAX_ROWS) {
            results.findings.push({
                type: 'WARN',
                menu: menuKey,
                issue: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫: ${inlineKeyboard.length} > ${this.MAX_ROWS}`
            });
        }

        inlineKeyboard.forEach((row, rowIndex) => {
            if (row.length > this.MAX_BUTTONS_PER_ROW) {
                results.findings.push({
                    type: 'WARN',
                    menu: menuKey,
                    issue: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É ${rowIndex}: ${row.length} > ${this.MAX_BUTTONS_PER_ROW}`
                });
            }

            row.forEach((button, buttonIndex) => {
                this.validateButton(menuKey, button, rowIndex, buttonIndex, results);
            });
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏
    validateButton(menuKey, button, rowIndex, buttonIndex, results) {
        const { text, callback_data } = button;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã callback_data
        if (callback_data && callback_data.length > this.MAX_CALLBACK_LENGTH) {
            results.findings.push({
                type: 'FAIL',
                menu: menuKey,
                issue: `callback_data –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${this.MAX_CALLBACK_LENGTH} –±–∞–π—Ç: "${callback_data}" (${callback_data.length})`
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data
        if (callback_data) {
            const isValidFormat = this.isValidCallbackFormat(callback_data);
            if (!isValidFormat) {
                results.findings.push({
                    type: 'WARN',
                    menu: menuKey,
                    issue: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: "${callback_data}"`
                });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if (!text || text.trim().length === 0) {
            results.findings.push({
                type: 'FAIL',
                menu: menuKey,
                issue: `–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É ${rowIndex}, –ø–æ–∑–∏—Ü–∏—è ${buttonIndex}`
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data
    isValidCallbackFormat(callbackData) {
        // –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        // MENU:section
        // ACT:SECTION:ACTION
        // a:ticket_id
        const patterns = [
            /^MENU:[a-z_]+$/,
            /^ACT:[A-Z_]+:[A-Z_]+$/,
            /^a:[a-zA-Z0-9]+$/
        ];

        return patterns.some(pattern => pattern.test(callbackData));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
    hasHomeButton(keyboard) {
        if (!keyboard || !keyboard.inline_keyboard) return false;

        return keyboard.inline_keyboard.some(row =>
            row.some(button =>
                button.callback_data === 'MENU:home' ||
                button.text.includes('üè†') ||
                button.text.includes('–î–æ–º–æ–π')
            )
        );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–µ–Ω—é
    validateMenuConnectivity(menus, results) {
        const allCallbacks = new Set();
        const referencedCallbacks = new Set();

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ callback_data
        for (const [menuKey, menuData] of Object.entries(menus)) {
            if (menuData.keyboard && menuData.keyboard.inline_keyboard) {
                menuData.keyboard.inline_keyboard.forEach(row => {
                    row.forEach(button => {
                        if (button.callback_data) {
                            allCallbacks.add(button.callback_data);
                            
                            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è–µ–º –≤ referenced
                            if (button.callback_data.startsWith('MENU:')) {
                                const targetMenu = button.callback_data.replace('MENU:', '');
                                referencedCallbacks.add(targetMenu);
                            }
                        }
                    });
                });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω—é —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        referencedCallbacks.forEach(menuRef => {
            if (!menus[menuRef]) {
                results.findings.push({
                    type: 'FAIL',
                    issue: `–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é: MENU:${menuRef}`
                });
            }
        });

        results.summary.push(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${Object.keys(menus).length} –º–µ–Ω—é, ${allCallbacks.size} –∫–Ω–æ–ø–æ–∫`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
    validateCallbackHandlers(callbacks, handlers, results) {
        const missingHandlers = [];
        const extraHandlers = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        callbacks.forEach(callback => {
            if (!handlers.includes(callback) && !callback.startsWith('a:')) {
                missingHandlers.push(callback);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers.forEach(handler => {
            if (!callbacks.includes(handler) && handler !== 'a:*') {
                extraHandlers.push(handler);
            }
        });

        if (missingHandlers.length > 0) {
            results.findings.push({
                type: 'FAIL',
                issue: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: ${missingHandlers.join(', ')}`
            });
        }

        if (extraHandlers.length > 0) {
            results.findings.push({
                type: 'WARN',
                issue: `–õ–∏—à–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: ${extraHandlers.join(', ')}`
            });
        }

        const coverage = ((callbacks.length - missingHandlers.length) / callbacks.length * 100).toFixed(1);
        results.summary.push(`–ü–æ–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: ${coverage}%`);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç-–º–∞—Ç—Ä–∏—Ü—ã
    generateTestMatrix(menus) {
        const testCases = [];

        // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω—é
        for (const [menuKey, menuData] of Object.entries(menus)) {
            testCases.push({
                flow: `Navigate to ${menuKey}`,
                input: `MENU:${menuKey}`,
                steps: ['Click button', 'Wait for response'],
                expect: `Menu ${menuKey} displayed with buttons`
            });

            // –¢–µ—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            if (menuData.keyboard && menuData.keyboard.inline_keyboard) {
                menuData.keyboard.inline_keyboard.forEach(row => {
                    row.forEach(button => {
                        if (button.callback_data && button.callback_data.startsWith('ACT:')) {
                            testCases.push({
                                flow: `Action ${button.callback_data}`,
                                input: button.callback_data,
                                steps: ['Click action', 'Process request'],
                                expect: 'Action completed with result'
                            });
                        }
                    });
                });
            }
        }

        return testCases;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏
    generateMemoryPlan() {
        return {
            collections: {
                episodic: {
                    description: '–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    keys: ['user_id', 'action', 'timestamp', 'result'],
                    embedding_field: 'action_description',
                    ttl: '30 days'
                },
                semantic: {
                    description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã',
                    keys: ['content', 'route', 'category', 'metadata'],
                    embedding_field: 'content',
                    ttl: 'permanent'
                },
                profile: {
                    description: '–ü—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    keys: ['user_id', 'preferences', 'settings'],
                    embedding_field: 'preferences_text',
                    ttl: '1 year'
                }
            },
            search_params: {
                k: 6,
                similarity_threshold: 0.7,
                embedding_model: 'text-embedding-3-small'
            }
        };
    }
}

module.exports = { MenuValidator };

