// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é Eva Lawyer Bot v2.0
// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Manus –¥–ª—è Telegram-–±–æ—Ç–æ–≤

const { MenuValidator } = require('./menu-validator');

class EnhancedMenus {
    constructor() {
        this.validator = new MenuValidator();
        this.activeSection = new Map(); // user_id -> current_section
        this.userHistory = new Map(); // user_id -> action_history[]
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    getMainMenu(userId) {
        this.setActiveSection(userId, 'home');
        
        return {
            text: `ü§ñ **–ï–≤–∞ –Æ—Ä–∏—Å—Ç v2.0** ‚Äî –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫

üß† **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å ‚Äî –ø–æ–º–Ω—é –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
‚Ä¢ ReAct –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Äî —Ä–µ—à–∞—é —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä', callback_data: 'MENU:contract' },
                        { text: 'üîç –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', callback_data: 'MENU:kyc' }
                    ],
                    [
                        { text: 'üì¨ –ü–∏—Å—å–º–æ', callback_data: 'MENU:letter' },
                        { text: 'üìë –®–∞–±–ª–æ–Ω—ã', callback_data: 'MENU:templates' }
                    ],
                    [
                        { text: '‚ûï –ï—â—ë', callback_data: 'MENU:more' },
                        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'MENU:settings' }
                    ]
                ]
            }
        };
    }

    // –ú–µ–Ω—é "–î–æ–≥–æ–≤–æ—Ä"
    getContractMenu(userId) {
        this.setActiveSection(userId, 'contract');
        
        return {
            text: `üìÑ **–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å', callback_data: 'ACT:CONTRACT:UPLOAD' },
                        { text: 'üîç –ê–Ω–∞–ª–∏–∑', callback_data: 'ACT:CONTRACT:ANALYZE' }
                    ],
                    [
                        { text: 'üìë –†–∏—Å–∫–∏', callback_data: 'ACT:CONTRACT:RISKTABLE' },
                        { text: 'üìã –ü—Ä–æ—Ç–æ–∫–æ–ª', callback_data: 'ACT:CONTRACT:PROTOCOL' }
                    ],
                    [
                        { text: 'üè† –î–æ–º–æ–π', callback_data: 'MENU:home' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:home' }
                    ]
                ]
            }
        };
    }

    // –ú–µ–Ω—é "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"
    getKycMenu(userId) {
        this.setActiveSection(userId, 'kyc');
        
        return {
            text: `üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤**

–ü–æ–ª–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ –ò–ù–ù —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∏—Å–∫–æ–≤:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: 'üî¢ –í–≤–µ—Å—Ç–∏ –ò–ù–ù', callback_data: 'ACT:KYC:INPUT_INN' },
                        { text: 'üìä –°–∫–æ—Ä–∏–Ω–≥', callback_data: 'ACT:KYC:SCORING' }
                    ],
                    [
                        { text: 'üö© –§–ª–∞–≥–∏', callback_data: 'ACT:KYC:RED_FLAGS' },
                        { text: '‚úÖ –ß–µ–∫-–ª–∏—Å—Ç', callback_data: 'ACT:KYC:CHECKLIST' }
                    ],
                    [
                        { text: 'üè† –î–æ–º–æ–π', callback_data: 'MENU:home' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:home' }
                    ]
                ]
            }
        };
    }

    // –ú–µ–Ω—é "–ü–∏—Å—å–º–æ"
    getLetterMenu(userId) {
        this.setActiveSection(userId, 'letter');
        
        return {
            text: `üì¨ **–î–µ–ª–æ–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞**

–°–æ–∑–¥–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ø–∏—Å–µ–º –∏ –æ—Ç–≤–µ—Ç–æ–≤:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: 'üì• –ü—Ä–µ—Ç–µ–Ω–∑–∏—è', callback_data: 'ACT:LETTER:PRETENSION' },
                        { text: '‚öñÔ∏è –ó–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'ACT:LETTER:LEGAL_OPINION' }
                    ],
                    [
                        { text: 'üèõÔ∏è –í –≥–æ—Å–æ—Ä–≥–∞–Ω', callback_data: 'ACT:LETTER:GOVERNMENT' },
                        { text: 'üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', callback_data: 'ACT:LETTER:NOTICE' }
                    ],
                    [
                        { text: 'üè† –î–æ–º–æ–π', callback_data: 'MENU:home' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:home' }
                    ]
                ]
            }
        };
    }

    // –ú–µ–Ω—é "–®–∞–±–ª–æ–Ω—ã"
    getTemplatesMenu(userId) {
        this.setActiveSection(userId, 'templates');
        
        return {
            text: `üìë **–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**

–ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –∏ –±–ª–∞–Ω–∫–∏:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä—ã', callback_data: 'ACT:TEMPLATES:CONTRACTS' },
                        { text: 'üìã –ó–∞—è–≤–ª–µ–Ω–∏—è', callback_data: 'ACT:TEMPLATES:APPLICATIONS' }
                    ],
                    [
                        { text: 'üìù –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', callback_data: 'ACT:TEMPLATES:POWERS' },
                        { text: 'üìä –§–æ—Ä–º—ã', callback_data: 'ACT:TEMPLATES:FORMS' }
                    ],
                    [
                        { text: 'üè† –î–æ–º–æ–π', callback_data: 'MENU:home' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:home' }
                    ]
                ]
            }
        };
    }

    // –ú–µ–Ω—é "–ï—â—ë"
    getMoreMenu(userId) {
        this.setActiveSection(userId, 'more');
        
        return {
            text: `‚ûï **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**

–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: '‚öñÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞', callback_data: 'ACT:MORE:PRACTICE' },
                        { text: 'üîß –£—Ç–∏–ª–∏—Ç—ã', callback_data: 'ACT:MORE:UTILS' }
                    ],
                    [
                        { text: 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', callback_data: 'ACT:MORE:KNOWLEDGE' },
                        { text: 'ü§ñ AI –ü–æ–º–æ—â—å', callback_data: 'ACT:MORE:AI_HELP' }
                    ],
                    [
                        { text: 'üè† –î–æ–º–æ–π', callback_data: 'MENU:home' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:home' }
                    ]
                ]
            }
        };
    }

    // –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    getSettingsMenu(userId) {
        this.setActiveSection(userId, 'settings');
        
        return {
            text: `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:`,
            keyboard: {
                inline_keyboard: [
                    [
                        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'ACT:SETTINGS:PROFILE' },
                        { text: 'üß† –ü–∞–º—è—Ç—å', callback_data: 'ACT:SETTINGS:MEMORY' }
                    ],
                    [
                        { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'ACT:SETTINGS:NOTIFICATIONS' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'ACT:SETTINGS:STATS' }
                    ],
                    [
                        { text: 'üè† –î–æ–º–æ–π', callback_data: 'MENU:home' },
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:home' }
                    ]
                ]
            }
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –ø–æ –∫–ª—é—á—É
    getMenu(menuKey, userId) {
        switch (menuKey) {
            case 'home': return this.getMainMenu(userId);
            case 'contract': return this.getContractMenu(userId);
            case 'kyc': return this.getKycMenu(userId);
            case 'letter': return this.getLetterMenu(userId);
            case 'templates': return this.getTemplatesMenu(userId);
            case 'more': return this.getMoreMenu(userId);
            case 'settings': return this.getSettingsMenu(userId);
            default: return this.getMainMenu(userId);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    setActiveSection(userId, section) {
        this.activeSection.set(userId, section);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    getActiveSection(userId) {
        return this.activeSection.get(userId) || 'home';
    }

    // –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory(userId, action) {
        if (!this.userHistory.has(userId)) {
            this.userHistory.set(userId, []);
        }
        
        const history = this.userHistory.get(userId);
        history.push({
            action,
            timestamp: Date.now(),
            section: this.getActiveSection(userId)
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if (history.length > 50) {
            history.shift();
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserHistory(userId, limit = 10) {
        const history = this.userHistory.get(userId) || [];
        return history.slice(-limit);
    }

    // –°–æ–∑–¥–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    createQuickActions(userId, context) {
        const currentSection = this.getActiveSection(userId);
        const history = this.getUserHistory(userId, 5);
        
        const actions = [];

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        switch (currentSection) {
            case 'contract':
                if (context.includes('–¥–æ–≥–æ–≤–æ—Ä') || context.includes('–∫–æ–Ω—Ç—Ä–∞–∫—Ç')) {
                    actions.push({ text: 'üìë –†–∏—Å–∫–∏', callback_data: 'ACT:CONTRACT:RISKTABLE' });
                    actions.push({ text: 'üìã –ü—Ä–æ—Ç–æ–∫–æ–ª', callback_data: 'ACT:CONTRACT:PROTOCOL' });
                }
                break;
            case 'kyc':
                if (context.match(/\d{10,12}/)) { // –ò–ù–ù –Ω–∞–π–¥–µ–Ω
                    actions.push({ text: 'üö© –§–ª–∞–≥–∏', callback_data: 'ACT:KYC:RED_FLAGS' });
                    actions.push({ text: '‚úÖ –ß–µ–∫-–ª–∏—Å—Ç', callback_data: 'ACT:KYC:CHECKLIST' });
                }
                break;
            case 'letter':
                actions.push({ text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç', callback_data: 'ACT:LETTER:EXPORT' });
                actions.push({ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'ACT:LETTER:SAVE' });
                break;
        }

        // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions.push({ text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'ACT:GENERAL:SEARCH' });
        actions.push({ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'ACT:GENERAL:HELP' });

        return actions.slice(0, 6); // –ú–∞–∫—Å–∏–º—É–º 6 –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω—é
    validateAllMenus() {
        const menus = {
            home: this.getMainMenu('test'),
            contract: this.getContractMenu('test'),
            kyc: this.getKycMenu('test'),
            letter: this.getLetterMenu('test'),
            templates: this.getTemplatesMenu('test'),
            more: this.getMoreMenu('test'),
            settings: this.getSettingsMenu('test')
        };

        return this.validator.validateMenuStructure(menus);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ callback_data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    getAllCallbacks() {
        const callbacks = new Set();
        const menus = {
            home: this.getMainMenu('test'),
            contract: this.getContractMenu('test'),
            kyc: this.getKycMenu('test'),
            letter: this.getLetterMenu('test'),
            templates: this.getTemplatesMenu('test'),
            more: this.getMoreMenu('test'),
            settings: this.getSettingsMenu('test')
        };

        for (const menu of Object.values(menus)) {
            if (menu.keyboard && menu.keyboard.inline_keyboard) {
                menu.keyboard.inline_keyboard.forEach(row => {
                    row.forEach(button => {
                        if (button.callback_data) {
                            callbacks.add(button.callback_data);
                        }
                    });
                });
            }
        }

        return Array.from(callbacks);
    }
}

module.exports = { EnhancedMenus };

