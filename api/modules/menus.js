/**
 * Eva Lawyer Bot - Menu system with inline keyboards
 * Provides structured navigation and action handling
 */

const SEGMENTS = [
  { id: "contract",  title: "–î–æ–≥–æ–≤–æ—Ä" },
  { id: "kyc",       title: "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç" },
  { id: "letter",    title: "–ü–∏—Å—å–º–æ" },
  { id: "templates", title: "–®–∞–±–ª–æ–Ω—ã" },
  { id: "more",      title: "–ï—â—ë" },
];

/**
 * Generate segment buttons (top navigation)
 * @param {string} active - Currently active section
 * @returns {Array} - Array of button objects
 */
function seg(active) {
  return SEGMENTS.map(s => ({
    text: `${(s.id === active || (["cases","appeals","utils","settings","faq"].includes(active) && s.id==="more")) ? "‚óâ" : "‚óã"} ${s.title}`,
    callback_data: `MENU:${s.id}`,
  }));
}

/**
 * Create button rows
 * @param {number} perRow - Buttons per row
 * @param {...Object} btns - Button objects
 * @returns {Array} - Array of button rows
 */
function rows(perRow, ...btns) {
  const out = []; 
  let row = [];
  for (const b of btns) { 
    row.push(b); 
    if (row.length === perRow) { 
      out.push(row); 
      row = []; 
    } 
  }
  if (row.length) out.push(row);
  return out;
}

/**
 * Get section information text
 * @param {string} section - Section identifier
 * @returns {string} - Information text
 */
function info(section) {
  switch (section) {
    case "home": return (
`‚ú® –ï–≤–∞ ‚Ä¢ –Æ—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª. –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.

‚Ä¢ –î–æ–≥–æ–≤–æ—Ä ‚Äî –∞–Ω–∞–ª–∏–∑, —Ç–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤, –ø—Ä–æ—Ç–æ–∫–æ–ª
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ‚Äî —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ –ò–ù–ù
‚Ä¢ –ü–∏—Å—å–º–æ ‚Äî –∫–∞—Ä–∫–∞—Å/–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç/–∑–∞–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ –®–∞–±–ª–æ–Ω—ã ‚Äî –¥–æ–≥–æ–≤–æ—Ä, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø—Ä–æ—Ç–æ–∫–æ–ª, —Å—á—ë—Ç
‚Ä¢ –ï—â—ë ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞, –æ–±—Ä–∞—â–µ–Ω–∏—è, —É—Ç–∏–ª–∏—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, FAQ`
    );
    case "contract": return (
`üìÑ –î–æ–≥–æ–≤–æ—Ä
1) –ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx/.pdf –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç
2) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑
3) –ü–æ–ª—É—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É ¬´–ø—É–Ω–∫—Ç ‚Äî —Ä–∏—Å–∫ ‚Äî —Ä–µ–¥–∞–∫—Ü–∏—è¬ª
4) –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π`
    );
    case "kyc": return (
`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
–ù—É–∂–Ω–æ: –ò–ù–ù (10/12). –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–µ—à–µ–Ω–∏–µ –ø–æ –æ—Ç—Å—Ä–æ—á–∫–µ + –∫–∞—Ä—Ç–æ—á–∫–∞ + –∏—Å—Ç–æ—á–Ω–∏–∫–∏ + —Ñ–ª–∞–≥–∏ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`
    );
    case "letter": return (
`üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–æ
–ö–∞—Ä–∫–∞—Å –∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å –Ω–æ—Ä–º–∞–º–∏; –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî —é—Ä. –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.`
    );
    case "templates": return (
`üìë –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ä¢ –°—á—ë—Ç. –ó–∞–ø–æ–ª–Ω—è–µ–º ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫.`
    );
    case "more": return `‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–∞–∫—Ç–∏–∫–∞, –æ–±—Ä–∞—â–µ–Ω–∏—è, —É—Ç–∏–ª–∏—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, FAQ`;
    case "cases": return `‚öñÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:`;
    case "appeals": return `üèõ –û–±—Ä–∞—â–µ–Ω–∏—è ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ`;
    case "utils": return `üß∞ –Æ—Ä-—É—Ç–∏–ª–∏—Ç—ã ‚Äî –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`;
    case "settings": return `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞`;
    case "faq": return `‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–ø—Ä–∞–≤–∫–∞`;
  }
}

/**
 * Generate keyboard for section
 * @param {string} section - Section identifier
 * @returns {Object} - Inline keyboard object
 */
function keyboard(section) {
  const top = [seg(section)];
  switch (section) {
    case "home":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"‚û°Ô∏è –î–æ–≥–æ–≤–æ—Ä", callback_data:"MENU:contract"},
          {text:"‚û°Ô∏è –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", callback_data:"MENU:kyc"},
          {text:"‚û°Ô∏è –ü–∏—Å—å–º–æ", callback_data:"MENU:letter"},
          {text:"‚û°Ô∏è –®–∞–±–ª–æ–Ω—ã", callback_data:"MENU:templates"},
          {text:"‚û°Ô∏è –ï—â—ë", callback_data:"MENU:more"},
        )
      ]};
    case "contract":
      return { inline_keyboard: [
        ...top,
        rows(3,
          {text:"üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data:"ACT:CONTRACT:UPLOAD"},
          {text:"üì§ –ê–Ω–∞–ª–∏–∑",    callback_data:"ACT:CONTRACT:ANALYZE"},
          {text:"üìë –†–∏—Å–∫–∏",     callback_data:"ACT:CONTRACT:RISKTABLE"},
          {text:"üìú –ü—Ä–æ—Ç–æ–∫–æ–ª",  callback_data:"ACT:CONTRACT:PROTOCOL"},
          {text:"üè† –î–æ–º–æ–π",     callback_data:"MENU:home"},
        ),
      ]};
    case "kyc":
      return { inline_keyboard: [
        ...top,
        rows(3,
          {text:"üìù –í–≤–µ—Å—Ç–∏ –ò–ù–ù", callback_data:"ACT:KYC:INPUT_INN"},
          {text:"üìà –°–∫–æ—Ä–∏–Ω–≥",    callback_data:"ACT:KYC:SCORING"},
          {text:"üìä –ß–µ–∫-–ª–∏—Å—Ç",   callback_data:"ACT:KYC:CHECKLIST"},
          {text:"‚ö†Ô∏è –§–ª–∞–≥–∏",      callback_data:"ACT:KYC:RED_FLAGS"},
          {text:"üè† –î–æ–º–æ–π",      callback_data:"MENU:home"},
        ),
      ]};
    case "letter":
      return { inline_keyboard: [
        ...top,
        rows(3,
          {text:"üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data:"ACT:LETTER:UPLOAD"},
          {text:"üß± –ö–∞—Ä–∫–∞—Å",          callback_data:"ACT:LETTER:SKELETON"},
          {text:"üì¨ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç",    callback_data:"ACT:LETTER:FULL"},
          {text:"‚öñÔ∏è –ó–∞–∫–ª—é—á–µ–Ω–∏–µ",      callback_data:"ACT:LETTER:LEGAL_OPINION"},
          {text:"üè† –î–æ–º–æ–π",           callback_data:"MENU:home"},
        ),
      ]};
    case "templates":
      return { inline_keyboard: [
        ...top,
        rows(3,
          {text:"üìÑ –ü–æ—Å—Ç–∞–≤–∫–∞",     callback_data:"ACT:TPL:SUPPLY"},
          {text:"üìë –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data:"ACT:TPL:SPEC"},
          {text:"üìú –ü—Ä–æ—Ç–æ–∫–æ–ª",     callback_data:"ACT:TPL:PROTOCOL"},
          {text:"üí≥ –°—á—ë—Ç",         callback_data:"ACT:TPL:INVOICE"},
          {text:"üè† –î–æ–º–æ–π",        callback_data:"MENU:home"},
        ),
      ]};
    case "more":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"‚öñÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞",   callback_data:"MENU:cases"},
          {text:"üèõ –û–±—Ä–∞—â–µ–Ω–∏—è",  callback_data:"MENU:appeals"},
          {text:"üß∞ –Æ—Ä-—É—Ç–∏–ª–∏—Ç—ã", callback_data:"MENU:utils"},
          {text:"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",  callback_data:"MENU:settings"},
          {text:"‚ùì FAQ",        callback_data:"MENU:faq"},
        ),
      ]};
    case "cases":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"üîç –ü–æ–∏—Å–∫",        callback_data:"ACT:CASES:SEARCH"},
          {text:"üß© –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è", callback_data:"ACT:CASES:CONFLICTS"},
          {text:"üïò –ü–æ—Å–ª–µ–¥–Ω–∏–µ",    callback_data:"ACT:CASES:RECENT"},
          {text:"üì§ –≠–∫—Å–ø–æ—Ä—Ç",      callback_data:"ACT:CASES:EXPORT"},
          {text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",        callback_data:"MENU:more"},
        ),
      ]};
    case "appeals":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"‚úâÔ∏è –ù–æ–≤–æ–µ",         callback_data:"ACT:APPEAL:NEW"},
          {text:"üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫",      callback_data:"ACT:APPEAL:DRAFT"},
          {text:"üßæ DOCX",          callback_data:"ACT:APPEAL:EXPORT_DOCX"},
          {text:"üìë PDF",           callback_data:"ACT:APPEAL:EXPORT_PDF"},
          {text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",         callback_data:"MENU:more"},
        ),
      ]};
    case "utils":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"üß™ –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤",    callback_data:"ACT:UTIL:RISKS_TABLE"},
          {text:"üß∑ 3 —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏",    callback_data:"ACT:UTIL:WORDING_TRIPLE"},
          {text:"üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É",callback_data:"ACT:UTIL:DISPUTE_PREP"},
          {text:"üìë –Æ—Ä–∑–∞–∫–ª—é—á–µ–Ω–∏–µ",      callback_data:"ACT:UTIL:LEGAL_OPINION"},
          {text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",             callback_data:"MENU:more"},
        ),
      ]};
    case "settings":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"üåê –Ø–∑—ã–∫",               callback_data:"ACT:SET:LANG"},
          {text:"üßæ –§–æ—Ä–º–∞—Ç",             callback_data:"ACT:SET:FORMAT"},
          {text:"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",        callback_data:"ACT:SET:NOTIF"},
          {text:"üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",  callback_data:"ACT:SET:CLEAR"},
          {text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",              callback_data:"MENU:more"},
        ),
      ]};
    case "faq":
      return { inline_keyboard: [
        ...top,
        rows(2,
          {text:"‚ùî –í–æ–ø—Ä–æ—Å—ã",       callback_data:"ACT:FAQ:COMMON"},
          {text:"‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",  callback_data:"ACT:FAQ:HOW"},
          {text:"üîê –ö–æ–Ω—Ñ-—Å—Ç—å",      callback_data:"ACT:FAQ:PRIVACY"},
          {text:"üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",     callback_data:"ACT:FAQ:SUPPORT"},
          {text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",         callback_data:"MENU:more"},
        ),
      ]};
  }
}

/**
 * Render complete menu UI
 * @param {string} section - Section identifier
 * @returns {Object} - Complete UI object with text and keyboard
 */
function render(section) {
  return { 
    text: info(section), 
    reply_markup: keyboard(section) 
  };
}

/**
 * Create force reply for input requests
 * @param {string} placeholder - Placeholder text
 * @param {string} id - Input identifier
 * @returns {Object} - Force reply object
 */
function forceReply(placeholder, id) {
  return {
    force_reply: true,
    input_field_placeholder: placeholder,
    selective: true
  };
}

// Export functions
module.exports = {
  render,
  forceReply,
  info,
  keyboard
};

