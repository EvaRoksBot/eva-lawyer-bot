// Advanced AI Engine for Eva Lawyer Bot
// Enhanced OpenAI integration with context awareness and specialized processing

const AdvancedPrompts = require('./advanced-prompts');

class AIEngine {
    constructor() {
        this.openaiApiKey = process.env.OPENAI_API_KEY;
        this.model = process.env.OPENAI_MODEL || 'gpt-4o-mini';
        this.prompts = new AdvancedPrompts();
        this.conversationHistory = new Map(); // userId -> conversation history
        this.maxHistoryLength = 10;
        this.retryAttempts = 3;
        this.retryDelay = 1000; // 1 second
    }

    // Enhanced OpenAI API call with retry logic
    async callOpenAI(messages, options = {}) {
        if (!this.openaiApiKey || this.openaiApiKey === 'placeholder_openai_key') {
            return this.getFallbackResponse(messages[messages.length - 1].content);
        }

        const requestOptions = {
            model: this.model,
            messages: messages,
            max_tokens: options.maxTokens || 2000,
            temperature: options.temperature || 0.7,
            top_p: options.topP || 0.9,
            frequency_penalty: options.frequencyPenalty || 0.1,
            presence_penalty: options.presencePenalty || 0.1,
            ...options
        };

        for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${this.openaiApiKey}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestOptions)
                });

                if (!response.ok) {
                    throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                
                if (data.choices && data.choices[0] && data.choices[0].message) {
                    return {
                        success: true,
                        content: data.choices[0].message.content,
                        usage: data.usage,
                        model: data.model
                    };
                } else {
                    throw new Error('Invalid response format from OpenAI');
                }

            } catch (error) {
                console.error(`OpenAI API attempt ${attempt} failed:`, error);
                
                if (attempt === this.retryAttempts) {
                    return this.getFallbackResponse(messages[messages.length - 1].content, error);
                }
                
                // Exponential backoff
                await this.sleep(this.retryDelay * Math.pow(2, attempt - 1));
            }
        }
    }

    // Sleep utility for retry delays
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Fallback response when OpenAI is unavailable
    getFallbackResponse(userQuery, error = null) {
        const fallbackResponses = {
            contract: `üìã **–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (–±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

‚öñÔ∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:**
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
‚Ä¢ –¶–µ–Ω–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤
‚Ä¢ –°—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è

‚ö†Ô∏è **–¢–∏–ø–∏—á–Ω—ã–µ —Ä–∏—Å–∫–∏:**
‚Ä¢ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
‚Ä¢ –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∑–∞—â–∏—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

üìû –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É.`,

            inn: `üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)**

AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

‚úÖ **–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:**
‚Ä¢ –°—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ï–ì–†–Æ–õ
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
‚Ä¢ –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

üåê **–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
‚Ä¢ egrul.nalog.ru - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ï–ì–†–Æ–õ
‚Ä¢ kad.arbitr.ru - –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞
‚Ä¢ bankrot.fedresurs.ru - –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ

üìû –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.`,

            default: `‚öñÔ∏è **Eva Lawyer Bot (–±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)**

AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
üìû –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É.`
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ fallback
        const queryType = this.prompts.analyzeQueryType(userQuery);
        return {
            success: false,
            content: fallbackResponses[queryType] || fallbackResponses.default,
            fallback: true,
            error: error?.message
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    getConversationHistory(userId) {
        return this.conversationHistory.get(userId) || [];
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory(userId, role, content) {
        let history = this.getConversationHistory(userId);
        history.push({ role, content, timestamp: Date.now() });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if (history.length > this.maxHistoryLength) {
            history = history.slice(-this.maxHistoryLength);
        }
        
        this.conversationHistory.set(userId, history);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    clearHistory(userId) {
        this.conversationHistory.delete(userId);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    async processQuery(userId, query, context = {}) {
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            const queryType = this.prompts.analyzeQueryType(query);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º–ø—Ç
            const systemPrompt = this.prompts.selectPrompt(queryType, context.type);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
            const messages = [
                { role: 'system', content: systemPrompt }
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            const history = this.getConversationHistory(userId);
            if (history.length > 0) {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                const recentHistory = history.slice(-4);
                messages.push(...recentHistory);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            messages.push({ role: 'user', content: query });

            // –í—ã–∑—ã–≤–∞–µ–º OpenAI API
            const response = await this.callOpenAI(messages, {
                temperature: context.temperature || 0.7,
                maxTokens: context.maxTokens || 2000
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addToHistory(userId, 'user', query);
            if (response.success) {
                this.addToHistory(userId, 'assistant', response.content);
            }

            return response;

        } catch (error) {
            console.error('AI Engine processing error:', error);
            return this.getFallbackResponse(query, error);
        }
    }

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async analyzeDocument(userId, documentText, documentType = 'contract') {
        const contextualPrompt = this.prompts.createContextualPrompt(
            'contract',
            `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: ${documentText}`,
            { documentType }
        );

        return await this.processQuery(userId, contextualPrompt, {
            type: 'documentReview',
            maxTokens: 3000,
            temperature: 0.5
        });
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    async analyzeRisks(userId, situation, riskType = 'general') {
        const contextualPrompt = this.prompts.createContextualPrompt(
            'base',
            `–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤: ${situation}`,
            { urgency: 'high' }
        );

        return await this.processQuery(userId, contextualPrompt, {
            type: 'riskAnalysis',
            maxTokens: 2500,
            temperature: 0.6
        });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–≤–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    async prepareLegalOpinion(userId, facts, question) {
        const contextualPrompt = this.prompts.createContextualPrompt(
            'base',
            `–ü–æ–¥–≥–æ—Ç–æ–≤—å –ø—Ä–∞–≤–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ. –§–∞–∫—Ç—ã: ${facts}. –í–æ–ø—Ä–æ—Å: ${question}`,
            { documentType: 'legal_opinion' }
        );

        return await this.processQuery(userId, contextualPrompt, {
            type: 'legalOpinion',
            maxTokens: 3500,
            temperature: 0.4
        });
    }

    // –ü–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
    async assistContractDrafting(userId, contractType, requirements) {
        const contextualPrompt = this.prompts.createContextualPrompt(
            'contract',
            `–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä. –¢–∏–ø: ${contractType}. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${requirements}`,
            { documentType: contractType }
        );

        return await this.processQuery(userId, contextualPrompt, {
            type: 'contractDrafting',
            maxTokens: 4000,
            temperature: 0.5
        });
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ–¥–µ–Ω–∏—è —Å–ø–æ—Ä–∞
    async developDisputeStrategy(userId, disputeDetails, goals) {
        const contextualPrompt = this.prompts.createContextualPrompt(
            'litigation',
            `–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–ø–æ—Ä–∞. –î–µ—Ç–∞–ª–∏: ${disputeDetails}. –¶–µ–ª–∏: ${goals}`,
            { urgency: 'high' }
        );

        return await this.processQuery(userId, contextualPrompt, {
            type: 'disputeStrategy',
            maxTokens: 3000,
            temperature: 0.6
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
    async analyzeCounterparty(userId, innData, additionalInfo = '') {
        const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–µ –∏ –æ—Ü–µ–Ω–∏ —Ä–∏—Å–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:

–î–ê–ù–ù–´–ï –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ê:
${JSON.stringify(innData, null, 2)}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${additionalInfo}

–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º.`;

        return await this.processQuery(userId, prompt, {
            type: 'riskAnalysis',
            maxTokens: 2500,
            temperature: 0.6
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    getUsageStats() {
        return {
            totalUsers: this.conversationHistory.size,
            totalConversations: Array.from(this.conversationHistory.values())
                .reduce((sum, history) => sum + history.length, 0),
            activeUsers: Array.from(this.conversationHistory.entries())
                .filter(([userId, history]) => {
                    const lastMessage = history[history.length - 1];
                    return lastMessage && (Date.now() - lastMessage.timestamp) < 24 * 60 * 60 * 1000;
                }).length
        };
    }
}

module.exports = AIEngine;

