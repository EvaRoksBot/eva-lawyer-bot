// Interactive Forms Module for Eva Lawyer Bot
// Advanced form handling with validation, multi-step flows, and dynamic fields

class InteractiveForms {
    constructor() {
        this.forms = new Map(); // formId -> form config
        this.userForms = new Map(); // userId -> current form data
        this.formTemplates = new Map(); // templateId -> template
        this.validators = new Map(); // validatorId -> validator function
        this.fieldTypes = new Map(); // fieldType -> field handler
        
        this.initializeValidators();
        this.initializeFieldTypes();
        this.initializeFormTemplates();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
    initializeValidators() {
        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ò–ù–ù
        this.addValidator('inn', (value) => {
            const cleanInn = value.replace(/\D/g, '');
            if (cleanInn.length !== 10 && cleanInn.length !== 12) {
                return { valid: false, error: '–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä' };
            }
            return { valid: true };
        });

        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä email
        this.addValidator('email', (value) => {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(value)) {
                return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' };
            }
            return { valid: true };
        });

        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        this.addValidator('phone', (value) => {
            const phoneRegex = /^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
            if (!phoneRegex.test(value.replace(/\s/g, ''))) {
                return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };
            }
            return { valid: true };
        });

        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞—Ç—ã
        this.addValidator('date', (value) => {
            const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
            const match = value.match(dateRegex);
            if (!match) {
                return { valid: false, error: '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' };
            }
            
            const [, day, month, year] = match;
            const date = new Date(year, month - 1, day);
            if (date.getDate() != day || date.getMonth() != month - 1 || date.getFullYear() != year) {
                return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞' };
            }
            
            return { valid: true };
        });

        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—É–º–º—ã
        this.addValidator('amount', (value) => {
            const amount = parseFloat(value.replace(/[^\d.,]/g, '').replace(',', '.'));
            if (isNaN(amount) || amount < 0) {
                return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' };
            }
            return { valid: true, value: amount };
        });

        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
        this.addValidator('required', (value) => {
            if (!value || value.trim().length === 0) {
                return { valid: false, error: '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' };
            }
            return { valid: true };
        });

        // –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª–∏–Ω—ã
        this.addValidator('length', (value, min = 0, max = 1000) => {
            if (value.length < min) {
                return { valid: false, error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${min} —Å–∏–º–≤–æ–ª–æ–≤` };
            }
            if (value.length > max) {
                return { valid: false, error: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${max} —Å–∏–º–≤–æ–ª–æ–≤` };
            }
            return { valid: true };
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
    initializeFieldTypes() {
        // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        this.addFieldType('text', {
            render: (field) => this.renderTextField(field),
            process: (field, value) => this.processTextField(field, value)
        });

        // –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞
        this.addFieldType('select', {
            render: (field) => this.renderSelectField(field),
            process: (field, value) => this.processSelectField(field, value)
        });

        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        this.addFieldType('multiselect', {
            render: (field) => this.renderMultiSelectField(field),
            process: (field, value) => this.processMultiSelectField(field, value)
        });

        // –ü–æ–ª–µ –¥–∞—Ç—ã
        this.addFieldType('date', {
            render: (field) => this.renderDateField(field),
            process: (field, value) => this.processDateField(field, value)
        });

        // –ü–æ–ª–µ —Ñ–∞–π–ª–∞
        this.addFieldType('file', {
            render: (field) => this.renderFileField(field),
            process: (field, value) => this.processFileField(field, value)
        });

        // –ü–æ–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        this.addFieldType('confirm', {
            render: (field) => this.renderConfirmField(field),
            process: (field, value) => this.processConfirmField(field, value)
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–æ—Ä–º
    initializeFormTemplates() {
        // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
        this.addFormTemplate('contract_creation', {
            title: 'üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞',
            description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–≥–æ–≤–æ—Ä–∞',
            steps: [
                {
                    title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    fields: [
                        {
                            id: 'contract_type',
                            label: '–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞',
                            type: 'select',
                            required: true,
                            options: [
                                { value: 'supply', label: '–ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤' },
                                { value: 'service', label: '–û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥' },
                                { value: 'work', label: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç' },
                                { value: 'lease', label: '–ê—Ä–µ–Ω–¥–∞' },
                                { value: 'other', label: '–î—Ä—É–≥–æ–µ' }
                            ]
                        },
                        {
                            id: 'contract_subject',
                            label: '–ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞',
                            type: 'text',
                            required: true,
                            validators: ['required', 'length:10:500'],
                            placeholder: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞'
                        }
                    ]
                },
                {
                    title: '–°—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞',
                    fields: [
                        {
                            id: 'customer_name',
                            label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞',
                            type: 'text',
                            required: true,
                            validators: ['required']
                        },
                        {
                            id: 'customer_inn',
                            label: '–ò–ù–ù –∑–∞–∫–∞–∑—á–∏–∫–∞',
                            type: 'text',
                            required: true,
                            validators: ['required', 'inn']
                        },
                        {
                            id: 'executor_name',
                            label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
                            type: 'text',
                            required: true,
                            validators: ['required']
                        },
                        {
                            id: 'executor_inn',
                            label: '–ò–ù–ù –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
                            type: 'text',
                            required: true,
                            validators: ['required', 'inn']
                        }
                    ]
                },
                {
                    title: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è',
                    fields: [
                        {
                            id: 'contract_amount',
                            label: '–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞',
                            type: 'text',
                            required: true,
                            validators: ['required', 'amount'],
                            placeholder: '1 000 000.00'
                        },
                        {
                            id: 'payment_terms',
                            label: '–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã',
                            type: 'select',
                            required: true,
                            options: [
                                { value: 'prepayment', label: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 100%' },
                                { value: 'prepayment_50', label: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%' },
                                { value: 'postpayment', label: '–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞' },
                                { value: 'installments', label: '–†–∞—Å—Å—Ä–æ—á–∫–∞' }
                            ]
                        }
                    ]
                },
                {
                    title: '–°—Ä–æ–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è',
                    fields: [
                        {
                            id: 'start_date',
                            label: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞',
                            type: 'date',
                            required: true,
                            validators: ['required', 'date']
                        },
                        {
                            id: 'end_date',
                            label: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
                            type: 'date',
                            required: true,
                            validators: ['required', 'date']
                        },
                        {
                            id: 'special_conditions',
                            label: '–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è',
                            type: 'text',
                            required: false,
                            validators: ['length:0:1000'],
                            placeholder: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞'
                        }
                    ]
                }
            ]
        });

        // –§–æ—Ä–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        this.addFormTemplate('counterparty_check', {
            title: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
            description: '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏',
            steps: [
                {
                    title: '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    fields: [
                        {
                            id: 'company_inn',
                            label: '–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                            type: 'text',
                            required: true,
                            validators: ['required', 'inn'],
                            placeholder: '7707083893'
                        },
                        {
                            id: 'check_type',
                            label: '–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏',
                            type: 'multiselect',
                            required: true,
                            options: [
                                { value: 'basic', label: '–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
                                { value: 'financial', label: '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' },
                                { value: 'legal', label: '–°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞' },
                                { value: 'bankruptcy', label: '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ' },
                                { value: 'debts', label: '–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏' }
                            ]
                        }
                    ]
                },
                {
                    title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                    fields: [
                        {
                            id: 'check_depth',
                            label: '–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏',
                            type: 'select',
                            required: true,
                            options: [
                                { value: 'express', label: '–≠–∫—Å–ø—Ä–µ—Å—Å (5 –º–∏–Ω)' },
                                { value: 'standard', label: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (15 –º–∏–Ω)' },
                                { value: 'detailed', label: '–î–µ—Ç–∞–ª—å–Ω–∞—è (30 –º–∏–Ω)' }
                            ]
                        },
                        {
                            id: 'include_affiliates',
                            label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏',
                            type: 'confirm',
                            required: false,
                            default: false
                        }
                    ]
                }
            ]
        });

        // –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.addFormTemplate('notification_settings', {
            title: 'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            steps: [
                {
                    title: '–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                    fields: [
                        {
                            id: 'contract_reminders',
                            label: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö',
                            type: 'confirm',
                            required: false,
                            default: true
                        },
                        {
                            id: 'law_updates',
                            label: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
                            type: 'confirm',
                            required: false,
                            default: true
                        },
                        {
                            id: 'counterparty_alerts',
                            label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞—Ö',
                            type: 'confirm',
                            required: false,
                            default: false
                        }
                    ]
                },
                {
                    title: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                    fields: [
                        {
                            id: 'quiet_hours_start',
                            label: '–ù–∞—á–∞–ª–æ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤',
                            type: 'select',
                            required: true,
                            options: Array.from({ length: 24 }, (_, i) => ({
                                value: i.toString(),
                                label: `${i.toString().padStart(2, '0')}:00`
                            }))
                        },
                        {
                            id: 'quiet_hours_end',
                            label: '–ö–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤',
                            type: 'select',
                            required: true,
                            options: Array.from({ length: 24 }, (_, i) => ({
                                value: i.toString(),
                                label: `${i.toString().padStart(2, '0')}:00`
                            }))
                        }
                    ]
                }
            ]
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    addValidator(validatorId, validator) {
        this.validators.set(validatorId, validator);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—è
    addFieldType(typeId, handler) {
        this.fieldTypes.set(typeId, handler);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ñ–æ—Ä–º—ã
    addFormTemplate(templateId, template) {
        this.formTemplates.set(templateId, template);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
    createForm(userId, templateId, initialData = {}) {
        const template = this.formTemplates.get(templateId);
        if (!template) {
            throw new Error(`Form template ${templateId} not found`);
        }

        const formId = this.generateId();
        const form = {
            id: formId,
            templateId,
            userId,
            title: template.title,
            description: template.description,
            steps: template.steps,
            currentStep: 0,
            data: { ...initialData },
            errors: {},
            created_at: Date.now(),
            updated_at: Date.now(),
            status: 'active'
        };

        this.forms.set(formId, form);
        this.userForms.set(userId, formId);

        return form;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—ã
    renderForm(formId) {
        const form = this.forms.get(formId);
        if (!form) {
            throw new Error(`Form ${formId} not found`);
        }

        const currentStep = form.steps[form.currentStep];
        if (!currentStep) {
            return this.renderFormComplete(form);
        }

        let message = `üìù **${form.title}**\n`;
        message += `_${form.description}_\n\n`;

        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        const progress = Math.round(((form.currentStep + 1) / form.steps.length) * 100);
        message += `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${progress}% (${form.currentStep + 1}/${form.steps.length})\n\n`;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞
        message += `**${currentStep.title}**\n\n`;

        // –ü–æ–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        currentStep.fields.forEach((field, index) => {
            message += this.renderField(field, form.data[field.id], form.errors[field.id]);
            if (index < currentStep.fields.length - 1) {
                message += '\n\n';
            }
        });

        // –ö–Ω–æ–ø–∫–∏
        const keyboard = this.renderFormKeyboard(form, currentStep);

        return {
            text: message,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        };
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è
    renderField(field, value, error) {
        const fieldType = this.fieldTypes.get(field.type);
        if (!fieldType) {
            throw new Error(`Field type ${field.type} not found`);
        }

        let fieldText = fieldType.render(field);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (value !== undefined && value !== null) {
            fieldText += `\nüí° **–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** ${this.formatFieldValue(field, value)}`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        if (error) {
            fieldText += `\n‚ùå **–û—à–∏–±–∫–∞:** ${error}`;
        }

        return fieldText;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    renderTextField(field) {
        let text = `${field.required ? 'üìù*' : 'üìù'} **${field.label}**`;
        
        if (field.placeholder) {
            text += `\n_–ü—Ä–∏–º–µ—Ä: ${field.placeholder}_`;
        }

        return text;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è –≤—ã–±–æ—Ä–∞
    renderSelectField(field) {
        let text = `${field.required ? 'üìã*' : 'üìã'} **${field.label}**`;
        
        text += '\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã:';
        field.options.forEach((option, index) => {
            text += `\n${index + 1}. ${option.label}`;
        });

        return text;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    renderMultiSelectField(field) {
        let text = `${field.required ? '‚òëÔ∏è*' : '‚òëÔ∏è'} **${field.label}**`;
        
        text += '\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):';
        field.options.forEach((option, index) => {
            text += `\n${index + 1}. ${option.label}`;
        });

        return text;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è –¥–∞—Ç—ã
    renderDateField(field) {
        let text = `${field.required ? 'üìÖ*' : 'üìÖ'} **${field.label}**`;
        text += '\n_–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì_';
        return text;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è —Ñ–∞–π–ª–∞
    renderFileField(field) {
        let text = `${field.required ? 'üìé*' : 'üìé'} **${field.label}**`;
        text += '\n_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏_';
        return text;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    renderConfirmField(field) {
        return `${field.required ? '‚úÖ*' : '‚úÖ'} **${field.label}**`;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ–æ—Ä–º—ã
    renderFormKeyboard(form, currentStep) {
        const keyboard = { inline_keyboard: [] };

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        currentStep.fields.forEach((field, index) => {
            const buttonText = `‚úèÔ∏è ${field.label}`;
            keyboard.inline_keyboard.push([{
                text: buttonText,
                callback_data: `eva:form:field:${form.id}:${index}`
            }]);
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        const navRow = [];
        
        if (form.currentStep > 0) {
            navRow.push({
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: `eva:form:prev:${form.id}`
            });
        }

        if (this.isStepComplete(form, currentStep)) {
            if (form.currentStep < form.steps.length - 1) {
                navRow.push({
                    text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è',
                    callback_data: `eva:form:next:${form.id}`
                });
            } else {
                navRow.push({
                    text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å',
                    callback_data: `eva:form:complete:${form.id}`
                });
            }
        }

        navRow.push({
            text: '‚ùå –û—Ç–º–µ–Ω–∞',
            callback_data: `eva:form:cancel:${form.id}`
        });

        if (navRow.length > 0) {
            keyboard.inline_keyboard.push(navRow);
        }

        return keyboard;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —à–∞–≥–∞
    isStepComplete(form, step) {
        return step.fields.every(field => {
            if (!field.required) return true;
            const value = form.data[field.id];
            return value !== undefined && value !== null && value !== '';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—è
    async processFieldInput(formId, fieldIndex, value) {
        const form = this.forms.get(formId);
        if (!form) {
            throw new Error(`Form ${formId} not found`);
        }

        const currentStep = form.steps[form.currentStep];
        const field = currentStep.fields[fieldIndex];
        
        if (!field) {
            throw new Error(`Field ${fieldIndex} not found`);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const validation = this.validateField(field, value);
        
        if (validation.valid) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            form.data[field.id] = validation.value || value;
            delete form.errors[field.id];
            form.updated_at = Date.now();
            
            return { success: true };
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            form.errors[field.id] = validation.error;
            
            return { 
                success: false, 
                error: validation.error 
            };
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è
    validateField(field, value) {
        if (!field.validators) {
            return { valid: true };
        }

        for (const validatorConfig of field.validators) {
            let validatorId, params = [];
            
            if (typeof validatorConfig === 'string') {
                if (validatorConfig.includes(':')) {
                    [validatorId, ...params] = validatorConfig.split(':');
                } else {
                    validatorId = validatorConfig;
                }
            }

            const validator = this.validators.get(validatorId);
            if (!validator) {
                continue;
            }

            const result = validator(value, ...params);
            if (!result.valid) {
                return result;
            }

            // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (result.value !== undefined) {
                value = result.value;
            }
        }

        return { valid: true, value };
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    nextStep(formId) {
        const form = this.forms.get(formId);
        if (!form) {
            throw new Error(`Form ${formId} not found`);
        }

        if (form.currentStep < form.steps.length - 1) {
            form.currentStep++;
            form.updated_at = Date.now();
            return true;
        }

        return false;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    prevStep(formId) {
        const form = this.forms.get(formId);
        if (!form) {
            throw new Error(`Form ${formId} not found`);
        }

        if (form.currentStep > 0) {
            form.currentStep--;
            form.updated_at = Date.now();
            return true;
        }

        return false;
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    completeForm(formId) {
        const form = this.forms.get(formId);
        if (!form) {
            throw new Error(`Form ${formId} not found`);
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        const errors = {};
        let hasErrors = false;

        form.steps.forEach(step => {
            step.fields.forEach(field => {
                if (field.required && !form.data[field.id]) {
                    errors[field.id] = '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
                    hasErrors = true;
                }
            });
        });

        if (hasErrors) {
            form.errors = errors;
            return { success: false, errors };
        }

        form.status = 'completed';
        form.completed_at = Date.now();
        this.userForms.delete(form.userId);

        return { success: true, data: form.data };
    }

    // –û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã
    cancelForm(formId) {
        const form = this.forms.get(formId);
        if (!form) {
            return false;
        }

        form.status = 'cancelled';
        form.cancelled_at = Date.now();
        this.userForms.delete(form.userId);
        this.forms.delete(formId);

        return true;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserForm(userId) {
        const formId = this.userForms.get(userId);
        return formId ? this.forms.get(formId) : null;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
    formatFieldValue(field, value) {
        if (field.type === 'select') {
            const option = field.options.find(opt => opt.value === value);
            return option ? option.label : value;
        } else if (field.type === 'multiselect') {
            const selectedOptions = field.options.filter(opt => value.includes(opt.value));
            return selectedOptions.map(opt => opt.label).join(', ');
        } else if (field.type === 'confirm') {
            return value ? '–î–∞' : '–ù–µ—Ç';
        }
        
        return value;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
    renderFormComplete(form) {
        let message = `‚úÖ **–§–æ—Ä–º–∞ "${form.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n`;
        
        message += 'üìã **–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n';
        
        form.steps.forEach((step, stepIndex) => {
            message += `**${stepIndex + 1}. ${step.title}**\n`;
            
            step.fields.forEach(field => {
                const value = form.data[field.id];
                if (value !== undefined && value !== null && value !== '') {
                    message += `‚Ä¢ ${field.label}: ${this.formatFieldValue(field, value)}\n`;
                }
            });
            
            message += '\n';
        });

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: `eva:form:export:${form.id}` },
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `eva:form:edit:${form.id}` }
                ],
                [
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'eva:main' }
                ]
            ]
        };

        return {
            text: message,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        };
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º
    getFormsStats() {
        const forms = Array.from(this.forms.values());
        
        return {
            total_forms: forms.length,
            active_forms: forms.filter(f => f.status === 'active').length,
            completed_forms: forms.filter(f => f.status === 'completed').length,
            cancelled_forms: forms.filter(f => f.status === 'cancelled').length,
            templates: this.formTemplates.size,
            validators: this.validators.size,
            field_types: this.fieldTypes.size
        };
    }
}

module.exports = InteractiveForms;

