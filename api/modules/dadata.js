/**
 * DaData API Integration for Eva Lawyer Bot
 * Provides real counterparty checking functionality using DaData API
 */

const DADATA_API_KEY = process.env.DADATA_API_KEY;
const DADATA_SECRET = process.env.DADATA_SECRET;
const DADATA_BASE_URL = 'https://suggestions.dadata.ru/suggestions/api/4_1/rs';

/**
 * Check if DaData API keys are configured
 */
function isDaDataConfigured() {
  return DADATA_API_KEY && DADATA_SECRET &&
         DADATA_API_KEY !== 'placeholder_dadata_key' &&
         DADATA_SECRET !== 'placeholder_dadata_secret';
}

/**
 * Make request to DaData API
 */
async function makeDaDataRequest(endpoint, data) {
  try {
    const response = await fetch(`${DADATA_BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Token ${DADATA_API_KEY}`,
        'X-Secret': DADATA_SECRET
      },
      body: JSON.stringify(data)
    });

    if (!response.ok) {
      throw new Error(`DaData API error: ${response.status} ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('‚ùå DaData API request failed:', error);
    throw error;
  }
}

/**
 * Find organization by INN
 */
async function findByInn(inn) {
  if (!isDaDataConfigured()) {
    throw new Error('DaData API keys not configured');
  }

  const data = {
    query: inn,
    count: 1
  };

  return await makeDaDataRequest('/findById/party', data);
}

/**
 * Get detailed organization info by INN
 */
async function getOrganizationInfo(inn) {
  try {
    const result = await findByInn(inn);
    
    if (!result.suggestions || result.suggestions.length === 0) {
      return {
        found: false,
        inn: inn,
        message: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      };
    }

    const org = result.suggestions[0];
    const data = org.data;

    return {
      found: true,
      inn: data.inn,
      kpp: data.kpp,
      name: {
        full: data.name.full_with_opf,
        short: data.name.short_with_opf
      },
      address: {
        full: data.address.value,
        region: data.address.data.region,
        city: data.address.data.city
      },
      management: data.management ? {
        name: data.management.name,
        post: data.management.post
      } : null,
      status: {
        value: data.state.status,
        date: data.state.registration_date,
        liquidation_date: data.state.liquidation_date
      },
      opf: {
        code: data.opf.code,
        full: data.opf.full,
        short: data.opf.short
      },
      okved: data.okved ? {
        main: data.okved,
        additional: data.okveds
      } : null,
      finance: data.finance ? {
        tax_system: data.finance.tax_system,
        income: data.finance.income,
        expense: data.finance.expense,
        debt: data.finance.debt
      } : null,
      employees: data.employee_count
    };
  } catch (error) {
    console.error('‚ùå Error getting organization info:', error);
    return {
      found: false,
      inn: inn,
      error: error.message,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
    };
  }
}

/**
 * Analyze organization risks
 */
function analyzeRisks(orgInfo) {
  if (!orgInfo.found) {
    return {
      riskLevel: 'CRITICAL',
      score: 0,
      risks: ['–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'],
      recommendations: ['–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù']
    };
  }

  const risks = [];
  const recommendations = [];
  let score = 100;

  // Check liquidation status
  if (orgInfo.status.liquidation_date) {
    risks.push('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞');
    recommendations.push('–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
    score -= 100;
  }

  // Check status
  if (orgInfo.status.value === 'LIQUIDATING') {
    risks.push('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏');
    recommendations.push('–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞');
    score -= 80;
  } else if (orgInfo.status.value === 'REORGANIZING') {
    risks.push('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    recommendations.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
    score -= 30;
  }

  // Check financial data
  if (orgInfo.finance) {
    if (orgInfo.finance.debt && orgInfo.finance.debt > 1000000) {
      risks.push('–í—ã—Å–æ–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–ª–æ–≥–∞–º');
      recommendations.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è');
      score -= 25;
    }
    
    if (orgInfo.finance.income && orgInfo.finance.income < 1000000) {
      risks.push('–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–æ–≤');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å');
      score -= 15;
    }
  }

  // Check registration date (new companies)
  if (orgInfo.status.date) {
    const regDate = new Date(orgInfo.status.date);
    const monthsOld = (Date.now() - regDate.getTime()) / (1000 * 60 * 60 * 24 * 30);
    
    if (monthsOld < 6) {
      risks.push('–ú–æ–ª–æ–¥–∞—è –∫–æ–º–ø–∞–Ω–∏—è (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)');
      recommendations.push('–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ');
      score -= 20;
    }
  }

  // Check employees
  if (orgInfo.employees !== null && orgInfo.employees < 5) {
    risks.push('–ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏');
    score -= 10;
  }

  // Determine risk level
  let riskLevel;
  if (score >= 80) {
    riskLevel = 'LOW';
  } else if (score >= 60) {
    riskLevel = 'MEDIUM';
  } else if (score >= 30) {
    riskLevel = 'HIGH';
  } else {
    riskLevel = 'CRITICAL';
  }

  // Add positive recommendations
  if (risks.length === 0) {
    recommendations.push('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞–¥–µ–∂–Ω–æ–π');
    recommendations.push('–ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞');
  }

  return {
    riskLevel,
    score: Math.max(0, score),
    risks: risks.length > 0 ? risks : ['–°–µ—Ä—å–µ–∑–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ'],
    recommendations
  };
}

/**
 * Format organization info for display
 */
function formatOrganizationInfo(orgInfo, risks) {
  if (!orgInfo.found) {
    return `‚ùå **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–ò–ù–ù: ${orgInfo.inn}\n\n${orgInfo.message}`;
  }

  const riskEmoji = {
    'LOW': 'üü¢',
    'MEDIUM': 'üü°', 
    'HIGH': 'üü†',
    'CRITICAL': 'üî¥'
  };

  let result = `üè¢ **${orgInfo.name.short}**\n\n`;
  
  // Basic info
  result += `üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
  result += `‚Ä¢ –ò–ù–ù: ${orgInfo.inn}\n`;
  if (orgInfo.kpp) result += `‚Ä¢ –ö–ü–ü: ${orgInfo.kpp}\n`;
  result += `‚Ä¢ –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${orgInfo.name.full}\n`;
  result += `‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: ${orgInfo.opf.full}\n`;
  result += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${orgInfo.status.value}\n`;
  if (orgInfo.status.date) result += `‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(orgInfo.status.date).toLocaleDateString('ru-RU')}\n`;
  
  // Address
  result += `\nüìç **–ê–¥—Ä–µ—Å:**\n${orgInfo.address.full}\n`;
  
  // Management
  if (orgInfo.management) {
    result += `\nüë§ **–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:**\n`;
    result += `‚Ä¢ ${orgInfo.management.post}: ${orgInfo.management.name}\n`;
  }
  
  // Financial info
  if (orgInfo.finance) {
    result += `\nüí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
    if (orgInfo.finance.income) result += `‚Ä¢ –î–æ—Ö–æ–¥—ã: ${orgInfo.finance.income.toLocaleString('ru-RU')} —Ä—É–±.\n`;
    if (orgInfo.finance.expense) result += `‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: ${orgInfo.finance.expense.toLocaleString('ru-RU')} —Ä—É–±.\n`;
    if (orgInfo.finance.debt) result += `‚Ä¢ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: ${orgInfo.finance.debt.toLocaleString('ru-RU')} —Ä—É–±.\n`;
  }
  
  // Employees
  if (orgInfo.employees !== null) {
    result += `\nüë• **–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:** ${orgInfo.employees} —á–µ–ª.\n`;
  }
  
  // Risk analysis
  result += `\n${riskEmoji[risks.riskLevel]} **–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: ${risks.riskLevel}**\n`;
  result += `üìä –°–∫–æ—Ä–∏–Ω–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${risks.score}/100\n\n`;
  
  // Risks
  if (risks.risks.length > 0) {
    result += `‚ö†Ô∏è **–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:**\n`;
    risks.risks.forEach(risk => {
      result += `‚Ä¢ ${risk}\n`;
    });
    result += `\n`;
  }
  
  // Recommendations
  result += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
  risks.recommendations.forEach(rec => {
    result += `‚Ä¢ ${rec}\n`;
  });
  
  return result;
}

/**
 * Main function to check counterparty by INN
 */
async function checkCounterparty(inn) {
  try {
    console.log(`üîç Checking counterparty with INN: ${inn}`);
    
    const orgInfo = await getOrganizationInfo(inn);
    const risks = analyzeRisks(orgInfo);
    const formattedInfo = formatOrganizationInfo(orgInfo, risks);
    
    return {
      success: true,
      inn,
      orgInfo,
      risks,
      formattedInfo
    };
  } catch (error) {
    console.error('‚ùå Counterparty check failed:', error);
    
    return {
      success: false,
      inn,
      error: error.message,
      formattedInfo: `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**\n\n–ò–ù–ù: ${inn}\n–û—à–∏–±–∫–∞: ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    };
  }
}

module.exports = {
  isDaDataConfigured,
  checkCounterparty,
  getOrganizationInfo,
  analyzeRisks,
  formatOrganizationInfo
};

