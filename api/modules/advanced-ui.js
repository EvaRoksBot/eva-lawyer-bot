// Advanced UI Module for Eva Lawyer Bot
// Enhanced user interface with dynamic menus, rich formatting, and interactive elements

class AdvancedUI {
    constructor() {
        this.menuTemplates = new Map();
        this.uiComponents = new Map();
        this.userSessions = new Map(); // userId -> session data
        this.animations = new Map();
        this.themes = new Map();
        
        this.initializeMenuTemplates();
        this.initializeUIComponents();
        this.initializeThemes();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–Ω—é
    initializeMenuTemplates() {
        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.addMenuTemplate('main_menu', {
            title: 'üè† **Eva Lawyer Bot**',
            subtitle: '–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç',
            description: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
            animation: 'fade_in',
            layout: 'grid_2x3',
            buttons: [
                {
                    text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä—ã',
                    emoji: 'üìÑ',
                    callback_data: 'eva:contracts:menu',
                    description: '–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
                    color: 'blue'
                },
                {
                    text: 'üìö –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª',
                    emoji: 'üìö',
                    callback_data: 'eva:pkg:menu',
                    description: '–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                    color: 'green'
                },
                {
                    text: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
                    emoji: 'üîç',
                    callback_data: 'eva:inn:prompt',
                    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ò–ù–ù –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤',
                    color: 'orange'
                },
                {
                    text: 'üí≥ –°—á—ë—Ç/–∞–∫—Ç—ã',
                    emoji: 'üí≥',
                    callback_data: 'eva:docs:billing',
                    description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                    color: 'purple'
                },
                {
                    text: 'üìà –û—Ç—á—ë—Ç—ã',
                    emoji: 'üìà',
                    callback_data: 'eva:reports:menu',
                    description: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    color: 'red'
                },
                {
                    text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                    emoji: '‚öôÔ∏è',
                    callback_data: 'eva:settings:menu',
                    description: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                    color: 'gray'
                }
            ],
            footer: {
                text: 'üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏',
                buttons: [
                    { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'eva:help:menu' },
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'eva:stats:show' }
                ]
            }
        });

        // –ú–µ–Ω—é –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        this.addMenuTemplate('contracts_menu', {
            title: 'üìÑ **–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏**',
            subtitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞',
            progress_bar: {
                current: 0,
                total: 4,
                steps: ['–ó–∞–≥—Ä—É–∑–∫–∞', '–ê–Ω–∞–ª–∏–∑', '–†–∏—Å–∫–∏', '–û—Ç—á–µ—Ç']
            },
            layout: 'list',
            buttons: [
                {
                    text: 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä',
                    emoji: 'üì§',
                    callback_data: 'eva:contracts:upload',
                    description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                    badge: '–ù–æ–≤–æ–µ'
                },
                {
                    text: 'üîç –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤',
                    emoji: 'üîç',
                    callback_data: 'eva:contracts:risks',
                    description: '–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤'
                },
                {
                    text: '‚úèÔ∏è –†–µ–¥–ª–∞–π–Ω',
                    emoji: '‚úèÔ∏è',
                    callback_data: 'eva:contracts:redline',
                    description: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º'
                },
                {
                    text: 'üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤',
                    emoji: 'üìä',
                    callback_data: 'eva:contracts:risk_table',
                    description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤'
                },
                {
                    text: 'üìã –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π',
                    emoji: 'üìã',
                    callback_data: 'eva:contracts:protocol',
                    description: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞'
                }
            ],
            navigation: {
                back: { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'eva:main' },
                home: { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'eva:main' }
            }
        });

        // –ú–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        this.addMenuTemplate('inn_check_menu', {
            title: 'üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**',
            subtitle: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏',
            input_prompt: {
                text: '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
                placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 7707083893',
                validation: 'inn',
                format_hint: '10 —Ü–∏—Ñ—Ä –¥–ª—è –Æ–õ, 12 —Ü–∏—Ñ—Ä –¥–ª—è –ò–ü'
            },
            quick_actions: [
                {
                    text: 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏',
                    callback_data: 'eva:inn:history'
                },
                {
                    text: 'üìä –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
                    callback_data: 'eva:inn:batch'
                }
            ],
            examples: [
                { text: '–°–±–µ—Ä–±–∞–Ω–∫', inn: '7707083893' },
                { text: '–ì–∞–∑–ø—Ä–æ–º', inn: '7736050003' },
                { text: '–Ø–Ω–¥–µ–∫—Å', inn: '7736207543' }
            ]
        });

        // –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏
        this.addMenuTemplate('settings_menu', {
            title: '‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**',
            subtitle: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º',
            layout: 'sections',
            sections: [
                {
                    title: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                    buttons: [
                        {
                            text: 'üåô –¢–µ–º–∞',
                            callback_data: 'eva:settings:theme',
                            current_value: '–°–≤–µ—Ç–ª–∞—è',
                            type: 'toggle'
                        },
                        {
                            text: 'üó£Ô∏è –Ø–∑—ã–∫',
                            callback_data: 'eva:settings:language',
                            current_value: '–†—É—Å—Å–∫–∏–π',
                            type: 'select'
                        }
                    ]
                },
                {
                    title: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    buttons: [
                        {
                            text: 'üìÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö',
                            callback_data: 'eva:settings:contract_reminders',
                            current_value: true,
                            type: 'switch'
                        },
                        {
                            text: '‚öñÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤',
                            callback_data: 'eva:settings:law_updates',
                            current_value: true,
                            type: 'switch'
                        }
                    ]
                },
                {
                    title: 'üìä –û—Ç—á–µ—Ç—ã',
                    buttons: [
                        {
                            text: 'üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
                            callback_data: 'eva:settings:weekly_reports',
                            current_value: false,
                            type: 'switch'
                        }
                    ]
                }
            ]
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initializeUIComponents() {
        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        this.addUIComponent('progress_bar', (current, total, steps = []) => {
            const percentage = Math.round((current / total) * 100);
            const filled = Math.round((current / total) * 10);
            const empty = 10 - filled;
            
            const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
            const step_text = steps.length > 0 ? `\nüìç –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: ${steps[current] || '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}` : '';
            
            return `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${percentage}%\n\`${bar}\` ${current}/${total}${step_text}`;
        });

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        this.addUIComponent('rating', (score, maxScore = 100) => {
            const stars = Math.round((score / maxScore) * 5);
            const filled = '‚≠ê'.repeat(stars);
            const empty = '‚òÜ'.repeat(5 - stars);
            
            return `${filled}${empty} ${score}/${maxScore}`;
        });

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
        this.addUIComponent('status', (status) => {
            const statusMap = {
                'active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ',
                'inactive': 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ',
                'pending': 'üü° –í –æ–∂–∏–¥–∞–Ω–∏–∏',
                'processing': 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞',
                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                'failed': '‚ùå –û—à–∏–±–∫–∞',
                'warning': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
            };
            
            return statusMap[status] || `‚ùì ${status}`;
        });

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∏—Å–∫–∞
        this.addUIComponent('risk_indicator', (level) => {
            const riskMap = {
                'low': 'üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫',
                'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫',
                'high': 'üü† –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫',
                'critical': 'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫'
            };
            
            return riskMap[level] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        });

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–π–º–µ—Ä–∞
        this.addUIComponent('timer', (seconds) => {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            if (hours > 0) {
                return `‚è±Ô∏è ${hours}—á ${minutes}–º ${secs}—Å`;
            } else if (minutes > 0) {
                return `‚è±Ô∏è ${minutes}–º ${secs}—Å`;
            } else {
                return `‚è±Ô∏è ${secs}—Å`;
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º
    initializeThemes() {
        this.addTheme('light', {
            name: '–°–≤–µ—Ç–ª–∞—è',
            colors: {
                primary: 'üîµ',
                secondary: '‚ö™',
                success: 'üü¢',
                warning: 'üü°',
                danger: 'üî¥',
                info: 'üîµ'
            },
            emojis: {
                menu: 'üìã',
                back: 'üîô',
                home: 'üè†',
                settings: '‚öôÔ∏è',
                help: 'üÜò'
            }
        });

        this.addTheme('dark', {
            name: '–¢–µ–º–Ω–∞—è',
            colors: {
                primary: 'üî∑',
                secondary: '‚ö´',
                success: 'üü¢',
                warning: 'üü†',
                danger: 'üî¥',
                info: 'üî∑'
            },
            emojis: {
                menu: 'üìã',
                back: '‚óÄÔ∏è',
                home: 'üè†',
                settings: '‚öôÔ∏è',
                help: '‚ùì'
            }
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –º–µ–Ω—é
    addMenuTemplate(templateId, template) {
        this.menuTemplates.set(templateId, template);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    addUIComponent(componentId, renderer) {
        this.uiComponents.set(componentId, renderer);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
    addTheme(themeId, theme) {
        this.themes.set(themeId, theme);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–µ–Ω—é
    renderMenu(templateId, userId, variables = {}) {
        const template = this.menuTemplates.get(templateId);
        if (!template) {
            throw new Error(`Menu template ${templateId} not found`);
        }

        const userSession = this.getUserSession(userId);
        const theme = this.themes.get(userSession.theme || 'light');

        // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let message = this.renderTitle(template, theme);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (template.progress_bar) {
            const progressComponent = this.uiComponents.get('progress_bar');
            message += '\n\n' + progressComponent(
                template.progress_bar.current,
                template.progress_bar.total,
                template.progress_bar.steps
            );
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if (template.description) {
            message += '\n\n' + template.description;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º prompt –¥–ª—è –≤–≤–æ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (template.input_prompt) {
            message += '\n\n' + this.renderInputPrompt(template.input_prompt);
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏
        const keyboard = this.renderKeyboard(template, theme, userSession);

        return {
            text: message,
            reply_markup: keyboard,
            parse_mode: 'Markdown'
        };
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    renderTitle(template, theme) {
        let title = template.title;
        
        if (template.subtitle) {
            title += `\n_${template.subtitle}_`;
        }

        return title;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ prompt –¥–ª—è –≤–≤–æ–¥–∞
    renderInputPrompt(inputPrompt) {
        let prompt = `üí¨ ${inputPrompt.text}`;
        
        if (inputPrompt.format_hint) {
            prompt += `\n\nüìù –§–æ—Ä–º–∞—Ç: ${inputPrompt.format_hint}`;
        }

        if (inputPrompt.placeholder) {
            prompt += `\n\nüí° –ü—Ä–∏–º–µ—Ä: \`${inputPrompt.placeholder}\``;
        }

        return prompt;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    renderKeyboard(template, theme, userSession) {
        const keyboard = { inline_keyboard: [] };

        if (template.layout === 'grid_2x3') {
            // –°–µ—Ç–∫–∞ 2x3
            for (let i = 0; i < template.buttons.length; i += 2) {
                const row = [];
                for (let j = 0; j < 2 && i + j < template.buttons.length; j++) {
                    row.push(this.renderButton(template.buttons[i + j], theme));
                }
                keyboard.inline_keyboard.push(row);
            }
        } else if (template.layout === 'list') {
            // –°–ø–∏—Å–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É)
            template.buttons.forEach(button => {
                keyboard.inline_keyboard.push([this.renderButton(button, theme)]);
            });
        } else if (template.layout === 'sections') {
            // –°–µ–∫—Ü–∏–∏
            template.sections.forEach(section => {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
                section.buttons.forEach(button => {
                    keyboard.inline_keyboard.push([this.renderButton(button, theme)]);
                });
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
                if (section !== template.sections[template.sections.length - 1]) {
                    keyboard.inline_keyboard.push([]);
                }
            });
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞
            const buttonsPerRow = template.buttons.length <= 4 ? 2 : 3;
            for (let i = 0; i < template.buttons.length; i += buttonsPerRow) {
                const row = [];
                for (let j = 0; j < buttonsPerRow && i + j < template.buttons.length; j++) {
                    row.push(this.renderButton(template.buttons[i + j], theme));
                }
                keyboard.inline_keyboard.push(row);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (template.quick_actions) {
            const quickRow = template.quick_actions.map(action => 
                this.renderButton(action, theme)
            );
            keyboard.inline_keyboard.push(quickRow);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if (template.examples) {
            template.examples.forEach(example => {
                keyboard.inline_keyboard.push([{
                    text: `üí° ${example.text}`,
                    callback_data: `eva:example:${example.inn || example.callback_data}`
                }]);
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if (template.navigation) {
            const navRow = [];
            if (template.navigation.back) {
                navRow.push(this.renderButton(template.navigation.back, theme));
            }
            if (template.navigation.home) {
                navRow.push(this.renderButton(template.navigation.home, theme));
            }
            if (navRow.length > 0) {
                keyboard.inline_keyboard.push(navRow);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º footer
        if (template.footer && template.footer.buttons) {
            const footerRow = template.footer.buttons.map(button => 
                this.renderButton(button, theme)
            );
            keyboard.inline_keyboard.push(footerRow);
        }

        return keyboard;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–∫–∏
    renderButton(button, theme) {
        let text = button.text;

        // –î–æ–±–∞–≤–ª—è–µ–º badge –µ—Å–ª–∏ –µ—Å—Ç—å
        if (button.badge) {
            text += ` üî•`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        if (button.type === 'switch') {
            text += button.current_value ? ' ‚úÖ' : ' ‚ùå';
        } else if (button.type === 'toggle') {
            text += ` (${button.current_value})`;
        }

        return {
            text: text,
            callback_data: button.callback_data
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
    createDynamicMenu(userId, config) {
        const menuId = this.generateId();
        this.addMenuTemplate(menuId, config);
        return this.renderMenu(menuId, userId);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    async updateMenuWithAnimation(userId, templateId, variables = {}, animationType = 'fade') {
        const menu = this.renderMenu(templateId, userId, variables);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏
        if (animationType === 'loading') {
            menu.text = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...\n\n' + menu.text;
        } else if (animationType === 'success') {
            menu.text = '‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n' + menu.text;
        } else if (animationType === 'error') {
            menu.text = '‚ùå –û—à–∏–±–∫–∞!\n\n' + menu.text;
        }

        return menu;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
    createCarousel(items, currentIndex = 0) {
        const item = items[currentIndex];
        const totalItems = items.length;
        
        const navigation = [];
        
        if (currentIndex > 0) {
            navigation.push({
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: `eva:carousel:prev:${currentIndex - 1}`
            });
        }
        
        navigation.push({
            text: `${currentIndex + 1}/${totalItems}`,
            callback_data: 'eva:carousel:info'
        });
        
        if (currentIndex < totalItems - 1) {
            navigation.push({
                text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è',
                callback_data: `eva:carousel:next:${currentIndex + 1}`
            });
        }

        return {
            text: item.text || item.title,
            reply_markup: {
                inline_keyboard: [
                    item.buttons || [],
                    navigation
                ]
            },
            parse_mode: 'Markdown'
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
    createForm(formConfig) {
        const fields = formConfig.fields.map((field, index) => {
            let fieldText = `${index + 1}. **${field.label}**`;
            
            if (field.required) {
                fieldText += ' *';
            }
            
            if (field.description) {
                fieldText += `\n   _${field.description}_`;
            }
            
            if (field.current_value) {
                fieldText += `\n   üí° –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${field.current_value}`;
            }
            
            return fieldText;
        }).join('\n\n');

        const buttons = formConfig.fields.map((field, index) => [{
            text: `‚úèÔ∏è ${field.label}`,
            callback_data: `eva:form:field:${index}`
        }]);

        buttons.push([
            { text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'eva:form:save' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'eva:form:cancel' }
        ]);

        return {
            text: `üìù **${formConfig.title}**\n\n${fields}`,
            reply_markup: { inline_keyboard: buttons },
            parse_mode: 'Markdown'
        };
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserSession(userId) {
        if (!this.userSessions.has(userId)) {
            this.userSessions.set(userId, {
                theme: 'light',
                language: 'ru',
                animations: true,
                last_menu: null,
                menu_history: [],
                preferences: {}
            });
        }
        return this.userSessions.get(userId);
    }

    updateUserSession(userId, updates) {
        const session = this.getUserSession(userId);
        Object.assign(session, updates);
        this.userSessions.set(userId, session);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    formatText(text, format = 'markdown') {
        if (format === 'markdown') {
            return text
                .replace(/\*\*(.*?)\*\*/g, '**$1**')
                .replace(/\*(.*?)\*/g, '_$1_')
                .replace(/`(.*?)`/g, '`$1`');
        }
        return text;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    createNotification(type, title, message, buttons = []) {
        const typeEmojis = {
            info: '‚ÑπÔ∏è',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå'
        };

        const emoji = typeEmojis[type] || '‚ÑπÔ∏è';
        
        return {
            text: `${emoji} **${title}**\n\n${message}`,
            reply_markup: buttons.length > 0 ? { inline_keyboard: [buttons] } : undefined,
            parse_mode: 'Markdown'
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ UI
    getUIStats() {
        return {
            menu_templates: this.menuTemplates.size,
            ui_components: this.uiComponents.size,
            themes: this.themes.size,
            active_sessions: this.userSessions.size
        };
    }
}

module.exports = AdvancedUI;

