// Interactive Handlers for Enhanced UI System
// Specialized handlers for different consultation types and actions

class InteractiveHandlers {
    constructor(bot, uiSystem, assistantTools) {
        this.bot = bot;
        this.uiSystem = uiSystem;
        this.assistantTools = assistantTools;
        this.activeConsultations = new Map();
        this.documentSessions = new Map();
    }

    // Handle INN check with enhanced feedback
    async handleInnCheck(chatId, inn) {
        try {
            // Show loading message
            const loadingMsg = await this.bot.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏...', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'checks_menu' }]
                    ]
                }
            });

            // Validate INN format
            if (!/^[0-9]{10,12}$/.test(inn)) {
                await this.bot.editMessageText(
                    '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù</b>\n\n–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.\n\nüí° –ü—Ä–∏–º–µ—Ä: 7707083893', {
                    chat_id: chatId,
                    message_id: loadingMsg.message_id,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_inn_form' }],
                            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–∞–º', callback_data: 'checks_menu' }]
                        ]
                    }
                });
                return;
            }

            // Perform INN check using assistant tools
            let result;
            if (this.assistantTools && typeof this.assistantTools.checkCompanyInn === 'function') {
                result = await this.assistantTools.checkCompanyInn(inn);
            } else {
                result = {
                    error: '–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
                };
            }

            // Format result message
            let resultText;
            let keyboard;

            if (result.error) {
                resultText = `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù</b>\n\n${result.error}`;
                if (result.suggestion) {
                    resultText += `\n\nüí° ${result.suggestion}`;
                }
                keyboard = [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_inn_form' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–∞–º', callback_data: 'checks_menu' }]
                ];
            } else {
                resultText = `‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n`;
                resultText += `üè¢ <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> ${result.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
                resultText += `üìç <b>–ê–¥—Ä–µ—Å:</b> ${result.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
                resultText += `üë§ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> ${result.director || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
                resultText += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${result.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n`;
                resultText += `üí∞ <b>–£—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª:</b> ${result.capital || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
                
                if (result.risks && result.risks.length > 0) {
                    resultText += `\n‚ö†Ô∏è <b>–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:</b>\n`;
                    result.risks.forEach(risk => {
                        resultText += `‚Ä¢ ${risk}\n`;
                    });
                }

                keyboard = [
                    [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: `detailed_report_${inn}` }],
                    [{ text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é', callback_data: 'check_inn_form' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–∞–º', callback_data: 'checks_menu' }]
                ];
            }

            // Update message with results
            await this.bot.editMessageText(resultText, {
                chat_id: chatId,
                message_id: loadingMsg.message_id,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });

        } catch (error) {
            console.error('INN check error:', error);
            await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_inn_form' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
                    ]
                }
            });
        }
    }

    // Handle specialized consultation
    async handleSpecializedConsultation(chatId, userId, type) {
        const consultationTypes = {
            corporate: {
                title: 'üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ',
                description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Ä–∞–º, —Å–¥–µ–ª–∫–∞–º M&A.',
                examples: [
                    '–°–æ–∑–¥–∞–Ω–∏–µ –û–û–û –∏–ª–∏ –ê–û',
                    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã',
                    '–°–¥–µ–ª–∫–∏ —Å–ª–∏—è–Ω–∏—è –∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è',
                    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
                ]
            },
            labor: {
                title: 'üë• –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
                description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç—Ä—É–¥–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º, —É–≤–æ–ª—å–Ω–µ–Ω–∏—è–º, —Ç—Ä—É–¥–æ–≤—ã–º —Å–ø–æ—Ä–∞–º, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.',
                examples: [
                    '–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
                    '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã',
                    '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
                    '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã–µ –≤–∑—ã—Å–∫–∞–Ω–∏—è'
                ]
            },
            civil: {
                title: 'üè† –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ',
                description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é, –¥–æ–≥–æ–≤–æ—Ä–∞–º, –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.',
                examples: [
                    '–ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                    '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã',
                    '–î–æ–≥–æ–≤–æ—Ä–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                    '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π'
                ]
            },
            tax: {
                title: 'üí∞ –ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
                description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—é, –Ω–∞–ª–æ–≥–æ–≤—ã–º —Å–ø–æ—Ä–∞–º, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤.',
                examples: [
                    '–ù–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏',
                    '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤',
                    '–ù–∞–ª–æ–≥–æ–≤—ã–µ —Å–ø–æ—Ä—ã',
                    '–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
                ]
            }
        };

        const consultation = consultationTypes[type];
        if (!consultation) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
            return;
        }

        const text = `${consultation.title}\n\n${consultation.description}\n\nüìã <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n${consultation.examples.map(ex => `‚Ä¢ ${ex}`).join('\n')}\n\nüí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:`;

        await this.bot.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º', callback_data: 'consultation_menu' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
                ]
            }
        });

        // Set consultation context
        this.activeConsultations.set(userId, {
            type: type,
            title: consultation.title,
            startTime: Date.now()
        });
    }

    // Handle urgent consultation
    async handleUrgentConsultation(chatId, userId) {
        const text = `üö® <b>–°—Ä–æ—á–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>

‚ö° –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.

üìû <b>–ö–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è:</b>
‚Ä¢ –°—É–¥–µ–±–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä—ã
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º

‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –¥–æ 5 –º–∏–Ω—É—Ç

üí¨ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:`;

        await this.bot.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º', callback_data: 'contact_lawyer' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º', callback_data: 'consultation_menu' }]
                ]
            }
        });

        // Set urgent consultation flag
        this.activeConsultations.set(userId, {
            type: 'urgent',
            title: '–°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            priority: 'high',
            startTime: Date.now()
        });
    }

    // Handle contract analysis start
    async handleContractAnalysisStart(chatId, userId) {
        const text = `üìã <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞</b>

üîç <b>–ß—Ç–æ —è –ø—Ä–æ–≤–µ—Ä—é:</b>
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è

üìÑ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ DOCX —Ñ–∞–π–ª—ã
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:`;

        await this.bot.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞', callback_data: 'contract_example' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º', callback_data: 'documents_menu' }]
                ]
            }
        });

        // Set document session
        this.documentSessions.set(userId, {
            type: 'contract_analysis',
            startTime: Date.now()
        });
    }

    // Handle document creation start
    async handleDocumentCreationStart(chatId, userId) {
        const menuData = this.uiSystem.getDocumentCreationWizard(userId);
        
        await this.bot.sendMessage(chatId, menuData.text, {
            parse_mode: 'HTML',
            reply_markup: menuData.reply_markup
        });
    }

    // Handle consultation start
    async handleConsultationStart(chatId, userId) {
        const text = `üí¨ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>

–Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±—ã–º –æ–±–ª–∞—Å—Ç—è–º –ø—Ä–∞–≤–∞.

üìù <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ:</b>
‚Ä¢ –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å
‚Ä¢ –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å
‚Ä¢ –°—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã

üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.

üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:`;

        await this.bot.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_corporate' }],
                    [{ text: 'üë• –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_labor' }],
                    [{ text: 'üè† –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_civil' }],
                    [{ text: 'üí∞ –ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', callback_data: 'consult_tax' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'consultation_menu' }]
                ]
            }
        });
    }

    // Handle INN input mode
    async handleInnInputMode(chatId, userId) {
        const text = `üîç <b>–í–≤–æ–¥ –ò–ù–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

üìù –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –ò–ù–ù —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞: 7707083893
‚Ä¢ –ò–ù–ù –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è: 123456789012

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤.`;

        await this.bot.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –ü—Ä–∏–º–µ—Ä: 7707083893', callback_data: 'inn_example' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'check_inn_form' }]
                ]
            }
        });

        // Set input mode
        this.uiSystem.updateUserState(userId, {
            inputMode: 'inn_check',
            inputStartTime: Date.now()
        });
    }

    // Get active consultation
    getActiveConsultation(userId) {
        return this.activeConsultations.get(userId);
    }

    // Clear consultation
    clearConsultation(userId) {
        this.activeConsultations.delete(userId);
    }

    // Get document session
    getDocumentSession(userId) {
        return this.documentSessions.get(userId);
    }

    // Clear document session
    clearDocumentSession(userId) {
        this.documentSessions.delete(userId);
    }

    // Check if user is in input mode
    isInInputMode(userId, mode) {
        const userState = this.uiSystem.getUserState(userId);
        return userState.inputMode === mode;
    }

    // Clear input mode
    clearInputMode(userId) {
        this.uiSystem.updateUserState(userId, {
            inputMode: null,
            inputStartTime: null
        });
    }
}

module.exports = InteractiveHandlers;

