/**
 * Action handlers for Eva Lawyer Bot
 * Handles all ACT:* callback queries
 */

const { forceReply } = require('./menus');

/**
 * Handle contract-related actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleContractAction(action, chatId, messageId, context) {
  switch (action) {
    case 'UPLOAD':
      return {
        type: 'force_reply',
        text: 'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:',
        reply_markup: forceReply('–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª...', 'contract')
      };
      
    case 'ANALYZE':
      if (!context.lastDocument) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_CONTRACT_REVIEW',
        data: context.lastDocument
      };
      
    case 'RISKTABLE':
      if (!context.lastDocument) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_CONTRACT_RISKS',
        mode: 'table',
        data: context.lastDocument
      };
      
    case 'PROTOCOL':
      if (!context.lastDocument) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_PROTOCOL_DRAFT',
        data: context.lastDocument
      };
      
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º.'
      };
  }
}

/**
 * Handle KYC (counterparty) actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleKycAction(action, chatId, messageId, context) {
  switch (action) {
    case 'INPUT_INN':
      return {
        type: 'force_reply',
        text: 'üìù –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):',
        reply_markup: forceReply('–ù–∞–ø—Ä–∏–º–µ—Ä: 7707083893', 'kyc:SCORING_FULL')
      };
      
    case 'SCORING':
      if (!context.lastInn) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_COUNTERPARTY_SCORING',
        mode: 'full',
        inn: context.lastInn
      };
      
    case 'CHECKLIST':
      if (!context.lastInn) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_COUNTERPARTY_SCORING',
        mode: 'checklist',
        inn: context.lastInn
      };
      
    case 'RED_FLAGS':
      if (!context.lastInn) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_COUNTERPARTY_SCORING',
        mode: 'flags',
        inn: context.lastInn
      };
      
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º.'
      };
  }
}

/**
 * Handle letter-related actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleLetterAction(action, chatId, messageId, context) {
  switch (action) {
    case 'UPLOAD':
      return {
        type: 'force_reply',
        text: 'üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å:',
        reply_markup: forceReply('–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞...', 'letter')
      };
      
    case 'SKELETON':
      if (!context.lastLetter) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_REPLY_LETTER',
        mode: 'skeleton',
        data: context.lastLetter
      };
      
    case 'FULL':
      if (!context.lastLetter) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_REPLY_LETTER',
        mode: 'full',
        data: context.lastLetter
      };
      
    case 'LEGAL_OPINION':
      if (!context.lastLetter) {
        return {
          type: 'message',
          text: '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.'
        };
      }
      return {
        type: 'prompt',
        prompt: 'PROMPT_LEGAL_OPINION',
        data: context.lastLetter
      };
      
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–∏—Å—å–º–æ–º.'
      };
  }
}

/**
 * Handle template actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleTemplateAction(action, chatId, messageId, context) {
  const templates = {
    'SUPPLY': 'supply',
    'SPEC': 'spec',
    'PROTOCOL': 'protocol',
    'INVOICE': 'invoice'
  };
  
  const templateType = templates[action];
  if (templateType) {
    return {
      type: 'prompt',
      prompt: 'PROMPT_DOC_TEMPLATE',
      templateType: templateType
    };
  }
  
  return {
    type: 'message',
    text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞.'
  };
}

/**
 * Handle utility actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleUtilAction(action, chatId, messageId, context) {
  switch (action) {
    case 'RISKS_TABLE':
      return {
        type: 'prompt',
        prompt: 'PROMPT_CONTRACT_RISKS',
        mode: 'table'
      };
      
    case 'WORDING_TRIPLE':
      return {
        type: 'prompt',
        prompt: 'PROMPT_WORDING_TRIPLE'
      };
      
    case 'DISPUTE_PREP':
      return {
        type: 'prompt',
        prompt: 'PROMPT_DISPUTE_PREP'
      };
      
    case 'LEGAL_OPINION':
      return {
        type: 'prompt',
        prompt: 'PROMPT_LEGAL_OPINION'
      };
      
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞.'
      };
  }
}

/**
 * Handle settings actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleSettingsAction(action, chatId, messageId, context) {
  switch (action) {
    case 'LANG':
      return {
        type: 'message',
        text: 'üåê –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä —è–∑—ã–∫–∞.'
      };
      
    case 'FORMAT':
      return {
        type: 'message',
        text: 'üßæ –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: Markdown (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã.'
      };
      
    case 'NOTIF':
      return {
        type: 'message',
        text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n\n–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
      };
      
    case 'CLEAR':
      return {
        type: 'clear_context',
        text: 'üóë –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É!'
      };
      
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.'
      };
  }
}

/**
 * Handle FAQ actions
 * @param {string} action - Action identifier
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleFaqAction(action, chatId, messageId, context) {
  switch (action) {
    case 'COMMON':
      return {
        type: 'message',
        text: `‚ùî **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã**

**Q: –ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?**
A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å" –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ–≥–æ–≤–æ—Ä" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É.

**Q: –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**
A: PDF, DOCX, TXT —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë, –∞ —Ç–∞–∫–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR.

**Q: –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞?**
A: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç" –∏ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù (10-12 —Ü–∏—Ñ—Ä).

**Q: –ú–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?**
A: –î–∞, –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª—ã.`
      };
      
    case 'HOW':
      return {
        type: 'message',
        text: `‚öôÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Eva Lawyer Bot**

–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç GPT-4 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ DaData
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–∏—Å—å–º–∞
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ OpenAI GPT-4 Assistant API
‚Ä¢ DaData API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π
‚Ä¢ OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`
      };
      
    case 'PRIVACY':
      return {
        type: 'message',
        text: `üîê **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å**

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º

**–ß—Ç–æ –º—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º:**
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –õ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
‚Ä¢ –£–¥–∞–ª—è–π—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π`
      };
      
    case 'SUPPORT':
      return {
        type: 'message',
        text: `üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ Telegram: @support_eva_bot
‚Ä¢ Email: support@eva-lawyer.ru

**–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ:**
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏

**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**
‚Ä¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã

–ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏.`
      };
      
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª FAQ.'
      };
  }
}

/**
 * Main action handler
 * @param {string} callbackData - Callback data from button
 * @param {number} chatId - Chat ID
 * @param {number} messageId - Message ID
 * @param {Object} context - User context
 * @returns {Promise<Object>} - Action result
 */
async function handleAction(callbackData, chatId, messageId, context = {}) {
  const parts = callbackData.split(':');
  if (parts.length < 3 || parts[0] !== 'ACT') {
    return {
      type: 'message',
      text: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è.'
    };
  }
  
  const category = parts[1];
  const action = parts[2];
  
  switch (category) {
    case 'CONTRACT':
      return await handleContractAction(action, chatId, messageId, context);
    case 'KYC':
      return await handleKycAction(action, chatId, messageId, context);
    case 'LETTER':
      return await handleLetterAction(action, chatId, messageId, context);
    case 'TPL':
      return await handleTemplateAction(action, chatId, messageId, context);
    case 'UTIL':
      return await handleUtilAction(action, chatId, messageId, context);
    case 'SET':
      return await handleSettingsAction(action, chatId, messageId, context);
    case 'FAQ':
      return await handleFaqAction(action, chatId, messageId, context);
    case 'CASES':
    case 'APPEAL':
      return {
        type: 'message',
        text: 'üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.'
      };
    default:
      return {
        type: 'message',
        text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—è.'
      };
  }
}

// Export functions
module.exports = {
  handleAction
};

