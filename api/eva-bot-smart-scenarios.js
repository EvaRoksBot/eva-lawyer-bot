// Eva Lawyer Bot - Smart Scenarios v6.2
// –£–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∫—Ä–æ—Å—Å-—Å–≤—è–∑—è–º–∏ –Ω–∞ –±–∞–∑–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Manus

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const axios = require('axios');

class EvaLawyerBotSmartScenarios {
    constructor() {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            telegramToken: process.env.TELEGRAM_BOT_TOKEN,
            openaiApiKey: process.env.OPENAI_API_KEY,
            dadataApiKey: process.env.DADATA_API_KEY,
            dadataSecret: process.env.DADATA_SECRET,
            model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
            maxTokens: 2000,
            temperature: 0.3
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.bot = new TelegramBot(this.config.telegramToken, { polling: true });
        this.openai = new OpenAI({ apiKey: this.config.openaiApiKey });
        
        // –£–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –∫—Ä–æ—Å—Å-—Å–≤—è–∑—è–º–∏
        this.userSessions = new Map();
        this.crossLinkData = new Map(); // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–æ—Å—Å-—Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        
        // –ö—ç—à –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ –ò–ù–ù
        this.innCache = new Map();
        
        // –ú–µ—Ç—Ä–∏–∫–∏ —É–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        this.smartMetrics = {
            crossLinkUsage: {},
            innAutoFills: 0,
            riskToProtocol: 0,
            contractorScoring: 0,
            documentChains: 0
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initializeBot();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    async initializeBot() {
        console.log('üöÄ Initializing Eva Lawyer Bot Smart Scenarios...');
        
        this.setupHandlers();
        await this.testConnections();
        
        console.log('‚úÖ Eva Lawyer Bot Smart Scenarios v6.2 is ready!');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    async testConnections() {
        try {
            // –¢–µ—Å—Ç GPT API
            await this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{ role: 'user', content: 'Test' }],
                max_tokens: 5
            });
            console.log('‚úÖ GPT API connection successful');
        } catch (error) {
            console.log('‚ö†Ô∏è GPT API connection issue:', error.message);
        }

        // –¢–µ—Å—Ç DaData API (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if (this.config.dadataApiKey) {
            try {
                await this.testDaDataConnection();
                console.log('‚úÖ DaData API connection successful');
            } catch (error) {
                console.log('‚ö†Ô∏è DaData API connection issue:', error.message);
            }
        }
    }

    // –¢–µ—Å—Ç DaData API
    async testDaDataConnection() {
        const response = await axios.post(
            'https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party',
            { query: '7707083893' },
            {
                headers: {
                    'Authorization': `Token ${this.config.dadataApiKey}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        return response.data;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, (msg) => this.handleStart(msg));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bot.on('callback_query', (query) => this.handleCallbackQuery(query));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => this.handleMessage(msg));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        this.bot.on('document', (msg) => this.handleDocument(msg));
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å —É–º–Ω—ã–º –º–µ–Ω—é
    async handleStart(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        this.initializeUserSession(userId, userName);
        
        const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!

üß† **Eva Lawyer Bot Smart Scenarios v6.2**

–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∫—Ä–æ—Å—Å-—Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏:

üîó **–£–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ –ò–ù–ù
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤ ‚Üí –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π
‚Ä¢ –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ ‚Üí –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ ‚Üí –û—Ç–≤–µ—Ç–Ω—ã–µ –ø–∏—Å—å–º–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        const keyboard = this.createSmartMainMenu();
        
        await this.bot.sendMessage(chatId, welcomeMessage, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    createSmartMainMenu() {
        return [
            [
                { text: 'üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ –ò–ù–ù', callback_data: 'smart_inn_lookup' },
                { text: 'üìä –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', callback_data: 'smart_contractor_score' }
            ],
            [
                { text: 'üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'smart_contract_analysis' },
                { text: '‚öñÔ∏è –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'smart_risk_table' }
            ],
            [
                { text: 'üßæ –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: 'smart_protocol_disputes' },
                { text: 'üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é', callback_data: 'smart_claim_reply' }
            ],
            [
                { text: '‚öñÔ∏è –Æ—Ä. –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'smart_legal_conclusion' },
                { text: 'üìö –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏', callback_data: 'smart_practice_analysis' }
            ],
            [
                { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'user_profile' },
                { text: 'üîó –ö—Ä–æ—Å—Å-—Å–≤—è–∑–∏', callback_data: 'cross_links_status' }
            ]
        ];
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    async handleCallbackQuery(query) {
        const chatId = query.message.chat.id;
        const userId = query.from.id;
        const data = query.data;
        
        await this.bot.answerCallbackQuery(query.id);
        
        // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —É–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        switch (data) {
            case 'smart_inn_lookup':
                await this.handleINNLookup(chatId, userId);
                break;
            case 'smart_contractor_score':
                await this.handleContractorScoring(chatId, userId);
                break;
            case 'smart_contract_analysis':
                await this.handleContractAnalysis(chatId, userId);
                break;
            case 'smart_risk_table':
                await this.handleRiskTable(chatId, userId);
                break;
            case 'smart_protocol_disputes':
                await this.handleProtocolDisputes(chatId, userId);
                break;
            case 'smart_claim_reply':
                await this.handleClaimReply(chatId, userId);
                break;
            case 'smart_legal_conclusion':
                await this.handleLegalConclusion(chatId, userId);
                break;
            case 'smart_practice_analysis':
                await this.handlePracticeAnalysis(chatId, userId);
                break;
            case 'cross_links_status':
                await this.handleCrossLinksStatus(chatId, userId);
                break;
            case 'back_to_main':
                await this.handleBackToMain(chatId, userId);
                break;
            default:
                if (data.startsWith('use_inn_')) {
                    await this.handleUseINNData(chatId, userId, data);
                } else if (data.startsWith('risk_to_')) {
                    await this.handleRiskCrossLink(chatId, userId, data);
                }
        }
    }

    // A. –£–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ –ò–ù–ù (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)
    async handleINNLookup(chatId, userId) {
        const message = `üè¢ **–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ –ò–ù–ù**

–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):

üîç **–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
‚Ä¢ –û–ì–†–ù, –ö–ü–ü, –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –û–ö–í–≠–î (–≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
‚Ä¢ –°—Ç–∞—Ç—É—Å –≤ –§–ù–°

üì• **–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤:**
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π
‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é

–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:`;

        const keyboard = [
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ];
        
        await this.bot.editMessageText(message, {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ò–ù–ù
        const session = this.userSessions.get(userId);
        if (session) {
            session.waitingFor = 'inn_input';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù
    async processINNInput(chatId, userId, inn) {
        const loadingMessage = await this.bot.sendMessage(chatId,
            'üîç **–ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù...**\n\n' +
            '‚è≥ –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –§–ù–°\n' +
            'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n' +
            'üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...',
            { parse_mode: 'Markdown' }
        );

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
            if (!this.validateINN(inn)) {
                await this.bot.editMessageText(
                    '‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù**\n\n–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
                    {
                        chat_id: chatId,
                        message_id: loadingMessage.message_id,
                        parse_mode: 'Markdown'
                    }
                );
                return;
            }

            // –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ
            let companyData = this.innCache.get(inn);
            
            if (!companyData) {
                // –ó–∞–ø—Ä–æ—Å –∫ DaData API
                companyData = await this.fetchCompanyByINN(inn);
                
                if (companyData) {
                    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    this.innCache.set(inn, companyData);
                }
            }

            if (!companyData) {
                await this.bot.editMessageText(
                    '‚ùå **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    {
                        chat_id: chatId,
                        message_id: loadingMessage.message_id,
                        parse_mode: 'Markdown'
                    }
                );
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–æ—Å—Å-—Å–≤—è–∑–µ–π
            this.setCrossLinkData(userId, 'company_requisites', companyData);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            const resultMessage = `‚úÖ **–ù–∞–π–¥–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:**

üè¢ **${companyData.name}**

üìã **–†–µ–∫–≤–∏–∑–∏—Ç—ã:**
‚Ä¢ –ò–ù–ù: ${companyData.inn}
‚Ä¢ –ö–ü–ü: ${companyData.kpp || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –û–ì–†–ù: ${companyData.ogrn}
‚Ä¢ –ê–¥—Ä–µ—Å: ${companyData.address}
‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${companyData.director || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –û–ö–í–≠–î: ${companyData.okved || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${companyData.status || '–ê–∫—Ç–∏–≤–Ω–∞—è'}

üì• **–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:**`;

            const keyboard = [
                [
                    { text: 'üìÑ –í—Å—Ç–∞–≤–∏—Ç—å –≤ –¥–æ–≥–æ–≤–æ—Ä', callback_data: 'use_inn_contract' },
                    { text: 'üí≥ –í—Å—Ç–∞–≤–∏—Ç—å –≤ —Å—á–µ—Ç', callback_data: 'use_inn_invoice' }
                ],
                [
                    { text: 'üßæ –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: 'use_inn_protocol' },
                    { text: 'üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é', callback_data: 'use_inn_claim' }
                ],
                [
                    { text: 'üìä –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', callback_data: 'use_inn_scoring' },
                    { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }
                ]
            ];

            await this.bot.editMessageText(resultMessage, {
                chat_id: chatId,
                message_id: loadingMessage.message_id,
                reply_markup: { inline_keyboard: keyboard },
                parse_mode: 'Markdown'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.smartMetrics.innAutoFills++;

        } catch (error) {
            console.error('Error processing INN:', error);
            await this.bot.editMessageText(
                '‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                {
                    chat_id: chatId,
                    message_id: loadingMessage.message_id,
                    parse_mode: 'Markdown'
                }
            );
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
    validateINN(inn) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        const cleanINN = inn.replace(/\D/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (10 –¥–ª—è —é—Ä–ª–∏—Ü, 12 –¥–ª—è –ò–ü)
        if (cleanINN.length !== 10 && cleanINN.length !== 12) {
            return false;
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä –ò–ù–ù
        return true;
    }

    // –ó–∞–ø—Ä–æ—Å –∫ DaData API
    async fetchCompanyByINN(inn) {
        if (!this.config.dadataApiKey) {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return {
                name: `–û–û–û "–¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø" (–ò–ù–ù: ${inn})`,
                inn: inn,
                kpp: '770701001',
                ogrn: '1027700000000',
                address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
                director: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
                okved: '62.01 –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è',
                status: '–ê–∫—Ç–∏–≤–Ω–∞—è'
            };
        }

        try {
            const response = await axios.post(
                'https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party',
                { query: inn },
                {
                    headers: {
                        'Authorization': `Token ${this.config.dadataApiKey}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            if (response.data.suggestions && response.data.suggestions.length > 0) {
                const company = response.data.suggestions[0];
                return {
                    name: company.value,
                    inn: company.data.inn,
                    kpp: company.data.kpp,
                    ogrn: company.data.ogrn,
                    address: company.data.address?.value,
                    director: company.data.management?.name,
                    okved: company.data.okved,
                    status: company.data.state?.status
                };
            }
            
            return null;
        } catch (error) {
            console.error('DaData API error:', error);
            return null;
        }
    }

    // B. –£–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ ‚Üí –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏
    async handleContractorScoring(chatId, userId) {
        const message = `üìä **–°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (KYC/AML)**

–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

üîç **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:**
‚Ä¢ –§–ù–° (—Å—Ç–∞—Ç—É—Å, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏)
‚Ä¢ –§–µ–¥—Ä–µ—Å—É—Ä—Å (–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ)
‚Ä¢ –ö–ê–î-–ê—Ä–±–∏—Ç—Ä (—Å—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞)
‚Ä¢ –§–°–°–ü (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)
‚Ä¢ –†–µ–µ—Å—Ç—Ä –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–≥–æ–≤–æ—Ä

–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞:`;

        const keyboard = [
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ];
        
        await this.bot.sendMessage(chatId, message, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
        
        const session = this.userSessions.get(userId);
        if (session) {
            session.waitingFor = 'scoring_inn_input';
        }
    }

    // C. –£–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤ ‚Üí –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π
    async handleRiskTable(chatId, userId) {
        const message = `‚öñÔ∏è **–¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞**

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤:

üìÑ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ Word —Ñ–∞–π–ª—ã (.doc, .docx)
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)

üîç **–ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é

üîó **–£–º–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:**
‚Ä¢ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é
‚Ä¢ –ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞:`;

        const keyboard = [
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ];
        
        await this.bot.sendMessage(chatId, message, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
        
        const session = this.userSessions.get(userId);
        if (session) {
            session.waitingFor = 'contract_document';
        }
    }

    // D. –£–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π (–∏–∑ —Ä–∏—Å–∫–æ–≤)
    async handleProtocolDisputes(chatId, userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã —Ä–∏—Å–∫–æ–≤
        const riskData = this.getCrossLinkData(userId, 'risk_table');
        
        if (!riskData) {
            const message = `üßæ **–ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π**

–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π –Ω—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞.

üîó **–£–º–Ω–∞—è —Å–≤—è–∑—å:** –ü—Ä–æ—Ç–æ–∫–æ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤.

–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞:`;

            const keyboard = [
                [{ text: '‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'smart_risk_table' }],
                [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
            ];
            
            await this.bot.sendMessage(chatId, message, {
                reply_markup: { inline_keyboard: keyboard },
                parse_mode: 'Markdown'
            });
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–æ–≤
        await this.generateProtocolFromRisks(chatId, userId, riskData);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleMessage(msg) {
        if (msg.text && !msg.text.startsWith('/')) {
            const chatId = msg.chat.id;
            const userId = msg.from.id;
            const session = this.userSessions.get(userId);
            
            if (!session) {
                await this.handleStart(msg);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
            switch (session.waitingFor) {
                case 'inn_input':
                    await this.processINNInput(chatId, userId, msg.text);
                    session.waitingFor = null;
                    break;
                case 'scoring_inn_input':
                    await this.processContractorScoring(chatId, userId, msg.text);
                    session.waitingFor = null;
                    break;
                default:
                    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await this.processGeneralQuery(chatId, userId, msg.text);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async handleDocument(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const session = this.userSessions.get(userId);
        
        if (session?.waitingFor === 'contract_document') {
            await this.processContractDocument(chatId, userId, msg.document);
            session.waitingFor = null;
        } else {
            await this.bot.sendMessage(chatId, 
                'üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', callback_data: 'smart_risk_table' }],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
                        ]
                    }
                }
            );
        }
    }

    // –ö—Ä–æ—Å—Å-—Å–≤—è–∑–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    setCrossLinkData(userId, key, data) {
        if (!this.crossLinkData.has(userId)) {
            this.crossLinkData.set(userId, new Map());
        }
        this.crossLinkData.get(userId).set(key, {
            data: data,
            timestamp: Date.now()
        });
    }

    // –ö—Ä–æ—Å—Å-—Å–≤—è–∑–∏: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    getCrossLinkData(userId, key) {
        const userData = this.crossLinkData.get(userId);
        if (!userData) return null;
        
        const item = userData.get(key);
        if (!item) return null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 1 —á–∞—Å)
        if (Date.now() - item.timestamp > 3600000) {
            userData.delete(key);
            return null;
        }
        
        return item.data;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    initializeUserSession(userId, userName) {
        if (!this.userSessions.has(userId)) {
            this.userSessions.set(userId, {
                userId,
                userName,
                startTime: Date.now(),
                lastActivity: Date.now(),
                waitingFor: null,
                smartScenarios: {
                    innLookups: 0,
                    contractorScores: 0,
                    riskAnalyses: 0,
                    crossLinks: 0
                }
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async handleBackToMain(chatId, userId) {
        const session = this.userSessions.get(userId);
        const userName = session?.userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        session.waitingFor = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
        
        const message = `üß† **Eva Lawyer Bot Smart Scenarios**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${userName}!

–í—ã–±–µ—Ä–∏—Ç–µ —É–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∫—Ä–æ—Å—Å-—Å–≤—è–∑—è–º–∏:`;

        const keyboard = this.createSmartMainMenu();
        
        await this.bot.sendMessage(chatId, message, {
            reply_markup: { inline_keyboard: keyboard },
            parse_mode: 'Markdown'
        });
    }

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    start() {
        console.log('üöÄ Eva Lawyer Bot Smart Scenarios v6.2 started successfully!');
        console.log('üîó Cross-links enabled, INN auto-fill ready, smart scenarios active');
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        setInterval(() => {
            this.cleanupCache();
        }, 3600000); // –ö–∞–∂–¥—ã–π —á–∞—Å
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        setInterval(() => {
            console.log('üìä Smart Metrics:', this.smartMetrics);
        }, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    cleanupCache() {
        const now = Date.now();
        
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ò–ù–ù (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        for (const [inn, data] of this.innCache.entries()) {
            if (now - data.timestamp > 86400000) {
                this.innCache.delete(inn);
            }
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∫—Ä–æ—Å—Å-—Å–≤—è–∑–µ–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        for (const [userId, userData] of this.crossLinkData.entries()) {
            for (const [key, item] of userData.entries()) {
                if (now - item.timestamp > 3600000) {
                    userData.delete(key);
                }
            }
            if (userData.size === 0) {
                this.crossLinkData.delete(userId);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (require.main === module) {
    const bot = new EvaLawyerBotSmartScenarios();
    bot.start();
}

module.exports = EvaLawyerBotSmartScenarios;

