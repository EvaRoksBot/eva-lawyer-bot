const OpenAI = require('openai');
const menus = require('./modules/menus');

// Initialize OpenAI with better error handling
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 30000, // 30 seconds timeout
  maxRetries: 3,  // Retry failed requests
});

// Telegram Bot Token
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// Legal prompts for specialized responses
const LEGAL_PROMPTS = {
  'contract_analysis': {
    name: '–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
    systemPrompt: `–í—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º—É –ø—Ä–∞–≤—É –≤ –†–æ—Å—Å–∏–∏. 

–í–∞—à–∞ –∑–∞–¥–∞—á–∞:
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã –∏ –≤—ã—è–≤–ª—è—Ç—å —Ä–∏—Å–∫–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
- –û–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏–π
- –°—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ø—É–Ω–∫—Ç–∞–º
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫`
  },
  
  'corporate_law': {
    name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ',
    systemPrompt: `–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –≤ –†–æ—Å—Å–∏–∏.

–í–∞—à–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞:
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –û–û–û, –ò–ü, –ê–û
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
- –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã
- –ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞

–û—Ç–≤–µ—á–∞–π—Ç–µ:
- –° —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
- –°–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
- –° –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
- –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –æ —Ä–∏—Å–∫–∞—Ö`
  },
  
  'labor_law': {
    name: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
    systemPrompt: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏.

–í–∞—à–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:
- –¢—Ä—É–¥–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã –∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
- –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
- –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –ü—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
- –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞

–î–∞–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã:
- –°–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¢–ö –†–§
- –° –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
- –° —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ä–æ–∫–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏—è
- –° –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`
  },
  
  'real_estate': {
    name: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
    systemPrompt: `–í—ã - —é—Ä–∏—Å—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –†–æ—Å—Å–∏–∏.

–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
- –ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –ò–ø–æ—Ç–µ–∫–∞ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ
- –ê—Ä–µ–Ω–¥–∞ –∏ –Ω–∞–π–º
- –ü—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è
- –ó–µ–º–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ

–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ:
- –° —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
- –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –° —Ä–∞—Å—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤ –∏ —Å–±–æ—Ä–æ–≤
- –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Ä–∏—Å–∫–∞—Ö`
  },
  
  'family_law': {
    name: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ',
    systemPrompt: `–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø—Ä–∞–≤—É –†–æ—Å—Å–∏–∏.

–í–∞—à–∏ –æ–±–ª–∞—Å—Ç–∏:
- –†–∞–∑–≤–æ–¥ –∏ —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞
- –ê–ª–∏–º–µ–Ω—Ç—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
- –û–ø–µ–∫–∞ –∏ –ø–æ–ø–µ—á–∏—Ç–µ–ª—å—Å—Ç–≤–æ
- –£—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ
- –ë—Ä–∞—á–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã

–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ:
- –î–µ–ª–∏–∫–∞—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –° —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–µ—Ç–µ–π
- –°–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –°–ö –†–§
- –° –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏`
  },
  
  'general': {
    name: '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
    systemPrompt: `–í—ã - Eva, AI-–ø–æ–º–æ—â–Ω–∏–∫ —é—Ä–∏—Å—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ.

–í–∞—à–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –î–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
- –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ —Ä–∏—Å–∫–∞—Ö –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã`
  }
};

// Enhanced error handling for API calls
async function makeAPICall(apiFunction, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await apiFunction();
    } catch (error) {
      console.error(`‚ùå API call attempt ${attempt} failed:`, error.message);
      
      if (attempt === maxRetries) {
        throw error;
      }
      
      // Wait before retry (exponential backoff)
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
}

// Send message to Telegram with retry logic
async function sendMessage(chatId, text, keyboard = null) {
  return makeAPICall(async () => {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: keyboard
      }),
    });
    
    const result = await response.json();
    if (!result.ok) {
      throw new Error(`Telegram API error: ${result.description}`);
    }
    return result;
  });
}

// Edit message with retry logic
async function editMessage(chatId, messageId, text, keyboard = null) {
  return makeAPICall(async () => {
    const response = await fetch(`${TELEGRAM_API_URL}/editMessageText`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: keyboard
      }),
    });
    
    const result = await response.json();
    if (!result.ok) {
      throw new Error(`Telegram edit error: ${result.description}`);
    }
    return result;
  });
}

// Answer callback query
async function answerCallbackQuery(callbackQueryId, text = '') {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text
      }),
    });
    
    return await response.json();
  } catch (error) {
    console.error('‚ùå Answer callback error:', error);
    return null;
  }
}

// Check if text is INN (Russian tax number)
function isINN(text) {
  const innPattern = /^\d{10}$|^\d{12}$/;
  return innPattern.test(text.trim());
}

// Get AI response with enhanced error handling and fallback
async function getAIResponse(message, promptType = 'general') {
  try {
    const prompt = LEGAL_PROMPTS[promptType] || LEGAL_PROMPTS['general'];
    
    console.log(`ü§ñ Getting AI response for prompt type: ${promptType}`);
    
    const response = await makeAPICall(async () => {
      return await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: prompt.systemPrompt
          },
          {
            role: "user",
            content: message
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      });
    });

    return response.choices[0].message.content;
  } catch (error) {
    console.error('‚ùå OpenAI API error:', error);
    
    // Fallback response based on prompt type
    const fallbackResponses = {
      'contract_analysis': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞.',
      'corporate_law': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.',
      'labor_law': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–∏ —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç—Ä—É–¥–æ–≤—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é.',
      'real_estate': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∏–µ–ª—Ç–æ—Ä—É –∏–ª–∏ —é—Ä–∏—Å—Ç—É.',
      'family_law': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø—Ä–∞–≤—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–∏ —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ó–ê–ì–° –∏–ª–∏ –∫ —Å–µ–º–µ–π–Ω–æ–º—É —é—Ä–∏—Å—Ç—É.',
      'general': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ. –ü—Ä–∏ —Å—Ä–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —é—Ä–∏—Å—Ç–æ–º.'
    };
    
    return fallbackResponses[promptType] || fallbackResponses['general'];
  }
}

// Import DaData module
const dadata = require('./modules/dadata');

// Handle counterparty check by INN with enhanced error handling
async function handleCounterpartyCheck(inn) {
  try {
    console.log(`üîç Checking counterparty with INN: ${inn}`);
    
    // Try DaData API first
    const dadataResult = await dadata.checkCounterparty(inn);
    
    if (dadataResult && dadataResult.success) {
      return dadataResult.response;
    }
    
    // Fallback to AI analysis if DaData fails
    console.log('üìù DaData unavailable, using AI fallback');
    const aiResponse = await getAIResponse(
      `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ò–ù–ù ${inn}. –û–±—ä—è—Å–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –∫–∞–∫–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–π.`,
      'general'
    );
    
    return `ü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑ –ò–ù–ù ${inn}</b>\n\n${aiResponse}\n\n<i>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –§–ù–°, –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü.</i>`;
    
  } catch (error) {
    console.error('‚ùå Counterparty check error:', error);
    return `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù ${inn}</b>\n\n–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç –§–ù–° –†–æ—Å—Å–∏–∏\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏`;
  }
}

// Determine prompt type based on message content
function determinePromptType(message) {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('–¥–æ–≥–æ–≤–æ—Ä') || lowerMessage.includes('–∫–æ–Ω—Ç—Ä–∞–∫—Ç') || lowerMessage.includes('—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')) {
    return 'contract_analysis';
  }
  if (lowerMessage.includes('–æ–æ–æ') || lowerMessage.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è') || lowerMessage.includes('–±–∏–∑–Ω–µ—Å') || lowerMessage.includes('–∏–ø')) {
    return 'corporate_law';
  }
  if (lowerMessage.includes('—Ä–∞–±–æ—Ç–∞') || lowerMessage.includes('—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ') || lowerMessage.includes('–∑–∞—Ä–ø–ª–∞—Ç–∞') || lowerMessage.includes('—Ç—Ä—É–¥–æ–≤–æ–π')) {
    return 'labor_law';
  }
  if (lowerMessage.includes('–∫–≤–∞—Ä—Ç–∏—Ä–∞') || lowerMessage.includes('–¥–æ–º') || lowerMessage.includes('–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å') || lowerMessage.includes('–∞—Ä–µ–Ω–¥–∞')) {
    return 'real_estate';
  }
  if (lowerMessage.includes('—Ä–∞–∑–≤–æ–¥') || lowerMessage.includes('–∞–ª–∏–º–µ–Ω—Ç—ã') || lowerMessage.includes('—Å–µ–º—å—è') || lowerMessage.includes('–±—Ä–∞–∫')) {
    return 'family_law';
  }
  
  return 'general';
}

// Main handler function
module.exports = async (req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Telegram-Bot-Api-Secret-Token');

  if (req.method === 'OPTIONS') {
    return res.status(200).json({ ok: true });
  }

  if (req.method === 'GET') {
    return res.status(200).json({
      status: 'ok',
      message: 'Eva Lawyer Bot Enhanced API v2 is running',
      timestamp: new Date().toISOString(),
      features: ['Enhanced Error Handling', 'Retry Logic', 'Fallback Responses', 'Interactive Menus', 'Specialized Prompts', 'INN Checking']
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    console.log('üì® Received update:', JSON.stringify(update, null, 2));

    // Handle callback queries (menu buttons)
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const messageId = callbackQuery.message.message_id;
      const data = callbackQuery.data;

      console.log(`üîò Callback query: ${data}`);

      // Answer the callback query
      await answerCallbackQuery(callbackQuery.id);

      // Handle different callback actions
      try {
        switch (data) {
          case 'contract_analysis':
            await editMessage(chatId, messageId, 
              'üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n\n‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n‚Ä¢ –ó–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
              menus.getBackToMainMenu()
            );
            break;

          case 'counterparty_check':
            await editMessage(chatId, messageId,
              'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä), –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é:\n\n‚Ä¢ –ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n‚Ä¢ –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ',
              menus.getBackToMainMenu()
            );
            break;

          case 'legal_letter':
            await editMessage(chatId, messageId,
              'üì¨ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–∏—Å—å–º–∞</b>\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å:\n\n‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é\n‚Ä¢ –î–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ\n‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
              menus.getBackToMainMenu()
            );
            break;

          case 'templates':
            await editMessage(chatId, messageId,
              'üìë <b>–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:',
              menus.getTemplatesMenu()
            );
            break;

          case 'more_options':
            await editMessage(chatId, messageId,
              '‚ûï <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞:',
              menus.getMoreOptionsMenu()
            );
            break;

          case 'back_to_main':
            await editMessage(chatId, messageId,
              '‚öñÔ∏è <b>Eva Lawyer Bot</b>\n\n–í–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:',
              menus.getMainMenu()
            );
            break;

          // Template options
          case 'contract_template':
            await editMessage(chatId, messageId,
              'üìÑ <b>–®–∞–±–ª–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤</b>\n\n–û–ø–∏—à–∏—Ç–µ —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω (–ø–æ—Å—Ç–∞–≤–∫–∞, —É—Å–ª—É–≥–∏, –∞—Ä–µ–Ω–¥–∞ –∏ —Ç.–¥.), –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.',
              menus.getBackToMainMenu()
            );
            break;

          case 'claim_template':
            await editMessage(chatId, messageId,
              'üìã <b>–®–∞–±–ª–æ–Ω—ã –ø—Ä–µ—Ç–µ–Ω–∑–∏–π</b>\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.',
              menus.getBackToMainMenu()
            );
            break;

          // Legal areas
          case 'corporate_law':
            await editMessage(chatId, messageId,
              'üè¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ</b>\n\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∏–ª–∏ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–∏.',
              menus.getBackToMainMenu()
            );
            break;

          case 'labor_law':
            await editMessage(chatId, messageId,
              'üíº <b>–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ</b>\n\n–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ä—É–¥–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º, —É–≤–æ–ª—å–Ω–µ–Ω–∏—è–º, –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ –ø—Ä–∞–≤–∞–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.',
              menus.getBackToMainMenu()
            );
            break;

          case 'real_estate':
            await editMessage(chatId, messageId,
              'üè† <b>–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</b>\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–µ, –ø—Ä–æ–¥–∞–∂–µ, –∞—Ä–µ–Ω–¥–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –∑–µ–º–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.',
              menus.getBackToMainMenu()
            );
            break;

          case 'family_law':
            await editMessage(chatId, messageId,
              'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ</b>\n\n–í–æ–ø—Ä–æ—Å—ã —Ä–∞–∑–≤–æ–¥–∞, –∞–ª–∏–º–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ–ø–µ–∫–∏ –Ω–∞–¥ –¥–µ—Ç—å–º–∏.',
              menus.getBackToMainMenu()
            );
            break;

          default:
            await editMessage(chatId, messageId,
              '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
              menus.getMainMenu()
            );
        }
      } catch (editError) {
        console.error('‚ùå Error editing message:', editError);
        // Try sending a new message if editing fails
        await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', menus.getMainMenu());
      }

      return res.status(200).json({ ok: true });
    }

    // Handle regular messages
    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const text = message.text || '';
      const userName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      console.log(`üí¨ Processing message from ${userName}: ${text}`);

      // Handle /start command
      if (text === '/start') {
        try {
          await sendMessage(chatId, 
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n\n‚öñÔ∏è <b>Eva Lawyer Bot</b>\n\n–í–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:`,
            menus.getMainMenu()
          );
        } catch (sendError) {
          console.error('‚ùå Error sending start message:', sendError);
          await sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.');
        }
        return res.status(200).json({ ok: true });
      }

      // Check if message is INN
      if (isINN(text)) {
        try {
          const checkResult = await handleCounterpartyCheck(text);
          await sendMessage(chatId, checkResult, menus.getMainMenu());
        } catch (innError) {
          console.error('‚ùå Error checking INN:', innError);
          await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.');
        }
        return res.status(200).json({ ok: true });
      }

      // Handle regular text messages with AI
      try {
        const promptType = determinePromptType(text);
        console.log(`üéØ Determined prompt type: ${promptType}`);
        
        const aiResponse = await getAIResponse(text, promptType);
        await sendMessage(chatId, aiResponse, menus.getMainMenu());
      } catch (aiError) {
        console.error('‚ùå Error getting AI response:', aiError);
        await sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.');
      }

      return res.status(200).json({ ok: true });
    }

    // Unknown update type
    console.log('‚ùì Unknown update type');
    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('‚ùå Handler error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
};

