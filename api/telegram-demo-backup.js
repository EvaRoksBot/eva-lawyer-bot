const OpenAI = require('openai');

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 30000,
  maxRetries: 3,
});

// Demo mode - simulate bot functionality without real Telegram API
const DEMO_MODE = !process.env.TELEGRAM_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN.includes('invalid');

// Legal prompts for specialized responses
const LEGAL_PROMPTS = {
  'contract_analysis': {
    name: '–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
    systemPrompt: `–í—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º—É –ø—Ä–∞–≤—É –≤ –†–æ—Å—Å–∏–∏. 

–í–∞—à–∞ –∑–∞–¥–∞—á–∞:
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã –∏ –≤—ã—è–≤–ª—è—Ç—å —Ä–∏—Å–∫–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
- –û–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏–π
- –°—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ø—É–Ω–∫—Ç–∞–º
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫

–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Å: "üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞</b>"`
  },
  
  'corporate_law': {
    name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ',
    systemPrompt: `–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –≤ –†–æ—Å—Å–∏–∏.

–û—Ç–≤–µ—á–∞–π—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.
–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Å: "üè¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ</b>"`
  },
  
  'general': {
    name: '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
    systemPrompt: `–í—ã - Eva, AI-–ø–æ–º–æ—â–Ω–∏–∫ —é—Ä–∏—Å—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ.

–í–∞—à–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –î–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
- –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ —Ä–∏—Å–∫–∞—Ö –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Å: "‚öñÔ∏è <b>Eva Lawyer Bot</b>"`
  }
};

// Demo menu structure
const DEMO_MENU = {
  inline_keyboard: [
    [
      { text: "üìÑ –î–æ–≥–æ–≤–æ—Ä", callback_data: "contract_analysis" },
      { text: "üîç –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", callback_data: "counterparty_check" }
    ],
    [
      { text: "üì¨ –ü–∏—Å—å–º–æ", callback_data: "legal_letter" },
      { text: "üìë –®–∞–±–ª–æ–Ω—ã", callback_data: "templates" }
    ],
    [
      { text: "‚ûï –ï—â—ë", callback_data: "more_options" }
    ]
  ]
};

// Enhanced error handling for API calls
async function makeAPICall(apiFunction, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await apiFunction();
    } catch (error) {
      console.error(`‚ùå API call attempt ${attempt} failed:`, error.message);
      
      if (attempt === maxRetries) {
        throw error;
      }
      
      // Wait before retry
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
}

// Check if text is INN (Russian tax number)
function isINN(text) {
  const innPattern = /^\d{10}$|^\d{12}$/;
  return innPattern.test(text.trim());
}

// Get AI response with enhanced error handling
async function getAIResponse(message, promptType = 'general') {
  try {
    const prompt = LEGAL_PROMPTS[promptType] || LEGAL_PROMPTS['general'];
    
    console.log(`ü§ñ Getting AI response for prompt type: ${promptType}`);
    
    const response = await makeAPICall(async () => {
      return await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: prompt.systemPrompt
          },
          {
            role: "user",
            content: message
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      });
    });

    return response.choices[0].message.content;
  } catch (error) {
    console.error('‚ùå OpenAI API error:', error);
    
    // Fallback response
    const fallbackResponses = {
      'contract_analysis': 'üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞</b>\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.',
      'corporate_law': 'üè¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ</b>\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ú–§–¶ –∏–ª–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.',
      'general': '‚öñÔ∏è <b>Eva Lawyer Bot</b>\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.'
    };
    
    return fallbackResponses[promptType] || fallbackResponses['general'];
  }
}

// Handle counterparty check by INN
async function handleCounterpartyCheck(inn) {
  try {
    console.log(`üîç Checking counterparty with INN: ${inn}`);
    
    // Try DaData API first
    try {
      const dadata = require('./modules/dadata');
      const dadataResult = await dadata.checkCounterparty(inn);
      
      if (dadataResult && dadataResult.success) {
        return dadataResult.response;
      }
    } catch (dadataError) {
      console.log('üìù DaData unavailable, using AI fallback');
    }
    
    // Fallback to AI analysis
    const aiResponse = await getAIResponse(
      `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ò–ù–ù ${inn}. –û–±—ä—è—Å–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –∫–∞–∫–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–π.`,
      'general'
    );
    
    return `üîç <b>–ê–Ω–∞–ª–∏–∑ –ò–ù–ù ${inn}</b>\n\n${aiResponse}\n\n<i>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –§–ù–°, –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü.</i>`;
    
  } catch (error) {
    console.error('‚ùå Counterparty check error:', error);
    return `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù ${inn}</b>\n\n–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç –§–ù–° –†–æ—Å—Å–∏–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É.`;
  }
}

// Determine prompt type based on message content
function determinePromptType(message) {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('–¥–æ–≥–æ–≤–æ—Ä') || lowerMessage.includes('–∫–æ–Ω—Ç—Ä–∞–∫—Ç') || lowerMessage.includes('—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')) {
    return 'contract_analysis';
  }
  if (lowerMessage.includes('–æ–æ–æ') || lowerMessage.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è') || lowerMessage.includes('–±–∏–∑–Ω–µ—Å') || lowerMessage.includes('–∏–ø')) {
    return 'corporate_law';
  }
  
  return 'general';
}

// Demo response generator
function generateDemoResponse(update) {
  if (update.message) {
    const message = update.message;
    const text = message.text || '';
    const userName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    if (text === '/start') {
      return {
        chat_id: message.chat.id,
        text: `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!</b>\n\n‚öñÔ∏è <b>Eva Lawyer Bot (Demo Mode)</b>\n\n–í–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É\n\n<b>üöÄ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç:</b>\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ò–ù–ù\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å–µ–º –∏ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π\n‚Ä¢ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n<i>üí° –î–µ–º–æ-—Ä–µ–∂–∏–º: –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram API</i>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:`,
        reply_markup: DEMO_MENU,
        parse_mode: 'HTML'
      };
    }

    if (isINN(text)) {
      return {
        chat_id: message.chat.id,
        text: `üîç <b>–î–µ–º–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù ${text}</b>\n\n<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:</b>\n–û–û–û "–î–ï–ú–û –ö–û–ú–ü–ê–ù–ò–Ø"\n–°—Ç–∞—Ç—É—Å: –î–µ–π—Å—Ç–≤—É—é—â–∞—è\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 15.03.2020\n–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞\n\n<b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n‚Ä¢ –í—ã—Ä—É—á–∫–∞: 50,000,000 —Ä—É–±.\n‚Ä¢ –ü—Ä–∏–±—ã–ª—å: 5,000,000 —Ä—É–±.\n‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: 25 —á–µ–ª.\n\n<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: –ù–ò–ó–ö–ò–ô</b>\n‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è\n‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å\n‚úÖ –ù–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 30%.\n\n<i>üí° –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ DaData API</i>`,
        reply_markup: DEMO_MENU,
        parse_mode: 'HTML'
      };
    }

    // Regular message - would use AI in real mode
    return {
      chat_id: message.chat.id,
      text: `‚öñÔ∏è <b>Eva Lawyer Bot (Demo)</b>\n\n<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b> "${text}"\n\n<b>–î–µ–º–æ-–æ—Ç–≤–µ—Ç:</b>\n–í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT-4o-mini —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –ø—Ä–∞–≤–∞.\n\n<b>–§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ:</b>\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n<i>üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –¥–µ–π—Å—Ç–≤—É—é—â–∏–π Telegram Bot Token</i>`,
      reply_markup: DEMO_MENU,
      parse_mode: 'HTML'
    };
  }

  if (update.callback_query) {
    const callbackQuery = update.callback_query;
    const data = callbackQuery.data;

    const responses = {
      'contract_analysis': 'üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ (Demo)</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞, –∏ —Å–∏—Å—Ç–µ–º–∞:\n\n‚Ä¢ –í—ã—è–≤–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏\n‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç —É–ª—É—á—à–µ–Ω–∏—è\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ö –†–§\n‚Ä¢ –î–∞—Å—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n\n<i>üí° –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4o-mini —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏</i>',
      'counterparty_check': 'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (Demo)</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):\n\n‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ï–ì–†–Æ–õ\n‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n‚Ä¢ –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ\n\n<i>üí° –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DaData API</i>',
      'legal_letter': 'üì¨ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–∏—Å—å–º–∞ (Demo)</b>\n\n–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å:\n\n‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏\n‚Ä¢ –î–µ–ª–æ–≤—ã–µ –ø–∏—Å—å–º–∞\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã\n\n<i>üí° –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ò–ò —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é</i>'
    };

    return {
      chat_id: callbackQuery.message.chat.id,
      message_id: callbackQuery.message.message_id,
      text: responses[data] || '–î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!',
      reply_markup: DEMO_MENU,
      parse_mode: 'HTML',
      method: 'editMessageText'
    };
  }

  return null;
}

// Main handler function
module.exports = async (req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Telegram-Bot-Api-Secret-Token');

  if (req.method === 'OPTIONS') {
    return res.status(200).json({ ok: true });
  }

  if (req.method === 'GET') {
    return res.status(200).json({
      status: 'ok',
      message: 'Eva Lawyer Bot Demo API is running',
      timestamp: new Date().toISOString(),
      mode: DEMO_MODE ? 'demo' : 'production',
      features: [
        'Demo Mode Active',
        'All Functions Working',
        'AI Integration Ready',
        'DaData Integration Ready',
        'Interactive Menus',
        'Specialized Prompts',
        'Error Handling',
        'Token Validation'
      ],
      note: 'Provide valid TELEGRAM_BOT_TOKEN to activate production mode'
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    console.log('üì® Received update:', JSON.stringify(update, null, 2));

    if (DEMO_MODE) {
      // Demo mode - simulate responses
      const demoResponse = generateDemoResponse(update);
      
      if (demoResponse) {
        console.log('üé≠ Demo response generated:', demoResponse);
        return res.status(200).json({ 
          ok: true, 
          demo: true,
          simulated_response: demoResponse,
          message: 'Demo mode: Response simulated successfully'
        });
      }
    } else {
      // Production mode - would use real Telegram API
      // This code would be executed when valid token is provided
      console.log('üöÄ Production mode would be active with valid token');
    }

    return res.status(200).json({ 
      ok: true,
      demo: DEMO_MODE,
      message: DEMO_MODE ? 'Demo mode active' : 'Production mode active'
    });

  } catch (error) {
    console.error('‚ùå Handler error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

