const OpenAI = require('openai');

// Initialize OpenAI with proper error handling
let openai;
try {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
        throw new Error('OPENAI_API_KEY not found in environment variables');
    }
    
    // Clean the API key from any potential whitespace or invalid characters
    const cleanApiKey = apiKey.trim();
    
    openai = new OpenAI({
        apiKey: cleanApiKey
    });
} catch (error) {
    console.error('‚ùå OpenAI initialization error:', error);
}

// Bot configuration
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ASSISTANT_ID = process.env.ASSISTANT_ID;
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET;

// Telegram API base URL
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

/**
 * Send message to Telegram
 */
async function sendMessage(chatId, text, options = {}) {
    try {
        const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: chatId,
                text: text,
                parse_mode: 'HTML',
                ...options
            })
        });
        return await response.json();
    } catch (error) {
        console.error('‚ùå Send message error:', error);
        return null;
    }
}

/**
 * Answer callback query
 */
async function answerCallbackQuery(callbackQueryId, text = '') {
    try {
        const response = await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                callback_query_id: callbackQueryId,
                text: text
            })
        });
        return await response.json();
    } catch (error) {
        console.error('‚ùå Answer callback query error:', error);
        return null;
    }
}

/**
 * Ask OpenAI Assistant
 */
async function askAssistant(message, userId = 'default') {
    try {
        if (!openai) {
            throw new Error('OpenAI not initialized');
        }

        // Create a thread
        const thread = await openai.beta.threads.create();
        
        // Add message to thread
        await openai.beta.threads.messages.create(thread.id, {
            role: 'user',
            content: message
        });
        
        // Run the assistant
        const run = await openai.beta.threads.runs.create(thread.id, {
            assistant_id: ASSISTANT_ID
        });
        
        // Wait for completion
        let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
        while (runStatus.status === 'in_progress' || runStatus.status === 'queued') {
            await new Promise(resolve => setTimeout(resolve, 1000));
            runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
        }
        
        if (runStatus.status === 'completed') {
            // Get messages
            const messages = await openai.beta.threads.messages.list(thread.id);
            const lastMessage = messages.data[0];
            return lastMessage.content[0].text.value;
        } else {
            throw new Error(`Assistant run failed with status: ${runStatus.status}`);
        }
        
    } catch (error) {
        console.error('‚ùå Assistant error:', error);
        return '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

/**
 * Create main menu keyboard
 */
function createMainMenu() {
    return {
        inline_keyboard: [
            [
                { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä', callback_data: 'menu_contract' },
                { text: 'üîç –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', callback_data: 'menu_counterparty' }
            ],
            [
                { text: 'üì¨ –ü–∏—Å—å–º–æ', callback_data: 'menu_letter' },
                { text: 'üìë –®–∞–±–ª–æ–Ω—ã', callback_data: 'menu_templates' }
            ],
            [
                { text: '‚ûï –ï—â—ë', callback_data: 'menu_more' },
                { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
            ]
        ]
    };
}

/**
 * Handle /start command
 */
async function handleStartCommand(chatId, userId) {
    const welcomeText = `ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva Lawyer Bot!</b>

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ò–ù–ù
‚Ä¢ üì¨ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–∏—Å—å–º–∞
‚Ä¢ üìë –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ ‚öñÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º

<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!`;

    await sendMessage(chatId, welcomeText, {
        reply_markup: createMainMenu()
    });
}

/**
 * Handle callback queries
 */
async function handleCallbackQuery(callbackQuery) {
    const { id, data, message, from } = callbackQuery;
    const chatId = message.chat.id;
    const userId = from.id;

    try {
        await answerCallbackQuery(id);

        switch (data) {
            case 'menu_contract':
                await sendMessage(chatId, 'üìÑ <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìã –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'contract_analyze' }],
                            [{ text: '‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'contract_risks' }],
                            [{ text: 'üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: 'contract_disputes' }],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                break;

            case 'menu_counterparty':
                await sendMessage(chatId, 'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
                break;

            case 'menu_letter':
                await sendMessage(chatId, 'üì¨ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–∏—Å—å–º–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Å—å–º–∞:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üì® –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é', callback_data: 'letter_response' }],
                            [{ text: 'üìã –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'letter_conclusion' }],
                            [{ text: '‚öñÔ∏è –î–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è', callback_data: 'letter_claim' }],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                break;

            case 'menu_templates':
                await sendMessage(chatId, 'üìë <b>–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'template_supply' }],
                            [{ text: 'üè¢ –£—Å—Ç–∞–≤ –û–û–û', callback_data: 'template_charter' }],
                            [{ text: 'üìã –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', callback_data: 'template_power' }],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                break;

            case 'menu_more':
                await sendMessage(chatId, '‚ûï <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚öñÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', callback_data: 'court_practice' }],
                            [{ text: 'üìä –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', callback_data: 'risk_analysis' }],
                            [{ text: 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                break;

            case 'main_menu':
                await sendMessage(chatId, 'üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:', {
                    reply_markup: createMainMenu()
                });
                break;

            case 'help':
                const helpText = `‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Eva Lawyer Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é
2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
3. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

                await sendMessage(chatId, helpText, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                break;

            default:
                await sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', {
                    reply_markup: createMainMenu()
                });
        }

    } catch (error) {
        console.error('‚ùå Callback query error:', error);
        await answerCallbackQuery(id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            reply_markup: createMainMenu()
        });
    }
}

/**
 * Handle text messages
 */
async function handleTextMessage(message) {
    const { chat, from, text } = message;
    const chatId = chat.id;
    const userId = from.id;

    try {
        // Handle commands
        if (text.startsWith('/')) {
            switch (text) {
                case '/start':
                    await handleStartCommand(chatId, userId);
                    break;
                case '/menu':
                    await sendMessage(chatId, 'üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', {
                        reply_markup: createMainMenu()
                    });
                    break;
                case '/help':
                    await handleCallbackQuery({
                        id: 'help_command',
                        data: 'help',
                        message: { chat: { id: chatId } },
                        from: { id: userId }
                    });
                    break;
                case '/clear':
                    await sendMessage(chatId, 'üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.');
                    break;
                default:
                    await sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
            }
            return;
        }

        // Check if it's an INN (Russian tax number)
        const innPattern = /^\d{10}$|^\d{12}$/;
        if (innPattern.test(text.trim())) {
            await sendMessage(chatId, `üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ò–ù–ù: ${text.trim()}...`);
            
            // Here you would integrate with DaData API
            const response = await askAssistant(`–ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ò–ù–ù ${text.trim()}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏.`, userId);
            await sendMessage(chatId, response);
            return;
        }

        // Regular text message - send to assistant
        await sendMessage(chatId, 'ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
        const response = await askAssistant(text, userId);
        await sendMessage(chatId, response, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });

    } catch (error) {
        console.error('‚ùå Text message error:', error);
        await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', {
            reply_markup: createMainMenu()
        });
    }
}

/**
 * Main webhook handler with proper CORS and authentication handling
 */
module.exports = async (req, res) => {
    // Set CORS headers for all requests
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Telegram-Bot-Api-Secret-Token');
    
    try {
        // Handle preflight OPTIONS request
        if (req.method === 'OPTIONS') {
            return res.status(200).end();
        }

        // Handle GET request (health check)
        if (req.method === 'GET') {
            return res.status(200).json({ 
                status: 'Eva Lawyer Bot API is running',
                timestamp: new Date().toISOString(),
                version: '2.0'
            });
        }

        // Only allow POST requests for webhook
        if (req.method !== 'POST') {
            return res.status(405).json({ error: 'Method not allowed' });
        }

        // Validate content type
        if (!req.headers['content-type'] || !req.headers['content-type'].includes('application/json')) {
            return res.status(400).json({ error: 'Content-Type must be application/json' });
        }

        // Validate request body
        if (!req.body || typeof req.body !== 'object') {
            return res.status(400).json({ error: 'Invalid request body' });
        }

        const update = req.body;
        
        // Log incoming update for debugging
        console.log('üì® Received update:', JSON.stringify(update, null, 2));

        // Handle callback queries
        if (update.callback_query) {
            await handleCallbackQuery(update.callback_query);
        }
        // Handle text messages
        else if (update.message) {
            if (update.message.text) {
                await handleTextMessage(update.message);
            } else {
                // Handle other message types (documents, photos, etc.)
                const chatId = update.message.chat.id;
                await sendMessage(chatId, 'üìé –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª. –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
                    reply_markup: createMainMenu()
                });
            }
        }
        // Handle other update types
        else {
            console.log('‚ÑπÔ∏è Unhandled update type:', Object.keys(update));
        }

        // Always return success to Telegram
        return res.status(200).json({ ok: true, timestamp: new Date().toISOString() });

    } catch (error) {
        console.error('‚ùå Webhook error:', error);
        
        // Return error response but still with 200 status to prevent Telegram retries
        return res.status(200).json({ 
            ok: false, 
            error: 'Internal server error',
            timestamp: new Date().toISOString()
        });
    }
};

