/* Vercel serverless handler */
import OpenAI from "openai";

const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const TG_API = `https://api.telegram.org/bot${TG_TOKEN}`;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY!;
const DADATA_API_KEY = process.env.DADATA_API_KEY || "";
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

const BTN_CONTRACT = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞";
const BTN_PARTY    = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞";
const BTN_DOCS     = "–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç";
const BTN_CHAT     = "–î–∏–∞–ª–æ–≥ —Å –ò–ò";
const BTN_FAQ      = "FAQ";

function mainKB() {
  return {
    keyboard: [
      [{ text: BTN_CONTRACT }, { text: BTN_PARTY }],
      [{ text: BTN_DOCS }, { text: BTN_CHAT }],
      [{ text: BTN_FAQ }]
    ],
    resize_keyboard: true,
    is_persistent: true,
    input_field_placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å‚Ä¶"
  };
}
function inlineDocs() {
  return {
    inline_keyboard: [[
      { text: "–°—á—ë—Ç", callback_data: "doc:invoice" },
      { text: "–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data: "doc:contract" },
      { text: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: "doc:spec" }
    ]]
  };
}
async function tg(method: string, payload: any) {
  await fetch(`${TG_API}/${method}`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify(payload)
  });
}
async function send(chat_id: number, text: string, extra: any = {}) {
  await tg("sendMessage", { chat_id, text, ...extra });
}

const PROMPT_CONTRACT_REVIEW = `
–¢—ã ‚Äî —é—Ä–∏—Å—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º—É –ø—Ä–∞–≤—É. –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
—Å –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: –≤—ã–¥–µ–ª–∏ —Ä–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –æ–±—ä—è—Å–Ω–∏ —Ä–∏—Å–∫, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–≤–∫—É.
–§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã: | –ü—É–Ω–∫—Ç | –†–∏—Å–∫ | –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∫–µ |`;

const PROMPT_GENERATE_CONTRACT = `
–¢—ã ‚Äî —é—Ä–∏—Å—Ç –†–§. –°–ø—Ä–æ—Å–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–≤–æ–¥–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É,
–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä—É–π —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–µ–ª–æ–≤—ã–º —è–∑—ã–∫–æ–º.`;

const PROMPT_CASE_SEARCH = `
–ù–∞–π–¥–∏ –∏ –∫—Ä–∞—Ç–∫–æ –∏–∑–ª–æ–∂–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è (–†–§/—Ä–µ–≥–∏–æ–Ω/–ø–µ—Ä–∏–æ–¥),
—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞, —Å—É–¥–∞, –¥–∞—Ç—ã, —Å—É—Ç–∏ –∏ —Å—Å—ã–ª–∫–∏. –ë–µ–∑ —Ñ–µ–π–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫.`;

const PROMPT_GOV_LETTER = `
–°–æ—Å—Ç–∞–≤—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω –≤–ª–∞—Å—Ç–∏: –≤–≤–æ–¥–Ω–∞—è, –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∫–∞ —Å –Ω–æ—Ä–º–∞–º–∏,
—Ä–µ–∑–æ–ª—é—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å —Å —á—ë—Ç–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.`;

async function askOpenAI(system: string, user: string) {
  const r = await openai.chat.completions.create({
    model: process.env.OPENAI_MODEL || "gpt-4o-mini",
    messages: [
      { role: "system", content: system },
      { role: "user", content: user }
    ]
  });
  return r.choices[0].message?.content?.trim() || "‚Ä¶";
}

async function dadataParty(query: string) {
  if (!DADATA_API_KEY) return "–î–æ–±–∞–≤—å—Ç–µ DADATA_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.";
  const resp = await fetch("https://suggestions.dadata.ru/suggestions/api/4_1/rs/" +
    (/^\d{10}(\d{2})?$/.test(query) ? "findById/party" : "suggest/party"), {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Accept": "application/json",
      "Authorization": `Token ${DADATA_API_KEY}`
    },
    body: JSON.stringify({ query })
  }).then(r => r.json()).catch(() => null);

  const s = resp?.suggestions?.[0]?.data;
  if (!s) return "–ù–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–ù–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ.";
  const name = s.name?.short_with_opf || s.name?.full_with_opf || "‚Äî";
  const innkpp = `${s.inn || "‚Äî"} / ${s.kpp || "‚Äî"}`;
  const addr = s.address?.value || "‚Äî";
  const state = s.state?.status || "ACTIVE";
  return `üè¢ ${name}
–ò–ù–ù/–ö–ü–ü: ${innkpp}
–ê–¥—Ä–µ—Å: ${addr}
–°—Ç–∞—Ç—É—Å: ${state}`;
}

function renderInvoice(args: {
  invoice_number: string; invoice_date: string;
  supplier_name: string; supplier_inn: string; supplier_kpp: string;
  buyer_name: string; buyer_inn: string; buyer_kpp: string;
  items: { name: string; qty: number; unit?: string; price: number }[];
}) {
  const rows = args.items.map((i, n) => `${n + 1}. ${i.name}  ${i.qty} ${i.unit || ""}  ${i.price}  ${i.qty * i.price}`).join("\n");
  const total = args.items.reduce((s, i) => s + i.qty * i.price, 0);
  return `–°—á—ë—Ç ‚Ññ ${args.invoice_number} –æ—Ç ${args.invoice_date}

–ü–æ—Å—Ç–∞–≤—â–∏–∫: ${args.supplier_name}, –ò–ù–ù ${args.supplier_inn}, –ö–ü–ü ${args.supplier_kpp}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${args.buyer_name}, –ò–ù–ù ${args.buyer_inn}, –ö–ü–ü ${args.buyer_kpp}

${rows}

–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.`;
}
const renderContract = (n: string, city: string, date: string) =>
  `–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ ‚Ññ ${n}\n–≥. ${city} ¬´${date}¬ª\n\n... (\u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b \u0441\u0442\u043e\u0440\u043e\u043d) ...`;
const renderSpec = (spec: string, contract: string, cdate: string, items: any[]) =>
  `–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Ññ ${spec}\n–∫ –î–æ–≥–æ–≤–æ—Ä—É ‚Ññ ${contract} –æ—Ç ${cdate}\n\n‚Ññ | –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ï–¥. | –ö–æ–ª-–≤–æ | –¶–µ–Ω–∞ | –ù–î–°\n` +
  items.map((i, k) => `${k + 1} | ${i.name} | ${i.unit} | ${i.qty} | ${i.price} | –ù–î–° ${i.vat}%`).join("\n");

export default async function handler(req: any, res: any) {
  if (req.method !== "POST") {
    res.status(405).json({ error: "Method Not Allowed" });
    return;
  }
  const upd = req.body;

  try {
    if (upd.message) {
      const m = upd.message;
      const chat = m.chat.id;
      const text: string = (m.text || "").trim();

      if (text === "/start") {
        await send(chat, "–ü—Ä–∏–≤–µ—Ç! –Ø –ï–≤–∞ –Æ—Ä–∏—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.", { reply_markup: mainKB() });
        res.status(200).json({ ok: true });
        return;
      }
      if (text === BTN_CONTRACT) {
        await send(chat, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–æ–≥–æ–≤–æ—Ä–∞ + —á—å—é –ø–æ–∑–∏—Ü–∏—é –∑–∞—â–∏—â–∞–µ–º ( –Ω–∞—à–∞/–∏—Ö), —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞, –∫–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è.");
        res.status(200).json({ ok: true });
        return;
      }
      if (text === BTN_PARTY) {
        await send(chat, "–£–∫–∞–∂–∏—Ç–µ –ò–ù–ù (10/12 —Ü–∏—Ñ—Ä) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ‚Äî –ø—Ä–æ–≤–µ—Ä—é —Å–≤–æ–¥–∫—É –ø–æ DaData.");
        res.status(200).json({ ok: true });
        return;
      }
      if (text === BTN_DOCS) {
        await send(chat, "–ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å?", { reply_markup: inlineDocs() });
        res.status(200).json({ ok: true });
        return;
      }
      if (text === BTN_CHAT) {
        await send(chat, "–î–∏–∞–ª–æ–≥ —Å –ò–ò: –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—â—É—Å—å –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ.");
        res.status(200).json({ ok: true });
        return;
      }
      if (text === BTN_FAQ) {
        await send(chat, `FAQ:
‚Ä¢ ¬´–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞¬ª ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –≤–µ—Ä–Ω—É —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–∞–≤–∫–∏.
‚Ä¢ ¬´–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞¬ª ‚Äî –ò–ù–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞.
‚Ä¢ ¬´–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—é —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
‚Ä¢ ¬´–î–∏–∞–ª–æ–≥ —Å –ò–ò¬ª ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∞–≤—É.`);
        res.status(200).json({ ok: true });
        return;
      }

      if (/^\d{10}(\d{2})?$/.test(text) || (text.length > 3 && text.toLowerCase().includes("–æ–æ–æ"))) {
        const summary = await dadataParty(text);
        await send(chat, summary);
        res.status(200).json({ ok: true });
        return;
      }

      const answer = await askOpenAI(
        `${PROMPT_CASE_SEARCH}\n\n${PROMPT_GENERATE_CONTRACT}`,
        text
      );
      await send(chat, answer);
      res.status(200).json({ ok: true });
      return;
    }

    if (upd.callback_query) {
      const cq = upd.callback_query;
      const chat = cq.message.chat.id;
      const data: string = cq.data;

      if (data.startsWith("doc:")) {
        if (data === "doc:invoice") {
          await send(chat, renderInvoice({
            invoice_number: "001", invoice_date: "11.08.2025",
            supplier_name: "–û–û–û –†–æ–º–∞—à–∫–∞", supplier_inn: "7700000000", supplier_kpp: "770001001",
            buyer_name: "–û–û–û –í–∞—Å–∏–ª—ë–∫", buyer_inn: "7800000000", buyer_kpp: "780001001",
            items: [{ name: "–Æ—Ä. —É—Å–ª—É–≥–∏", qty: 1, unit: "—É—Å–ª.", price: 10000 }]
          }));
        }
        if (data === "doc:contract") {
          await send(chat, renderContract("42", "–ú–æ—Å–∫–≤–∞", "11.08.2025"));
        }
        if (data === "doc:spec") {
          await send(chat, renderSpec("1", "42", "11.08.2025", [
            { name: "–£—Å–ª—É–≥–∞", unit: "—É—Å–ª.", qty: 1, price: 10000, vat: 20 }
          ]));
        }
      }

      await tg("answerCallbackQuery", { callback_query_id: cq.id });
      res.status(200).json({ ok: true });
      return;
    }

    res.status(200).json({ ok: true });
    return;
  } catch (e) {
    console.error(e);
    res.status(200).json({ ok: true });
    return;
  }
}
