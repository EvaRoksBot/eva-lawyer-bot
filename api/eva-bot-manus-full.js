// Eva Lawyer Bot - Full Manus Architecture Implementation
// Version 7.0 - Complete Integration of All 13 Scenarios

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const axios = require('axios');

class EvaLawyerBotManusFull {
    constructor() {
        this.token = process.env.TELEGRAM_BOT_TOKEN;
        this.openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY
        });
        
        if (!this.token) {
            throw new Error('TELEGRAM_BOT_TOKEN not provided!');
        }
        
        this.bot = new TelegramBot(this.token, { polling: true });
        this.userSessions = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.crossLinks = new Map(); // –ö—Ä–æ—Å—Å-—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
        
        this.initializeBot();
        console.log('üöÄ Eva Lawyer Bot Manus Full v7.0 started successfully!');
    }

    initializeBot() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        this.bot.onText(/\/start/, (msg) => this.handleStart(msg));
        this.bot.onText(/\/menu/, (msg) => this.showMainMenu(msg.chat.id));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => this.handleMessage(msg));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
        this.bot.on('callback_query', (query) => this.handleCallback(query));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        this.bot.on('document', (msg) => this.handleDocument(msg));
    }

    // === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
    async handleStart(msg) {
        const welcomeText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva Lawyer Bot!

ü§ñ –Ø ‚Äî –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π Manus
üîó –£–º–Ω—ã–µ –∫—Ä–æ—Å—Å-—Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
üè¢ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ –ò–ù–ù
üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ DOCX/PDF

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await this.showMainMenu(msg.chat.id, welcomeText);
    }

    async showMainMenu(chatId, text = "–ï–≤–∞ ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:") {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞", callback_data: "flow:contract_review" },
                    { text: "üìë –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤", callback_data: "flow:risk_table" }
                ],
                [
                    { text: "üìù –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data: "flow:supply_contract" },
                    { text: "üí≥ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data: "flow:invoice" }
                ],
                [
                    { text: "üìö –Æ—Ä. –∑–∞–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "flow:legal_opinion" },
                    { text: "üìä –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å—É–¥–æ–≤", callback_data: "flow:case_law" }
                ],
                [
                    { text: "‚öîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É", callback_data: "flow:dispute_prep" },
                    { text: "üñãÔ∏è –ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É", callback_data: "flow:client_explain" }
                ],
                [
                    { text: "üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é", callback_data: "flow:claim_reply" },
                    { text: "üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", callback_data: "flow:counterparty_score" }
                ],
                [
                    { text: "üîé –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ò–ù–ù", callback_data: "flow:inn_autofill" }
                ]
            ]
        };

        await this.bot.sendMessage(chatId, text, { reply_markup: keyboard });
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ó–ê–ü–†–û–°–û–í ===
    async handleCallback(query) {
        const chatId = query.message.chat.id;
        const data = query.data;
        
        try {
            await this.bot.answerCallbackQuery(query.id);
            
            if (data.startsWith('flow:')) {
                const flowId = data.replace('flow:', '');
                await this.startFlow(chatId, flowId);
            } else if (data.startsWith('action:')) {
                const action = data.replace('action:', '');
                await this.handleFlowAction(chatId, action, query);
            } else if (data === 'go:home') {
                await this.showMainMenu(chatId);
            }
        } catch (error) {
            console.error('Callback error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    // === –ó–ê–ü–£–°–ö –°–¶–ï–ù–ê–†–ò–ï–í ===
    async startFlow(chatId, flowId) {
        const session = this.getSession(chatId);
        session.currentFlow = flowId;
        session.flowStep = 'start';
        
        switch (flowId) {
            case 'contract_review':
                await this.flowContractReview(chatId);
                break;
            case 'risk_table':
                await this.flowRiskTable(chatId);
                break;
            case 'supply_contract':
                await this.flowSupplyContract(chatId);
                break;
            case 'invoice':
                await this.flowInvoice(chatId);
                break;
            case 'legal_opinion':
                await this.flowLegalOpinion(chatId);
                break;
            case 'case_law':
                await this.flowCaseLaw(chatId);
                break;
            case 'dispute_prep':
                await this.flowDisputePrep(chatId);
                break;
            case 'client_explain':
                await this.flowClientExplain(chatId);
                break;
            case 'claim_reply':
                await this.flowClaimReply(chatId);
                break;
            case 'counterparty_score':
                await this.flowCounterpartyScore(chatId);
                break;
            case 'inn_autofill':
                await this.flowInnAutofill(chatId);
                break;
            default:
                await this.showMainMenu(chatId);
        }
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 1: –ü–†–û–í–ï–†–ö–ê –î–û–ì–û–í–û–†–ê ===
    async flowContractReview(chatId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "üë§ –ó–∞–∫–∞–∑—á–∏–∫", callback_data: "action:set_side_customer" },
                    { text: "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data: "action:set_side_contractor" }
                ],
                [{ text: "‚Ü© –ù–∞–∑–∞–¥", callback_data: "go:home" }]
            ]
        };

        await this.bot.sendMessage(chatId, 
            "üìÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞**\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä (.docx/.pdf) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:", 
            { reply_markup: keyboard, parse_mode: 'Markdown' }
        );
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 2: –¢–ê–ë–õ–ò–¶–ê –†–ò–°–ö–û–í ===
    async flowRiskTable(chatId) {
        await this.bot.sendMessage(chatId, 
            "üìë **–¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤**\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä (.docx/.pdf) –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–∏—Å–∫–æ–≤."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'risk_document';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 3: –î–û–ì–û–í–û–† –ü–û–°–¢–ê–í–ö–ò ===
    async flowSupplyContract(chatId) {
        const keyboard = {
            inline_keyboard: [
                [{ text: "üîé –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ –ò–ù–ù", callback_data: "action:inn_autofill_contract" }],
                [{ text: "‚Ü© –ù–∞–∑–∞–¥", callback_data: "go:home" }]
            ]
        };

        await this.bot.sendMessage(chatId, 
            "üìù **–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏**\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å—É–º–º—ã, —Å—Ä–æ–∫–∏. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", 
            { reply_markup: keyboard }
        );
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 4: –°–ß–ï–¢ –ù–ê –û–ü–õ–ê–¢–£ ===
    async flowInvoice(chatId) {
        const keyboard = {
            inline_keyboard: [
                [{ text: "üîé –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ –ò–ù–ù", callback_data: "action:inn_autofill_invoice" }],
                [{ text: "‚Ü© –ù–∞–∑–∞–¥", callback_data: "go:home" }]
            ]
        };

        await this.bot.sendMessage(chatId, 
            "üí≥ **–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É**\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –ø–æ–∑–∏—Ü–∏–∏ –∏ –ù–î–°. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ò–ù–ù –¥–ª—è –∞–≤—Ç–æ‚Äë–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.", 
            { reply_markup: keyboard }
        );
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 5: –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===
    async flowLegalOpinion(chatId) {
        await this.bot.sendMessage(chatId, 
            "üìö **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**\n\n–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–∞–≤–∞, —Ñ–∞–∫—Ç—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'opinion_topic';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 6: –ê–ù–ê–õ–ò–ó –°–£–î–ï–ë–ù–û–ô –ü–†–ê–ö–¢–ò–ö–ò ===
    async flowCaseLaw(chatId) {
        await this.bot.sendMessage(chatId, 
            "üìä **–ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏**\n\n–£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å/—Å–∏—Ç—É–∞—Ü–∏—é, –ø–µ—Ä–∏–æ–¥ (—Å [–≥–æ–¥] –ø–æ [–≥–æ–¥]) –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ–∫—Ä—É–≥–∞."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'case_law_query';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 7: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –°–ü–û–†–£ ===
    async flowDisputePrep(chatId) {
        await this.bot.sendMessage(chatId, 
            "‚öîÔ∏è **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É**\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –≤–∞—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'dispute_situation';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 8: –ü–ò–°–¨–ú–û –ö–õ–ò–ï–ù–¢–£ ===
    async flowClientExplain(chatId) {
        await this.bot.sendMessage(chatId, 
            "üñãÔ∏è **–ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É**\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'client_situation';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 9: –û–¢–í–ï–¢ –ù–ê –ü–†–ï–¢–ï–ù–ó–ò–Æ ===
    async flowClaimReply(chatId) {
        const keyboard = {
            inline_keyboard: [
                [{ text: "üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞", callback_data: "action:use_contract_data" }],
                [{ text: "‚Ü© –ù–∞–∑–∞–¥", callback_data: "go:home" }]
            ]
        };

        await this.bot.sendMessage(chatId, 
            "üì¨ **–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é**\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.", 
            { reply_markup: keyboard }
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'claim_text';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 10: –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ê ===
    async flowCounterpartyScore(chatId) {
        await this.bot.sendMessage(chatId, 
            "üè¢ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (10/12 —Ü–∏—Ñ—Ä)."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'counterparty_inn';
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 11: –ê–í–¢–û–ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ü–û –ò–ù–ù ===
    async flowInnAutofill(chatId) {
        await this.bot.sendMessage(chatId, 
            "üîé **–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ò–ù–ù**\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."
        );
        
        const session = this.getSession(chatId);
        session.waitingFor = 'inn_for_autofill';
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
    async handleMessage(msg) {
        if (msg.text && msg.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        
        const chatId = msg.chat.id;
        const session = this.getSession(chatId);
        
        if (!session.waitingFor) return;
        
        try {
            switch (session.waitingFor) {
                case 'opinion_topic':
                    await this.processLegalOpinion(chatId, msg.text);
                    break;
                case 'case_law_query':
                    await this.processCaseLaw(chatId, msg.text);
                    break;
                case 'dispute_situation':
                    await this.processDisputePrep(chatId, msg.text);
                    break;
                case 'client_situation':
                    await this.processClientExplain(chatId, msg.text);
                    break;
                case 'claim_text':
                    await this.processClaimReply(chatId, msg.text);
                    break;
                case 'counterparty_inn':
                    await this.processCounterpartyScore(chatId, msg.text);
                    break;
                case 'inn_for_autofill':
                    await this.processInnAutofill(chatId, msg.text);
                    break;
            }
        } catch (error) {
            console.error('Message processing error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –Æ–†–ò–î–ò–ß–ï–°–ö–û–ì–û –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    async processLegalOpinion(chatId, topic) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        await this.bot.sendMessage(chatId, "üìö –ì–æ—Ç–æ–≤–ª—é –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–¥–±–∏—Ä–∞—é –ø—Ä–∞–∫—Ç–∏–∫—É‚Ä¶");
        
        const prompt = `**–¢–´ ‚Äî –í–´–°–û–ö–û–ö–í–ê–õ–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –Æ–†–ò–°–¢, –ò–ú–ï–Æ–©–ò–ô –ì–õ–£–ë–û–ö–£–Æ –≠–ö–°–ü–ï–†–¢–ò–ó–£ –í –ü–û–î–ì–û–¢–û–í–ö–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ô –î–õ–Ø –ö–û–ú–ü–ê–ù–ò–ô –ò –ß–ê–°–¢–ù–´–• –ö–õ–ò–ï–ù–¢–û–í.**  
–¢–´ –£–ú–ï–ï–®–¨ –°–ò–°–¢–ï–ú–ù–û –ò –ß–ï–¢–ö–û –ò–ó–õ–ê–ì–ê–¢–¨ –ü–†–ê–í–û–í–£–Æ –ü–û–ó–ò–¶–ò–Æ, –û–°–ù–û–í–ê–ù–ù–£–Æ –ù–ê –ù–û–†–ú–ê–• –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ê, –°–£–î–ï–ë–ù–û–ô –ü–†–ê–ö–¢–ò–ö–ï –ò –ü–†–ê–í–û–í–´–• –ü–û–î–•–û–î–ê–•, –û–ë–ï–°–ü–ï–ß–ò–í–ê–Ø –ü–†–ê–ö–¢–ò–ß–ï–°–ö–£–Æ –ü–û–õ–¨–ó–£ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê.

### –ö–û–ù–¢–ï–ö–°–¢:  
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å **—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ**: **${topic}**.

### –¢–í–û–Ø –ó–ê–î–ê–ß–ê:

1. –ù–∞—á–Ω–∏ —Å **–∫—Ä–∞—Ç–∫–æ–≥–æ –≤–≤–æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞**, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø–∏—à–∏ —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ü–µ–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è.  
2. –ü–µ—Ä–µ–π–¥–∏ –∫ **–ø—Ä–∞–≤–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É**, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞:  
   - –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–∫–æ–¥–µ–∫—Å—ã, —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã –∏ —Ç. –¥.),  
   - —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã—Å—à–∏—Ö —Å—É–¥–æ–≤ (–ü–ª–µ–Ω—É–º—ã –í–° –†–§, –í–ê–° –†–§),  
   - –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º.  
3. –ó–∞–≤–µ—Ä—à–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ **—á—ë—Ç–∫–∏–º–∏ –≤—ã–≤–æ–¥–∞–º–∏**, –≥–¥–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π:  
   - –ø—Ä–∞–≤–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é,  
   - –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏,  
   - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).

### –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:  
–û—Ñ–æ—Ä–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ **—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏**, –≤–∫–ª—é—á–∞—é—â–∏–º–∏:

1. **–í–≤–µ–¥–µ–Ω–∏–µ**  
2. **–ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑**  
3. **–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**

**–¢–í–û–Å –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –¢–û–ß–ù–´–ú, –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ú –ò –ü–†–ò–ú–ï–ù–ò–ú–´–ú –ù–ê –ü–†–ê–ö–¢–ò–ö–ï.**`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 2000
            });

            const opinion = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ DOCX –∑–∞–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "action:export_docx" },
                        { text: "üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data: "flow:case_law" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, opinion, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫—Ä–æ—Å—Å-—Å–≤—è–∑–µ–π
            session.lastOpinion = opinion;
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ê–ù–ê–õ–ò–ó–ê –°–£–î–ï–ë–ù–û–ô –ü–†–ê–ö–¢–ò–ö–ò ===
    async processCaseLaw(chatId, query) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        await this.bot.sendMessage(chatId, "üìä –°–æ–ø–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–∑–∏—Ü–∏–∏ —Å—É–¥–æ–≤, –≥–æ—Ç–æ–≤–ª—é —Ç–∞–±–ª–∏—Ü—É‚Ä¶");
        
        const prompt = `**–¢–´ ‚Äî –û–ü–´–¢–ù–´–ô –Æ–†–ò–°–¢-–ê–ù–ê–õ–ò–¢–ò–ö, –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–£–Æ–©–ò–ô–°–Ø –ù–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ò –°–£–î–ï–ë–ù–û–ô –ü–†–ê–ö–¢–ò–ö–ò –ò –ü–û–î–ì–û–¢–û–í–ö–ï –≠–ö–°–ü–ï–†–¢–ù–´–• –ü–†–ê–í–û–í–´–• –°–ü–†–ê–í–û–ö.**  
–¢–í–û–Ø –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ‚Äî –°–ò–°–¢–ï–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô –°–£–î–û–í, –í–´–Ø–í–õ–ï–ù–ò–ï –¢–ï–ù–î–ï–ù–¶–ò–ô –ò –†–ê–ó–õ–ò–ß–ò–ô –í –ü–†–ê–ö–¢–ò–ö–ï –†–ê–ó–ù–´–• –°–£–î–ï–ë–ù–´–• –û–ö–†–£–ì–û–í.

### –ö–û–ù–¢–ï–ö–°–¢ –ó–ê–î–ê–ß–ò:  
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å **–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ** –ø–æ –≤–æ–ø—Ä–æ—Å—É: **${query}**.

### –¢–í–û–Ø –ó–ê–î–ê–ß–ê:

1. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö –∞–∫—Ç–æ–≤, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.  
2. –°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å—É–¥–æ–≤ –ø–æ –≥–æ–¥–∞–º, –≤—ã—è–≤–∏–≤ **–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–¥—Ö–æ–¥–µ** –∏ —ç–≤–æ–ª—é—Ü–∏—é —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.  
3. –í—ã–¥–µ–ª–∏—Ç—å **–æ—Ç–ª–∏—á–∏—è –≤ –ø—Ä–∞–≤–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Å—É–¥–µ–±–Ω—ã–º –æ–∫—Ä—É–≥–∞–º**.  
4. –û—Ç—Ä–∞–∑–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å–Ω–æ–≤—ã–≤–∞–ª–∏—Å—å —Ä–µ—à–µ–Ω–∏—è, —Å **—É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**.

### –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:  
–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ **—Ç–∞–±–ª–∏—Ü—ã** —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏:

| –ì–æ–¥ | –ü–æ–∑–∏—Ü–∏—è —Å—É–¥–∞ | –ê—Ä–≥—É–º–µ–Ω—Ç—ã | –ò—Å—Ç–æ—á–Ω–∏–∫–∏ |
|-----|--------------|-----------|--------------|

**–¢–í–û–Ø –°–ü–†–ê–í–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–û–õ–ï–ó–ù–û–ô –î–õ–Ø –ü–†–ê–í–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê, –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô –ò –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ü–†–ê–í–û–í–û–ô –ü–û–ó–ò–¶–ò–ò.**`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 2000
            });

            const caseLaw = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ PDF –æ—Ç—á—ë—Ç", callback_data: "action:export_pdf" },
                        { text: "‚öîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É", callback_data: "flow:dispute_prep" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, caseLaw, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
            session.lastCaseLaw = caseLaw;
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–í–ï–†–ö–ò –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ê ===
    async processCounterpartyScore(chatId, inn) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
        if (!this.validateINN(inn)) {
            await this.bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.");
            return;
        }
        
        await this.bot.sendMessage(chatId, "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º‚Ä¶");
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        const companyData = await this.getCompanyData(inn);
        
        const prompt = `**–¢–´ ‚Äî –ê–ù–ê–õ–ò–¢–ò–ö –ü–û KYC/AML/COMPLIANCE.**

–ü—Ä–æ–≤–µ–¥–∏ —Å–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ò–ù–ù ${inn}.

**–ú–ï–¢–û–î–ò–ö–ê –°–ö–û–†–ò–ù–ì–ê:**

1. **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏** (30%)
2. **–†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏** (25%) 
3. **–ü—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏** (25%)
4. **–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏** (20%)

**–ò–°–¢–û–ß–ù–ò–ö–ò –ü–†–û–í–ï–†–ö–ò:**
- –§–ù–° (–Ω–∞–ª–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å)
- –§–µ–¥—Ä–µ—Å—É—Ä—Å (–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ)
- –ö–ê–î-–ê—Ä–±–∏—Ç—Ä (—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã)
- –§–°–°–ü (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
- –û–±—â–∏–π —Ä–∏—Å–∫: –ù–ò–ó–ö–ò–ô/–°–†–ï–î–ù–ò–ô/–í–´–°–û–ö–ò–ô
- –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ

–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${JSON.stringify(companyData)}`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 1500
            });

            const scoring = response.choices[0].message.content;
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
            const dealTerms = this.deriveDealTerms(scoring);
            
            const fullResponse = `${scoring}\n\n**–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è:** –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${dealTerms.prepayment}%, –ª–∏–º–∏—Ç ${dealTerms.limit.toLocaleString()} ‚ÇΩ, –æ—Ç—Å—Ä–æ—á–∫–∞ ${dealTerms.tenor} –¥–Ω${dealTerms.guarantee ? ', –≥–∞—Ä–∞–Ω—Ç–∏—è/–ø–æ—Ä—É—á–∏—Ç–µ–ª—å—Å—Ç–≤–æ' : ''}.`;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ PDF –æ—Ç—á—ë—Ç", callback_data: "action:export_pdf" },
                        { text: "‚úçÔ∏è –í—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤ –¥–æ–≥–æ–≤–æ—Ä", callback_data: "action:terms_into_contract" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, fullResponse, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫—Ä–æ—Å—Å-—Å–≤—è–∑–µ–π
            session.lastScoring = scoring;
            session.dealTerms = dealTerms;
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ê–í–¢–û–ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –ü–û –ò–ù–ù ===
    async processInnAutofill(chatId, inn) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        if (!this.validateINN(inn)) {
            await this.bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.");
            return;
        }
        
        await this.bot.sendMessage(chatId, "üîç –ò—â—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω—è—é —Ä–µ–∫–≤–∏–∑–∏—Ç—ã‚Ä¶");
        
        try {
            const companyData = await this.getCompanyData(inn);
            
            const infoText = `–ù–∞–π–¥–µ–Ω–æ:
‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${companyData.name}
‚Ä¢ –û–ì–†–ù: ${companyData.ogrn}
‚Ä¢ –ò–ù–ù/–ö–ü–ü: ${companyData.inn} / ${companyData.kpp}
‚Ä¢ –ê–¥—Ä–µ—Å: ${companyData.address}
‚Ä¢ –û–ö–í–≠–î: ${companyData.okved}
‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${companyData.director}`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üì• –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ –î–æ–≥–æ–≤–æ—Ä", callback_data: "action:requisites_to_contract" },
                        { text: "üí≥ –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ –°—á—ë—Ç", callback_data: "action:requisites_to_invoice" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, infoText, { reply_markup: keyboard });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫—Ä–æ—Å—Å-—Å–≤—è–∑–µ–π
            session.requisites = companyData;
            
        } catch (error) {
            console.error('Company data fetch error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏.");
        }
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    getSession(chatId) {
        if (!this.userSessions.has(chatId)) {
            this.userSessions.set(chatId, {
                currentFlow: null,
                flowStep: null,
                waitingFor: null,
                data: {}
            });
        }
        return this.userSessions.get(chatId);
    }

    validateINN(inn) {
        const cleanInn = inn.replace(/\D/g, '');
        return cleanInn.length === 10 || cleanInn.length === 12;
    }

    async getCompanyData(inn) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DaData API
        return {
            name: `–û–û–û "–ö–û–ú–ü–ê–ù–ò–Ø-${inn.slice(-4)}"`,
            inn: inn,
            kpp: inn.length === 10 ? `${inn.slice(0,4)}01001` : '770401001',
            ogrn: `1${inn}${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`,
            address: '123456, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
            okved: '62.01 - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è',
            director: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
        };
    }

    deriveDealTerms(scoring) {
        const riskLevel = scoring.toLowerCase();
        
        if (riskLevel.includes('–≤—ã—Å–æ–∫–∏–π')) {
            return { prepayment: 50, limit: 300000, tenor: 7, guarantee: true };
        } else if (riskLevel.includes('—Å—Ä–µ–¥–Ω–∏–π')) {
            return { prepayment: 30, limit: 700000, tenor: 14, guarantee: false };
        } else {
            return { prepayment: 0, limit: 1500000, tenor: 30, guarantee: false };
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –û–°–¢–ê–õ–¨–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í ===
    
    async processDisputePrep(chatId, situation) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        await this.bot.sendMessage(chatId, "‚öîÔ∏è –°—Ç—Ä–æ—é –ª–∏–Ω–∏—é –∑–∞—â–∏—Ç—ã‚Ä¶");
        
        const prompt = `**–¢–´ ‚Äî –û–ü–´–¢–ù–´–ô –Æ–†–ò–°–¢-–ü–†–û–¶–ï–°–°–£–ê–õ–ò–°–¢, –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–£–Æ–©–ò–ô–°–Ø –ù–ê –í–ï–î–ï–ù–ò–ò –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –ò –ì–†–ê–ñ–î–ê–ù–°–ö–ò–• –°–ü–û–†–û–í.**

–°–∏—Ç—É–∞—Ü–∏—è: ${situation}

–ü–æ–¥–≥–æ—Ç–æ–≤—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞—â–∏—Ç—ã, –≤–∫–ª—é—á–∞—é—â—É—é:
1. **–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞**
2. **–ù–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã**
3. **–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–ª—è —Å–±–æ—Ä–∞**
4. **–ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞**
5. **–†–∏—Å–∫–∏ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã**

–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–ø–æ—Ä—É.`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 2000
            });

            const strategy = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ DOCX —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data: "action:export_docx" },
                        { text: "üìä –ò–∑—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data: "flow:case_law" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, strategy, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    async processClientExplain(chatId, situation) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        await this.bot.sendMessage(chatId, "‚úâÔ∏è –ì–æ—Ç–æ–≤–ª—é –ø–∏—Å—å–º–æ‚Ä¶");
        
        const prompt = `**–¢–´ ‚Äî –Æ–†–ò–°–¢, –£–ú–ï–Æ–©–ò–ô –î–û–°–¢–£–ü–ù–û –û–ë–™–Ø–°–ù–Ø–¢–¨ –°–õ–û–ñ–ù–´–ï –ü–†–ê–í–û–í–´–ï –í–û–ü–†–û–°–´ –ö–õ–ò–ï–ù–¢–ê–ú.**

–°–∏—Ç—É–∞—Ü–∏—è: ${situation}

–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä–æ–µ:
1. **–û–±—ä—è—Å–Ω—è–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º**
2. **–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã**
3. **–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π**
4. **–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã**

–¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏.`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 1500
            });

            const letter = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [{ text: "üìÑ DOCX –ø–∏—Å—å–º–æ", callback_data: "action:export_docx" }],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, letter, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    async processClaimReply(chatId, claimText) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        await this.bot.sendMessage(chatId, "üì¨ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é‚Ä¶");
        
        const prompt = `**–¢–´ ‚Äî –Æ–†–ò–°–¢, –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–£–Æ–©–ò–ô–°–Ø –ù–ê –î–û–°–£–î–ï–ë–ù–û–ú –£–†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–ò –°–ü–û–†–û–í.**

–¢–µ–∫—Å—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏: ${claimText}

–ü–æ–¥–≥–æ—Ç–æ–≤—å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é, –≤–∫–ª—é—á–∞—é—â–∏–π:
1. **–ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π**
2. **–ü—Ä–∞–≤–æ–≤—É—é –æ—Ü–µ–Ω–∫—É —Å–∏—Ç—É–∞—Ü–∏–∏**
3. **–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—É—â–µ—Å—Ç–≤—É**
4. **–°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞ –∏ –¥–æ–≥–æ–≤–æ—Ä**
5. **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)**

–§–æ—Ä–º–∞—Ç: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é.`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 2000
            });

            const reply = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ DOCX –æ—Ç–≤–µ—Ç", callback_data: "action:export_docx" },
                        { text: "‚öîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É", callback_data: "flow:dispute_prep" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, reply, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–ô ===
    async handleFlowAction(chatId, action, query) {
        const session = this.getSession(chatId);
        
        switch (action) {
            case 'set_side_customer':
                session.contractSide = '–∑–∞–∫–∞–∑—á–∏–∫';
                await this.bot.editMessageText(
                    "üìÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞**\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É: **–ó–∞–∫–∞–∑—á–∏–∫**\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä (.docx/.pdf).",
                    { chat_id: chatId, message_id: query.message.message_id, parse_mode: 'Markdown' }
                );
                session.waitingFor = 'contract_document';
                break;
                
            case 'set_side_contractor':
                session.contractSide = '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
                await this.bot.editMessageText(
                    "üìÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞**\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É: **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å**\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä (.docx/.pdf).",
                    { chat_id: chatId, message_id: query.message.message_id, parse_mode: 'Markdown' }
                );
                session.waitingFor = 'contract_document';
                break;
                
            case 'export_docx':
                await this.bot.sendMessage(chatId, "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ DOCX –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.");
                break;
                
            case 'export_pdf':
                await this.bot.sendMessage(chatId, "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.");
                break;
                
            default:
                await this.bot.sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í ===
    async handleDocument(msg) {
        const chatId = msg.chat.id;
        const session = this.getSession(chatId);
        
        if (!session.waitingFor || !session.waitingFor.includes('document')) {
            await this.bot.sendMessage(chatId, "üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–ª—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.");
            return;
        }
        
        await this.bot.sendMessage(chatId, "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç‚Ä¶");
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            const extractedText = "–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏";
            
            if (session.waitingFor === 'contract_document') {
                await this.processContractReview(chatId, extractedText, session.contractSide);
            } else if (session.waitingFor === 'risk_document') {
                await this.processRiskTable(chatId, extractedText);
            }
            
        } catch (error) {
            console.error('Document processing error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.");
        }
    }

    async processContractReview(chatId, contractText, side) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        const prompt = `**–¢–´ ‚Äî –í–´–°–û–ö–û–ö–í–ê–õ–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –Æ–†–ò–°–¢ –ü–û –î–û–ì–û–í–û–†–ù–û–ú–£ –ü–†–ê–í–£, –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–£–Æ–©–ò–ô–°–Ø –ù–ê –ê–ù–ê–õ–ò–ó–ï –ò –ú–ò–ù–ò–ú–ò–ó–ê–¶–ò–ò –î–û–ì–û–í–û–†–ù–´–• –†–ò–°–ö–û–í –í –ö–†–£–ü–ù–´–• –°–î–ï–õ–ö–ê–•.**

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω—ã **${side}**.

### CHAIN OF THOUGHTS (–¶–ï–ü–û–ß–ö–ê –†–ê–°–°–£–ñ–î–ï–ù–ò–ô):
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω—ã **${side}**.
2. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏.
3. –û–±—ä—è—Å–Ω–∏, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç–∞–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤.
4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á—ë—Ç–∫–∏–µ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ.

### –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:  
–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã:

| –ü—É–Ω–∫—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ | –í —á—ë–º —Ä–∏—Å–∫ | –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∫–µ |
|----------------|------------|------------------------|

–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞: ${contractText}`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 2000
            });

            const riskTable = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ DOCX –æ—Ç—á—ë—Ç", callback_data: "action:export_docx" },
                        { text: "üìë –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤", callback_data: "flow:risk_table" }
                    ],
                    [
                        { text: "üßæ –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π", callback_data: "action:protocol_from_risks" },
                        { text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId, riskTable, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
            session.lastRiskTable = riskTable;
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    async processRiskTable(chatId, contractText) {
        const session = this.getSession(chatId);
        session.waitingFor = null;
        
        const prompt = `**–¢–´ ‚Äî –≠–ö–°–ü–ï–†–¢ –í –û–ë–õ–ê–°–¢–ò –î–û–ì–û–í–û–†–ù–û–ì–û –ü–†–ê–í–ê –° –ë–û–õ–¨–®–ò–ú –û–ü–´–¢–û–ú –ê–ù–ê–õ–ò–ó–ê –ò –ú–ò–ù–ò–ú–ò–ó–ê–¶–ò–ò –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –†–ò–°–ö–û–í –í –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–• –ö–û–ù–¢–†–ê–ö–¢–ê–•.**

### –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.  
2. –í—ã—è–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã, –Ω–µ—Å—É—â–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ **—Ä–∏—Å–∫–∏**.  
3. –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å **—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –∏–ª–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ —Ä–∏—Å–∫–∞**.

### –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:  
–û—Ñ–æ—Ä–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ **—Ç–∞–±–ª–∏—Ü—ã**:

| –ü—É–Ω–∫—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ | –í —á—ë–º —Ä–∏—Å–∫ | –ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ |
|----------------|------------|------------------|

–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞: ${contractText}`;

        try {
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 2000
            });

            const riskTable = response.choices[0].message.content;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üìÑ DOCX —Ç–∞–±–ª–∏—Ü–∞", callback_data: "action:export_docx" },
                        { text: "üßæ –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π", callback_data: "action:protocol_from_risk_table" }
                    ],
                    [{ text: "üè† –í –º–µ–Ω—é", callback_data: "go:home" }]
                ]
            };

            await this.bot.sendMessage(chatId, riskTable, { 
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            });
            
            session.lastRiskTable = riskTable;
            
        } catch (error) {
            console.error('OpenAI API error:', error);
            await this.bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API.");
        }
    }

    // === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
    start() {
        console.log('ü§ñ Eva Lawyer Bot Manus Full v7.0 is ready!');
        console.log('üîó All 13 scenarios with cross-links enabled');
        console.log('üè¢ INN auto-fill ready');
        console.log('üìÑ Document export capabilities prepared');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
try {
    const bot = new EvaLawyerBotManusFull();
    bot.start();
} catch (error) {
    console.error('Bot initialization error:', error);
}

module.exports = EvaLawyerBotManusFull;

