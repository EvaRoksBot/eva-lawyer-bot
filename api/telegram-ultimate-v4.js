// Eva Lawyer Bot - Ultimate Implementation v4.0
// Complete legal assistant with all 13 scenarios and advanced features

const { analyzeImage } = require('./modules/vision-analyzer');
const { checkCounterparty } = require('./modules/dadata');
const { generateDocument } = require('./modules/document-generator');
const { AdvancedFSM } = require('./modules/advanced-fsm');

// Bot configuration
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8355504616:AAGrfPmGarrAz0YxrycZcy2hg9uT-vaYLGg';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const DADATA_API_KEY = process.env.DADATA_API_KEY;
const DADATA_SECRET_KEY = process.env.DADATA_SECRET_KEY;

// Initialize FSM
const fsm = new AdvancedFSM();

// Legal scenarios configuration
const LEGAL_SCENARIOS = {
    contract_analysis: {
        id: 'contract_analysis',
        title: 'üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞',
        description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–∞–≤–æ–∫',
        states: ['waiting_document', 'analyzing', 'providing_results'],
        prompt: `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –û–°–ù–û–í–ù–´–ï –†–ò–°–ö–ò (—Ç–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
2. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–ê–í–ö–ê–ú (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏)
3. –û–¶–ï–ù–ö–ê –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–ò (–æ—Ç 1 –¥–æ 10)
4. –ö–õ–Æ–ß–ï–í–´–ï –£–°–õ–û–í–ò–Ø (—Å—Ä–æ–∫–∏, —Å—É–º–º—ã, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)
5. –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô (—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ)

–û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —á–µ—Ç–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.`
    },
    
    risk_table: {
        id: 'risk_table',
        title: 'üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∏—Å–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX',
        states: ['collecting_info', 'generating_table', 'sending_document'],
        prompt: `–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:
1. –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –†–ò–°–ö–û–í (–æ–ø–∏—Å–∞–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –≤–ª–∏—è–Ω–∏–µ)
2. –û–¶–ï–ù–ö–ê (–º–∞—Ç—Ä–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è)
3. –ú–ï–†–´ –ú–ò–¢–ò–ì–ê–¶–ò–ò (–ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
4. –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–ï (–∫—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç)
5. –ú–û–ù–ò–¢–û–†–ò–ù–ì (–∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å)

–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π —Ä–∏—Å–∫–æ–≤.`
    },
    
    everest_package: {
        id: 'everest_package',
        title: 'üìö –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫',
        submenu: {
            supply_contract: 'üìã –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏',
            specification: 'üìù –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è',
            disagreement_protocol: '‚öñÔ∏è –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π',
            complete_package: 'üì¶ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç'
        },
        states: ['selecting_option', 'collecting_data', 'generating_docs'],
        prompt: `–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ "–≠–≤–µ—Ä–µ—Å—Ç". 
–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º:
1. –°–ü–ï–¶–ò–§–ò–ö–ê –ü–û–°–¢–ê–í–û–ö (–ø–æ–¥—à–∏–ø–Ω–∏–∫–∏, –†–¢–ò, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)
2. –†–û–°–°–ò–ô–°–ö–û–ï –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–û (–ì–ö –†–§, —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ)
3. –û–¢–†–ê–°–õ–ï–í–´–ï –°–¢–ê–ù–î–ê–†–¢–´ (–ì–û–°–¢, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
4. –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø (—Ü–µ–Ω—ã, —Å—Ä–æ–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ)
5. –†–ò–°–ö–ò –ò –ó–ê–©–ò–¢–ê (—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –≥–∞—Ä–∞–Ω—Ç–∏–∏)

–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`
    },
    
    legal_conclusion: {
        id: 'legal_conclusion',
        title: '‚úçÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ',
        description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–≤–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è',
        states: ['defining_question', 'researching', 'drafting_conclusion'],
        prompt: `–ü–æ–¥–≥–æ—Ç–æ–≤—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
1. –ü–†–ê–í–û–í–ê–Ø –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–Ø (–ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã)
2. –ê–ù–ê–õ–ò–ó –°–ò–¢–£–ê–¶–ò–ò (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞)
3. –ü–†–ê–í–û–í–´–ï –ü–û–ó–ò–¶–ò–ò (–∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞ –∏ –ø—Ä–æ—Ç–∏–≤)
4. –°–£–î–ï–ë–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)
5. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)

–°—Ç–∏–ª—å: –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π, —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ù–ü–ê –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.`
    },
    
    court_practice: {
        id: 'court_practice',
        title: 'üìä –ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏',
        description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
        states: ['defining_criteria', 'searching_cases', 'analyzing_trends'],
        prompt: `–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ:
1. –ü–û–ò–°–ö –†–ï–®–ï–ù–ò–ô (–∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
2. –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (—Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
3. –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ó–ò–¶–ò–ò –°–£–î–û–í (–ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã)
4. –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê (—á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥)
5. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ–¥–µ–Ω–∏—è –¥–µ–ª)

–í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–µ–ª –∏ –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π.`
    },
    
    dispute_preparation: {
        id: 'dispute_preparation',
        title: 'üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É',
        description: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–ø–æ—Ä–∞',
        states: ['analyzing_dispute', 'developing_strategy', 'preparing_documents'],
        prompt: `–ü–æ–¥–≥–æ—Ç–æ–≤—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å—É–¥–µ–±–Ω–æ–≥–æ —Å–ø–æ—Ä–∞:
1. –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô (—Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)
2. –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ï–ù–ù–ê–Ø –ë–ê–ó–ê (—á—Ç–æ —Å–æ–±—Ä–∞—Ç—å, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å)
3. –ü–†–û–¶–ï–°–°–£–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (—Ç–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ–Ω–∏—è –¥–µ–ª–∞)
4. –†–ò–°–ö–ò –ò –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´ (–º–µ–¥–∏–∞—Ü–∏—è, –º–∏—Ä–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ)
5. –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô (–ø–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)

–£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∞.`
    },
    
    claim_response: {
        id: 'claim_response',
        title: 'üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é',
        description: '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é',
        states: ['analyzing_claim', 'preparing_response', 'finalizing_document'],
        prompt: `–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é:
1. –ê–ù–ê–õ–ò–ó –ü–†–ï–¢–ï–ù–ó–ò–ò (–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)
2. –ü–†–ê–í–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø (—Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä –∏ –∑–∞–∫–æ–Ω)
3. –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –í–û–ó–†–ê–ñ–ï–ù–ò–Ø (–æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ –¥–æ–≤–æ–¥–æ–≤)
4. –í–°–¢–†–ï–ß–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
5. –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–Æ (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)

–¢–æ–Ω: –¥–µ–ª–æ–≤–æ–π, –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –±–µ–∑ —ç–º–æ—Ü–∏–π.`
    },
    
    counterparty_check: {
        id: 'counterparty_check',
        title: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ò–ù–ù',
        states: ['collecting_inn', 'checking_data', 'generating_report'],
        prompt: `–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:
1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –î–ê–ù–ù–´–ï (–ï–ì–†–Æ–õ/–ï–ì–†–ò–ü, —Å—Ç–∞—Ç—É—Å)
2. –§–ò–ù–ê–ù–°–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
3. –°–£–î–ï–ë–ù–ê–Ø –ò–°–¢–û–†–ò–Ø (—Å–ø–æ—Ä—ã, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)
4. –†–ï–ü–£–¢–ê–¶–ò–û–ù–ù–´–ï –†–ò–°–ö–ò (–°–ú–ò, –æ—Ç–∑—ã–≤—ã)
5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (—É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞, —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞)

–ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.`
    },
    
    invoice_generation: {
        id: 'invoice_generation',
        title: 'üßæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—á–µ—Ç–æ–≤',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –∏ –∞–∫—Ç–æ–≤',
        states: ['collecting_details', 'generating_invoice', 'sending_document'],
        prompt: `–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
1. –°–ß–ï–¢ –ù–ê –û–ü–õ–ê–¢–£ (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏)
2. –ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢ (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥)
3. –°–ß–ï–¢-–§–ê–ö–¢–£–†–ê (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ù–î–°)
4. –¢–û–í–ê–†–ù–ê–Ø –ù–ê–ö–õ–ê–î–ù–ê–Ø (–¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫)
5. –ó–ê–ö–†–´–í–ê–Æ–©–ò–ï –î–û–ö–£–ú–ï–ù–¢–´ (–ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç)

–°–æ–±–ª—é–¥–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.`
    },
    
    document_structure: {
        id: 'document_structure',
        title: 'üß± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        description: '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        states: ['uploading_document', 'analyzing_structure', 'providing_recommendations'],
        prompt: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
1. –ö–û–ú–ü–û–ó–ò–¶–ò–Ø (–ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ (—á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ)
3. –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –†–ê–ó–î–ï–õ–´ (—á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å)
4. –°–¢–ò–õ–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø (—è–∑—ã–∫, —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è)
5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–î–∞–π –æ—Ü–µ–Ω–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.`
    },
    
    client_explanation: {
        id: 'client_explanation',
        title: '‚öñÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É',
        description: '–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏',
        states: ['understanding_situation', 'preparing_explanation', 'providing_advice'],
        prompt: `–û–±—ä—è—Å–Ω–∏ –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∞–≤–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º:
1. –°–£–¢–¨ –ü–†–û–ë–õ–ï–ú–´ (—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ)
2. –ü–†–ê–í–û–í–´–ï –ê–°–ü–ï–ö–¢–´ (–∫–∞–∫–∏–µ –∑–∞–∫–æ–Ω—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è)
3. –í–û–ó–ú–û–ñ–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò (–≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π)
4. –†–ò–°–ö–ò –ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò (—á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫/—Ö–æ—Ä–æ—à–æ)
5. –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø (—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)

–ò–∑–±–µ–≥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏.`
    },
    
    template_library: {
        id: 'template_library',
        title: 'üìë –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤',
        description: '–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        submenu: {
            contracts: 'üìã –î–æ–≥–æ–≤–æ—Ä—ã',
            applications: 'üìù –ó–∞—è–≤–ª–µ–Ω–∏—è',
            letters: 'üìß –ü–∏—Å—å–º–∞',
            protocols: 'üìä –ü—Ä–æ—Ç–æ–∫–æ–ª—ã'
        },
        states: ['selecting_template', 'customizing', 'generating_document'],
        prompt: `–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏:
1. –ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
2. –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ü–û–õ–Ø (—á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å)
3. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –§–û–†–ú–£–õ–ò–†–û–í–ö–ò (–≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ª–æ–≤–∏–π)
4. –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–û–õ–ù–ï–ù–ò–Æ (–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å)
5. –ü–†–ê–í–û–í–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò (–Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ)

–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.`
    }
};

// Enhanced menu system
const MAIN_MENU = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä—ã', callback_data: 'menu_contracts' },
                { text: 'üìö –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª', callback_data: 'menu_everest' }
            ],
            [
                { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', callback_data: 'action_counterparty_check' },
                { text: 'üí≥ –°—á—ë—Ç/–∞–∫—Ç—ã', callback_data: 'action_invoice_generation' }
            ],
            [
                { text: 'üìä –û—Ç—á—ë—Ç—ã', callback_data: 'menu_reports' },
                { text: 'üìë –®–∞–±–ª–æ–Ω—ã', callback_data: 'menu_templates' }
            ],
            [
                { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'menu_settings' },
                { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'menu_help' }
            ]
        ]
    }
};

const CONTRACTS_MENU = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'action_contract_analysis' },
                { text: 'üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'action_risk_table' }
            ],
            [
                { text: 'üß± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞', callback_data: 'action_document_structure' },
                { text: '‚úçÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'action_legal_conclusion' }
            ],
            [
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' },
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu_main' }
            ]
        ]
    }
};

const EVEREST_MENU = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üìã –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'everest_supply_contract' },
                { text: 'üìù –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data: 'everest_specification' }
            ],
            [
                { text: '‚öñÔ∏è –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: 'everest_disagreement_protocol' },
                { text: 'üì¶ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç', callback_data: 'everest_complete_package' }
            ],
            [
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' },
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu_main' }
            ]
        ]
    }
};

const REPORTS_MENU = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üìä –ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏', callback_data: 'action_court_practice' },
                { text: 'üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É', callback_data: 'action_dispute_preparation' }
            ],
            [
                { text: 'üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é', callback_data: 'action_claim_response' },
                { text: '‚öñÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É', callback_data: 'action_client_explanation' }
            ],
            [
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' },
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu_main' }
            ]
        ]
    }
};

// Utility functions
async function sendMessage(chatId, text, options = {}) {
    try {
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        const payload = {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML',
            ...options
        };
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error(`Telegram API error: ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('Send message error:', error);
        throw error;
    }
}

async function editMessage(chatId, messageId, text, options = {}) {
    try {
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`;
        const payload = {
            chat_id: chatId,
            message_id: messageId,
            text: text,
            parse_mode: 'HTML',
            ...options
        };
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        return await response.json();
    } catch (error) {
        console.error('Edit message error:', error);
        return null;
    }
}

async function answerCallbackQuery(callbackQueryId, text = '') {
    try {
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`;
        const payload = {
            callback_query_id: callbackQueryId,
            text: text,
            show_alert: false
        };
        
        await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
    } catch (error) {
        console.error('Answer callback query error:', error);
    }
}

// AI Integration
async function getAIResponse(prompt, userMessage, scenario = null) {
    try {
        if (!OPENAI_API_KEY) {
            return '–ò–∑–≤–∏–Ω–∏—Ç–µ, AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        const systemPrompt = scenario ? LEGAL_SCENARIOS[scenario].prompt : 
            `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva Lawyer Bot. 
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, 
            —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.`;
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userMessage }
                ],
                max_tokens: 4000,
                temperature: 0.7
            })
        });
        
        if (!response.ok) {
            throw new Error(`OpenAI API error: ${response.status}`);
        }
        
        const data = await response.json();
        return data.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.';
        
    } catch (error) {
        console.error('AI response error:', error);
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

// INN validation and checking
function validateINN(inn) {
    if (!inn || typeof inn !== 'string') return false;
    
    const cleanINN = inn.replace(/\D/g, '');
    if (cleanINN.length !== 10 && cleanINN.length !== 12) return false;
    
    // Checksum validation for 10-digit INN
    if (cleanINN.length === 10) {
        const coefficients = [2, 4, 10, 3, 5, 9, 4, 6, 8];
        let sum = 0;
        for (let i = 0; i < 9; i++) {
            sum += parseInt(cleanINN[i]) * coefficients[i];
        }
        const checksum = (sum % 11) % 10;
        return checksum === parseInt(cleanINN[9]);
    }
    
    // Checksum validation for 12-digit INN
    if (cleanINN.length === 12) {
        const coefficients1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8];
        const coefficients2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8];
        
        let sum1 = 0;
        for (let i = 0; i < 10; i++) {
            sum1 += parseInt(cleanINN[i]) * coefficients1[i];
        }
        const checksum1 = (sum1 % 11) % 10;
        
        let sum2 = 0;
        for (let i = 0; i < 11; i++) {
            sum2 += parseInt(cleanINN[i]) * coefficients2[i];
        }
        const checksum2 = (sum2 % 11) % 10;
        
        return checksum1 === parseInt(cleanINN[10]) && checksum2 === parseInt(cleanINN[11]);
    }
    
    return false;
}

// Enhanced counterparty checking
async function performCounterpartyCheck(inn, userId) {
    try {
        // Validate INN first
        if (!validateINN(inn)) {
            return {
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.'
            };
        }
        
        // Try DaData API first
        if (DADATA_API_KEY && DADATA_SECRET_KEY) {
            try {
                const dadataResult = await checkCounterparty(inn, DADATA_API_KEY, DADATA_SECRET_KEY);
                if (dadataResult.success) {
                    return dadataResult;
                }
            } catch (dadataError) {
                console.error('DaData API error:', dadataError);
            }
        }
        
        // Fallback to AI analysis
        const aiPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ò–ù–ù ${inn} –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ò–ù–ù (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞)
2. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–û–û–û, –ò–ü, –ê–û –∏ —Ç.–¥.)
3. –û—Ü–µ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É

–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–∫–∞–∂–∏ —ç—Ç–æ —á–µ—Å—Ç–Ω–æ.`;
        
        const aiResponse = await getAIResponse(aiPrompt, `–ò–ù–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${inn}`, 'counterparty_check');
        
        return {
            success: true,
            source: 'ai_analysis',
            data: {
                inn: inn,
                analysis: aiResponse,
                checked_at: new Date().toISOString()
            }
        };
        
    } catch (error) {
        console.error('Counterparty check error:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        };
    }
}

// Document processing
async function processDocument(fileUrl, fileName, userId, scenario) {
    try {
        // Download file
        const fileResponse = await fetch(fileUrl);
        if (!fileResponse.ok) {
            throw new Error('Failed to download file');
        }
        
        const fileBuffer = await fileResponse.arrayBuffer();
        const buffer = Buffer.from(fileBuffer);
        
        // Check if it's an image
        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp'];
        const fileExt = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));
        
        if (imageExtensions.includes(fileExt)) {
            // Process as image using vision analyzer
            const visionResult = await analyzeImage(fileUrl, OPENAI_API_KEY);
            
            if (visionResult.success) {
                // Get AI analysis based on scenario
                const scenarioPrompt = LEGAL_SCENARIOS[scenario]?.prompt || 
                    '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É.';
                
                const aiAnalysis = await getAIResponse(
                    scenarioPrompt, 
                    `–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${visionResult.text}`, 
                    scenario
                );
                
                return {
                    success: true,
                    type: 'image',
                    extractedText: visionResult.text,
                    analysis: aiAnalysis,
                    documentType: visionResult.documentType,
                    keyData: visionResult.keyData
                };
            } else {
                throw new Error(visionResult.error);
            }
        } else {
            // Process as text document
            const textContent = buffer.toString('utf-8');
            
            const scenarioPrompt = LEGAL_SCENARIOS[scenario]?.prompt || 
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É.';
            
            const aiAnalysis = await getAIResponse(
                scenarioPrompt, 
                `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${textContent}`, 
                scenario
            );
            
            return {
                success: true,
                type: 'text',
                content: textContent,
                analysis: aiAnalysis
            };
        }
        
    } catch (error) {
        console.error('Document processing error:', error);
        return {
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.'
        };
    }
}

// Action handlers
async function handleAction(action, userId, chatId, messageId, data = {}) {
    try {
        const scenario = LEGAL_SCENARIOS[action];
        if (!scenario) {
            await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }
        
        // Set user state
        fsm.setState(userId, scenario.states[0], { scenario: action, chatId, messageId });
        
        let responseText = `<b>${scenario.title}</b>\n\n${scenario.description}\n\n`;
        
        switch (action) {
            case 'contract_analysis':
            case 'document_structure':
                responseText += 'üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)';
                break;
                
            case 'counterparty_check':
                responseText += 'üî¢ –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:';
                break;
                
            case 'risk_table':
                responseText += 'üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–∏—Å–∫–æ–≤:';
                break;
                
            case 'legal_conclusion':
                responseText += '‚ùì –û–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è:';
                break;
                
            case 'court_practice':
                responseText += 'üîç –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏:';
                break;
                
            case 'dispute_preparation':
                responseText += '‚öñÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–ø–æ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:';
                break;
                
            case 'claim_response':
                responseText += 'üì¨ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:';
                break;
                
            case 'client_explanation':
                responseText += 'üí¨ –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:';
                break;
                
            case 'invoice_generation':
                responseText += 'üí≥ –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Å—É–º–º–∞, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã):';
                break;
                
            default:
                responseText += 'üìù –û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:';
        }
        
        const backMenu = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_action' }
                    ]
                ]
            }
        };
        
        if (messageId) {
            await editMessage(chatId, messageId, responseText, backMenu);
        } else {
            await sendMessage(chatId, responseText, backMenu);
        }
        
    } catch (error) {
        console.error('Action handler error:', error);
        await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// Everest package handlers
async function handleEverestAction(action, userId, chatId, messageId) {
    try {
        const everestActions = {
            'everest_supply_contract': {
                title: 'üìã –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –∏ –†–¢–ò'
            },
            'everest_specification': {
                title: 'üìù –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª',
                description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
            },
            'everest_disagreement_protocol': {
                title: '‚öñÔ∏è –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª',
                description: '–ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π –∫ –¥–æ–≥–æ–≤–æ—Ä—É'
            },
            'everest_complete_package': {
                title: 'üì¶ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª',
                description: '–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ'
            }
        };
        
        const actionInfo = everestActions[action];
        if (!actionInfo) {
            await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–∞–∫–µ—Ç–∞ ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª.');
            return;
        }
        
        // Set FSM state
        fsm.setState(userId, 'collecting_everest_data', { 
            scenario: 'everest_package', 
            action: action,
            chatId, 
            messageId 
        });
        
        const responseText = `<b>${actionInfo.title}</b>\n\n${actionInfo.description}\n\nüìù –£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n‚Ä¢ –¶–µ–Ω–∞\n‚Ä¢ –°—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏\n‚Ä¢ –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)`;
        
        const backMenu = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîô –ö –ø–∞–∫–µ—Ç—É ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª', callback_data: 'menu_everest' },
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' }
                    ]
                ]
            }
        };
        
        await editMessage(chatId, messageId, responseText, backMenu);
        
    } catch (error) {
        console.error('Everest action error:', error);
        await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª.');
    }
}

// Main webhook handler
export default async function handler(req, res) {
    try {
        // Health check
        if (req.method === 'GET') {
            return res.status(200).json({ 
                status: 'Eva Lawyer Bot v4.0 - Ultimate Edition',
                timestamp: new Date().toISOString(),
                features: [
                    '13 legal scenarios',
                    'Advanced FSM',
                    'Document processing',
                    'DaData integration',
                    'AI-powered analysis',
                    'Everest package'
                ]
            });
        }
        
        if (req.method !== 'POST') {
            return res.status(405).json({ error: 'Method not allowed' });
        }
        
        const update = req.body;
        console.log('Received update:', JSON.stringify(update, null, 2));
        
        // Handle callback queries (button presses)
        if (update.callback_query) {
            const callbackQuery = update.callback_query;
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            const userId = callbackQuery.from.id;
            const data = callbackQuery.data;
            
            await answerCallbackQuery(callbackQuery.id);
            
            // Menu navigation
            if (data === 'menu_main') {
                const welcomeText = `ü§ñ <b>Eva Lawyer Bot v4.0</b>\n\n‚öñÔ∏è –í–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:`;
                await editMessage(chatId, messageId, welcomeText, MAIN_MENU);
                
            } else if (data === 'menu_contracts') {
                const contractsText = `üìÑ <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
                await editMessage(chatId, messageId, contractsText, CONTRACTS_MENU);
                
            } else if (data === 'menu_everest') {
                const everestText = `üìö <b>–ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª</b>\n\nüè≠ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –∏ –†–¢–ò\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:`;
                await editMessage(chatId, messageId, everestText, EVEREST_MENU);
                
            } else if (data === 'menu_reports') {
                const reportsText = `üìä <b>–û—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:`;
                await editMessage(chatId, messageId, reportsText, REPORTS_MENU);
                
            } else if (data.startsWith('action_')) {
                const action = data.replace('action_', '');
                await handleAction(action, userId, chatId, messageId);
                
            } else if (data.startsWith('everest_')) {
                await handleEverestAction(data, userId, chatId, messageId);
                
            } else if (data === 'cancel_action') {
                fsm.clearState(userId);
                const cancelText = `‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`;
                await editMessage(chatId, messageId, cancelText, MAIN_MENU);
            }
            
            return res.status(200).json({ ok: true });
        }
        
        // Handle regular messages
        if (update.message) {
            const message = update.message;
            const chatId = message.chat.id;
            const userId = message.from.id;
            const text = message.text || '';
            
            // Handle /start command
            if (text === '/start') {
                fsm.clearState(userId);
                const welcomeText = `ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva Lawyer Bot v4.0!</b>\n\n‚öñÔ∏è –í–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:\n\n‚úÖ 13 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ò–ò\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤\n‚úÖ –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:`;
                
                await sendMessage(chatId, welcomeText, MAIN_MENU);
                return res.status(200).json({ ok: true });
            }
            
            // Check user state
            const userState = fsm.getState(userId);
            
            if (userState) {
                // Handle state-based interactions
                await handleStateMessage(userId, chatId, message, userState);
            } else {
                // Handle general messages
                await handleGeneralMessage(chatId, text, userId);
            }
        }
        
        return res.status(200).json({ ok: true });
        
    } catch (error) {
        console.error('Webhook error:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

// Handle state-based messages
async function handleStateMessage(userId, chatId, message, userState) {
    try {
        const { state, data } = userState;
        const scenario = data.scenario;
        const text = message.text || '';
        
        if (state === 'waiting_document' && message.document) {
            // Handle document upload
            await sendMessage(chatId, 'üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...');
            
            const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${message.document.file_path}`;
            const result = await processDocument(fileUrl, message.document.file_name, userId, scenario);
            
            if (result.success) {
                const responseText = `‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n${result.analysis}`;
                await sendMessage(chatId, responseText, MAIN_MENU);
                fsm.clearState(userId);
            } else {
                await sendMessage(chatId, `‚ùå ${result.error}`);
            }
            
        } else if (state === 'collecting_inn' || (scenario === 'counterparty_check' && text)) {
            // Handle INN input
            const inn = text.replace(/\D/g, '');
            
            if (inn.length === 10 || inn.length === 12) {
                await sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞...');
                
                const result = await performCounterpartyCheck(inn, userId);
                
                if (result.success) {
                    let responseText = `‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞</b>\n\nüìä <b>–ò–ù–ù:</b> ${inn}\n\n`;
                    
                    if (result.source === 'dadata') {
                        const org = result.data;
                        responseText += `üè¢ <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> ${org.name}\n`;
                        responseText += `üìç <b>–ê–¥—Ä–µ—Å:</b> ${org.address}\n`;
                        responseText += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${org.status}\n`;
                        if (org.director) responseText += `üë§ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> ${org.director}\n`;
                        if (org.score !== undefined) responseText += `‚≠ê <b>–°–∫–æ—Ä–∏–Ω–≥:</b> ${org.score}/100\n`;
                    } else {
                        responseText += result.data.analysis;
                    }
                    
                    await sendMessage(chatId, responseText, MAIN_MENU);
                } else {
                    await sendMessage(chatId, `‚ùå ${result.error}`);
                }
                
                fsm.clearState(userId);
            } else {
                await sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.');
            }
            
        } else if (text) {
            // Handle text input for other scenarios
            await sendMessage(chatId, 'ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...');
            
            const aiResponse = await getAIResponse('', text, scenario);
            await sendMessage(chatId, aiResponse, MAIN_MENU);
            fsm.clearState(userId);
        }
        
    } catch (error) {
        console.error('State message error:', error);
        await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        fsm.clearState(userId);
    }
}

// Handle general messages
async function handleGeneralMessage(chatId, text, userId) {
    try {
        // Check if it's an INN
        const innMatch = text.match(/\b\d{10,12}\b/);
        if (innMatch) {
            const inn = innMatch[0];
            await sendMessage(chatId, 'üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ò–ù–ù. –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞...');
            
            const result = await performCounterpartyCheck(inn, userId);
            
            if (result.success) {
                let responseText = `‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞</b>\n\nüìä <b>–ò–ù–ù:</b> ${inn}\n\n`;
                
                if (result.source === 'dadata') {
                    const org = result.data;
                    responseText += `üè¢ <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> ${org.name}\n`;
                    responseText += `üìç <b>–ê–¥—Ä–µ—Å:</b> ${org.address}\n`;
                    responseText += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${org.status}\n`;
                    if (org.director) responseText += `üë§ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> ${org.director}\n`;
                    if (org.score !== undefined) responseText += `‚≠ê <b>–°–∫–æ—Ä–∏–Ω–≥:</b> ${org.score}/100\n`;
                } else {
                    responseText += result.data.analysis;
                }
                
                await sendMessage(chatId, responseText, MAIN_MENU);
            } else {
                await sendMessage(chatId, `‚ùå ${result.error}`);
            }
            
            return;
        }
        
        // General AI consultation
        await sendMessage(chatId, 'ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é...');
        const aiResponse = await getAIResponse('', text);
        await sendMessage(chatId, aiResponse, MAIN_MENU);
        
    } catch (error) {
        console.error('General message error:', error);
        await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

