// Comprehensive Eva Lawyer Bot with FSM and all 9 scenarios
const { UserStateManager, STATES, ACTIONS, validateFile, validateINN, validateText } = require('./modules/fsm');

// Telegram Bot Token
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8355504616:AAGrfPmGarrAz0YxrycZcy2hg9uT-vaYLGg';

// OpenAI Configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_BASE = process.env.OPENAI_API_BASE || 'https://api.openai.com/v1';

// DaData Configuration
const DADATA_API_KEY = process.env.DADATA_API_KEY || 'ap6te7l4ub6sq1dwt608';
const DADATA_SECRET_KEY = process.env.DADATA_SECRET_KEY || '8bf724e4ee6cc03ce6b6';

// Initialize state manager
const stateManager = new UserStateManager();

// Telegram API helper
async function sendTelegramMessage(chatId, text, replyMarkup = null) {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
        reply_markup: replyMarkup
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            console.error('Telegram API error:', await response.text());
            return false;
        }
        
        return await response.json();
    } catch (error) {
        console.error('Send message error:', error);
        return false;
    }
}

// Main menu
function getMainMenu() {
    return {
        inline_keyboard: [
            [
                { text: 'üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: `act:${ACTIONS.CONTRACT_REVIEW}` }
            ],
            [
                { text: 'üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: `act:${ACTIONS.RISK_TABLE}` }
            ],
            [
                { text: 'üì¶ –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª', callback_data: `act:${ACTIONS.EVEREST_PACKAGE}` }
            ],
            [
                { text: '‚öñÔ∏è –Æ—Ä. –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: `act:${ACTIONS.LEGAL_OPINION}` }
            ],
            [
                { text: 'üèõÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å—É–¥–æ–≤', callback_data: `act:${ACTIONS.CASE_LAW}` }
            ],
            [
                { text: '‚öîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É', callback_data: `act:${ACTIONS.DISPUTE_PREP}` }
            ],
            [
                { text: 'üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é', callback_data: `act:${ACTIONS.CLAIM_REPLY}` }
            ],
            [
                { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–ò–ù–ù)', callback_data: `act:${ACTIONS.COUNTERPARTY_SCORE}` }
            ],
            [
                { text: 'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É', callback_data: `act:${ACTIONS.INVOICE}` }
            ]
        ]
    };
}

// Everest package menu
function getEverestMenu() {
    return {
        inline_keyboard: [
            [
                { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `everest:${ACTIONS.EVEREST_CONTRACT}` }
            ],
            [
                { text: 'üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data: `everest:${ACTIONS.EVEREST_SPEC}` }
            ],
            [
                { text: 'üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: `everest:${ACTIONS.EVEREST_PROTOCOL}` }
            ],
            [
                { text: 'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É', callback_data: `everest:${ACTIONS.EVEREST_INVOICE}` }
            ],
            [
                { text: 'üì¶ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: 'everest:all' }
            ],
            [
                { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
        ]
    };
}

// Navigation buttons
function getNavigationButtons() {
    return [
        [
            { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
    ];
}

// Cancel button
function getCancelButton() {
    return [
        [
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
        ]
    ];
}

// OpenAI API call
async function callOpenAI(prompt, maxTokens = 1500) {
    if (!OPENAI_API_KEY) {
        return 'OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    }

    try {
        const response = await fetch(`${OPENAI_API_BASE}/chat/completions`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: maxTokens,
                temperature: 0.7
            })
        });

        if (!response.ok) {
            throw new Error(`OpenAI API error: ${response.status}`);
        }

        const data = await response.json();
        return data.choices[0].message.content;
    } catch (error) {
        console.error('OpenAI error:', error);
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

// DaData API call
async function callDaData(inn) {
    if (!DADATA_API_KEY || !DADATA_SECRET_KEY) {
        return null;
    }

    try {
        const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party', {
            method: 'POST',
            headers: {
                'Authorization': `Token ${DADATA_API_KEY}`,
                'X-Secret': DADATA_SECRET_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ query: inn })
        });

        if (!response.ok) {
            throw new Error(`DaData API error: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('DaData error:', error);
        return null;
    }
}

// Process user input based on current state
async function processUserInput(userId, chatId, text, fileData = null) {
    const state = stateManager.getState(userId);
    const action = stateManager.getCurrentAction(userId);

    switch (state) {
        case STATES.CONTRACT_AWAIT_FILE:
            if (fileData) {
                const validation = validateFile(fileData);
                if (!validation.valid) {
                    return await sendTelegramMessage(chatId, `‚ùå ${validation.error}`);
                }
                stateManager.setUserData(userId, 'contractFile', fileData);
                stateManager.setState(userId, STATES.CONTRACT_AWAIT_SIDE);
                return await sendTelegramMessage(chatId, 
                    'üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —á—å—é —Å—Ç–æ—Ä–æ–Ω—É –∑–∞—â–∏—â–∞–µ–º:\n\n‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫\n‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\n‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫\n‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
                    { inline_keyboard: getCancelButton() }
                );
            } else {
                return await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ (.docx –∏–ª–∏ .pdf)');
            }

        case STATES.CONTRACT_AWAIT_SIDE:
            const side = text.toLowerCase();
            if (!['–∑–∞–∫–∞–∑—á–∏–∫', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'].includes(side)) {
                return await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω: –ó–∞–∫–∞–∑—á–∏–∫, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –ü–æ—Å—Ç–∞–≤—â–∏–∫, –ü–æ–∫—É–ø–∞—Ç–µ–ª—å');
            }
            
            stateManager.setUserData(userId, 'contractSide', side);
            stateManager.setState(userId, STATES.CONTRACT_PROCESSING);
            
            const contractFile = stateManager.getUserData(userId).contractFile;
            const analysis = await analyzeContract(contractFile, side);
            
            stateManager.setState(userId, STATES.CONTRACT_PREVIEW);
            return await sendTelegramMessage(chatId, analysis, {
                inline_keyboard: [
                    [{ text: 'üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç DOCX', callback_data: 'download:docx:contract' }],
                    [{ text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑', callback_data: `act:${ACTIONS.CONTRACT_REVIEW}` }],
                    ...getNavigationButtons()
                ]
            });

        case STATES.RISK_AWAIT_FILE:
            if (fileData) {
                const validation = validateFile(fileData);
                if (!validation.valid) {
                    return await sendTelegramMessage(chatId, `‚ùå ${validation.error}`);
                }
                
                stateManager.setState(userId, STATES.RISK_PROCESSING);
                const riskTable = await generateRiskTable(fileData);
                
                stateManager.setState(userId, STATES.RISK_PREVIEW);
                return await sendTelegramMessage(chatId, riskTable, {
                    inline_keyboard: [
                        [{ text: 'üìÑ DOCX —Ç–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'download:docx:risks' }],
                        [{ text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑', callback_data: `act:${ACTIONS.RISK_TABLE}` }],
                        ...getNavigationButtons()
                    ]
                });
            } else {
                return await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ (.docx –∏–ª–∏ .pdf)');
            }

        case STATES.OPINION_AWAIT_TOPIC:
            const validation = validateText(text, 10);
            if (!validation.valid) {
                return await sendTelegramMessage(chatId, `‚ùå ${validation.error}`);
            }
            
            stateManager.setUserData(userId, 'opinionTopic', text);
            stateManager.setState(userId, STATES.OPINION_AWAIT_FIELD);
            return await sendTelegramMessage(chatId, 
                '‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–∞–≤–∞:\n\n‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ\n‚Ä¢ –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ\n‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ\n‚Ä¢ –ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ\n‚Ä¢ –î—Ä—É–≥–æ–µ',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.OPINION_AWAIT_FIELD:
            stateManager.setUserData(userId, 'opinionField', text);
            stateManager.setState(userId, STATES.OPINION_AWAIT_FACTS);
            return await sendTelegramMessage(chatId, 
                'üìã –û–ø–∏—à–∏—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.OPINION_AWAIT_FACTS:
            const factsValidation = validateText(text, 50);
            if (!factsValidation.valid) {
                return await sendTelegramMessage(chatId, `‚ùå ${factsValidation.error}`);
            }
            
            stateManager.setState(userId, STATES.OPINION_PROCESSING);
            const userData = stateManager.getUserData(userId);
            const opinion = await generateLegalOpinion(userData.opinionTopic, userData.opinionField, text);
            
            stateManager.setState(userId, STATES.OPINION_PREVIEW);
            return await sendTelegramMessage(chatId, opinion, {
                inline_keyboard: [
                    [{ text: 'üìÑ DOCX –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'download:docx:opinion' }],
                    [{ text: 'üîÅ –ù–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: `act:${ACTIONS.LEGAL_OPINION}` }],
                    ...getNavigationButtons()
                ]
            });

        case STATES.CASE_AWAIT_QUESTION:
            const questionValidation = validateText(text, 20);
            if (!questionValidation.valid) {
                return await sendTelegramMessage(chatId, `‚ùå ${questionValidation.error}`);
            }
            
            stateManager.setUserData(userId, 'caseQuestion', text);
            stateManager.setState(userId, STATES.CASE_AWAIT_PERIOD);
            return await sendTelegramMessage(chatId, 
                'üìÖ –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2020-2024" –∏–ª–∏ "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞"):',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.CASE_AWAIT_PERIOD:
            stateManager.setState(userId, STATES.CASE_PROCESSING);
            const caseUserData = stateManager.getUserData(userId);
            const caseLaw = await analyzeCaseLaw(caseUserData.caseQuestion, text);
            
            stateManager.setState(userId, STATES.CASE_PREVIEW);
            return await sendTelegramMessage(chatId, caseLaw, {
                inline_keyboard: [
                    [{ text: 'üìÑ DOCX —Å–ø—Ä–∞–≤–∫–∞', callback_data: 'download:docx:caselaw' }],
                    [{ text: 'üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É', callback_data: `act:${ACTIONS.DISPUTE_PREP}` }],
                    ...getNavigationButtons()
                ]
            });

        case STATES.DISPUTE_AWAIT_TOPIC:
            const topicValidation = validateText(text, 20);
            if (!topicValidation.valid) {
                return await sendTelegramMessage(chatId, `‚ùå ${topicValidation.error}`);
            }
            
            stateManager.setUserData(userId, 'disputeTopic', text);
            stateManager.setState(userId, STATES.DISPUTE_AWAIT_FACTS);
            return await sendTelegramMessage(chatId, 
                'üìã –û–ø–∏—à–∏—Ç–µ —Ñ–∞–∫—Ç—ã –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞:',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.DISPUTE_AWAIT_FACTS:
            stateManager.setUserData(userId, 'disputeFacts', text);
            stateManager.setState(userId, STATES.DISPUTE_AWAIT_OPPONENT);
            return await sendTelegramMessage(chatId, 
                '‚öîÔ∏è –ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç? –û–ø–∏—à–∏—Ç–µ –∏—Ö –ø–æ–∑–∏—Ü–∏—é:',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.DISPUTE_AWAIT_OPPONENT:
            stateManager.setState(userId, STATES.DISPUTE_PROCESSING);
            const disputeUserData = stateManager.getUserData(userId);
            const disputePrep = await prepareDispute(disputeUserData.disputeTopic, disputeUserData.disputeFacts, text);
            
            stateManager.setState(userId, STATES.DISPUTE_PREVIEW);
            return await sendTelegramMessage(chatId, disputePrep, {
                inline_keyboard: [
                    [{ text: 'üìÑ DOCX —Ç–∞–±–ª–∏—á–∫–∞', callback_data: 'download:docx:dispute' }],
                    [{ text: '‚ûï –ï—â—ë –∞—Ä–≥—É–º–µ–Ω—Ç—ã', callback_data: 'dispute:more_arguments' }],
                    ...getNavigationButtons()
                ]
            });

        case STATES.CLAIM_AWAIT_ESSENCE:
            const essenceValidation = validateText(text, 30);
            if (!essenceValidation.valid) {
                return await sendTelegramMessage(chatId, `‚ùå ${essenceValidation.error}`);
            }
            
            stateManager.setUserData(userId, 'claimEssence', text);
            stateManager.setState(userId, STATES.CLAIM_AWAIT_CONTRACT);
            return await sendTelegramMessage(chatId, 
                'üìÑ –û–ø–∏—à–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –∏ –µ–≥–æ —É—Å–ª–æ–≤–∏—è:',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.CLAIM_AWAIT_CONTRACT:
            stateManager.setUserData(userId, 'claimContract', text);
            stateManager.setState(userId, STATES.CLAIM_AWAIT_FACTS);
            return await sendTelegramMessage(chatId, 
                'üìã –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç—ã –∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –¥–µ–ª—É:',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.CLAIM_AWAIT_FACTS:
            stateManager.setState(userId, STATES.CLAIM_PROCESSING);
            const claimUserData = stateManager.getUserData(userId);
            const claimReply = await generateClaimReply(claimUserData.claimEssence, claimUserData.claimContract, text);
            
            stateManager.setState(userId, STATES.CLAIM_PREVIEW);
            return await sendTelegramMessage(chatId, claimReply, {
                inline_keyboard: [
                    [{ text: '‚úâÔ∏è DOCX –ø–∏—Å—å–º–æ', callback_data: 'download:docx:claim' }],
                    [{ text: 'ü™™ –ü–æ–¥–ø–∏—Å—å/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data: 'claim:add_signature' }],
                    ...getNavigationButtons()
                ]
            });

        case STATES.COUNTERPARTY_AWAIT_INN:
            const innValidation = validateINN(text);
            if (!innValidation.valid) {
                return await sendTelegramMessage(chatId, `‚ùå ${innValidation.error}`);
            }
            
            stateManager.setState(userId, STATES.COUNTERPARTY_PROCESSING);
            const counterpartyScore = await checkCounterparty(innValidation.inn);
            
            stateManager.setState(userId, STATES.COUNTERPARTY_PREVIEW);
            return await sendTelegramMessage(chatId, counterpartyScore, {
                inline_keyboard: [
                    [{ text: 'üìÑ PDF –æ—Ç—á—ë—Ç', callback_data: 'download:pdf:counterparty' }],
                    [{ text: 'üîÅ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å —É—Å–ª–æ–≤–∏—è–º–∏', callback_data: 'counterparty:recalculate' }],
                    ...getNavigationButtons()
                ]
            });

        case STATES.INVOICE_AWAIT_BUYER:
            stateManager.setUserData(userId, 'invoiceBuyer', text);
            stateManager.setState(userId, STATES.INVOICE_AWAIT_ITEMS);
            return await sendTelegramMessage(chatId, 
                'üõí –£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏ (–ø–æ–∑–∏—Ü–∏–∏, —Ü–µ–Ω—ã, –ù–î–°):',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.INVOICE_AWAIT_ITEMS:
            stateManager.setUserData(userId, 'invoiceItems', text);
            stateManager.setState(userId, STATES.INVOICE_AWAIT_TERMS);
            return await sendTelegramMessage(chatId, 
                'üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –æ—Ç–≥—Ä—É–∑–∫–∏/–æ–ø–ª–∞—Ç—ã/–¥–æ—Å—Ç–∞–≤–∫–∏:',
                { inline_keyboard: getCancelButton() }
            );

        case STATES.INVOICE_AWAIT_TERMS:
            stateManager.setState(userId, STATES.INVOICE_PROCESSING);
            const invoiceUserData = stateManager.getUserData(userId);
            const invoice = await generateInvoice(invoiceUserData.invoiceBuyer, invoiceUserData.invoiceItems, text);
            
            stateManager.setState(userId, STATES.INVOICE_PREVIEW);
            return await sendTelegramMessage(chatId, invoice, {
                inline_keyboard: [
                    [{ text: 'üìÑ DOCX —Å—á—ë—Ç', callback_data: 'download:docx:invoice' }],
                    [{ text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email', callback_data: 'invoice:send_email' }],
                    ...getNavigationButtons()
                ]
            });

        default:
            // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI
            const aiResponse = await callOpenAI(`–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${text}`);
            return await sendTelegramMessage(chatId, aiResponse);
    }
}

// AI Analysis Functions
async function analyzeContract(fileData, side) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–∑–∏—Ü–∏–∏ ${side}. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–≤–∫–∏.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞**

**–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:**
[—Ä–µ–∑—é–º–µ]

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏:**
‚Ä¢ [—Ä–∏—Å–∫ 1]
‚Ä¢ [—Ä–∏—Å–∫ 2]
‚Ä¢ [—Ä–∏—Å–∫ 3]

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1]
‚Ä¢ [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2]`;

    return await callOpenAI(prompt);
}

async function generateRiskTable(fileData) {
    const prompt = `–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

üìä **–¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤**

| –ü—É–Ω–∫—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ | –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ | –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ | –ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å |
|----------------|---------------|----------------|-------------|
| [–ø—É–Ω–∫—Ç] | üî¥ –í—ã—Å–æ–∫–∏–π | [–æ–ø–∏—Å–∞–Ω–∏–µ] | [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è] |

**–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** [–æ—Ü–µ–Ω–∫–∞]`;

    return await callOpenAI(prompt);
}

async function generateLegalOpinion(topic, field, facts) {
    const prompt = `–°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ "${topic}" –≤ –æ–±–ª–∞—Å—Ç–∏ "${field}".

–§–∞–∫—Ç—ã: ${facts}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**

**1. –ü—Ä–∞–≤–æ–≤–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:**
[–∞–Ω–∞–ª–∏–∑]

**2. –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã:**
[–Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞]

**3. –í—ã–≤–æ–¥—ã:**
[–≤—ã–≤–æ–¥—ã]

**4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
[—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]`;

    return await callOpenAI(prompt);
}

async function analyzeCaseLaw(question, period) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å—É: "${question}" –∑–∞ –ø–µ—Ä–∏–æ–¥ ${period}.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üèõÔ∏è **–ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:**
‚Ä¢ [—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è 1]
‚Ä¢ [—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è 2]

**–ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:**
‚Ä¢ [—Ä–µ—à–µ–Ω–∏–µ 1]
‚Ä¢ [—Ä–µ—à–µ–Ω–∏–µ 2]

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
[—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]`;

    return await callOpenAI(prompt);
}

async function prepareDispute(topic, facts, opponentClaims) {
    const prompt = `–ü–æ–¥–≥–æ—Ç–æ–≤—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–ø–æ—Ä–∞ –ø–æ —Ç–µ–º–µ: "${topic}"

–§–∞–∫—Ç—ã: ${facts}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: ${opponentClaims}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
‚öîÔ∏è **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É**

**–ù–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:**
[–ø–æ–∑–∏—Ü–∏—è]

**–ö–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã:**
‚Ä¢ [–∞—Ä–≥—É–º–µ–Ω—Ç 1]
‚Ä¢ [–∞—Ä–≥—É–º–µ–Ω—Ç 2]

**–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:**
‚Ä¢ [–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 1]
‚Ä¢ [–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 2]

**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:**
[—Å—Ç—Ä–∞—Ç–µ–≥–∏—è]`;

    return await callOpenAI(prompt);
}

async function generateClaimReply(essence, contract, facts) {
    const prompt = `–°–æ–∑–¥–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é.

–°—É—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏: ${essence}
–î–æ–≥–æ–≤–æ—Ä: ${contract}
–§–∞–∫—Ç—ã: ${facts}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üì¨ **–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é**

[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏]`;

    return await callOpenAI(prompt);
}

async function checkCounterparty(inn) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º DaData API
    const dadataResult = await callDaData(inn);
    
    if (dadataResult && dadataResult.suggestions && dadataResult.suggestions.length > 0) {
        const company = dadataResult.suggestions[0];
        const riskLevel = calculateRiskLevel(company);
        const decision = riskLevel > 70 ? 'üî¥ **–û–¢–ö–ê–ó–ê–¢–¨**' : 
                        riskLevel > 40 ? 'üü° **–û–î–û–ë–†–ò–¢–¨ –° –£–°–õ–û–í–ò–Ø–ú–ò**' : 
                        'üü¢ **–û–î–û–ë–†–ò–¢–¨**';
        
        return `üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**

${decision}

**–ò–ù–ù:** ${inn}
**–ö–æ–º–ø–∞–Ω–∏—è:** ${company.value}
**–°—Ç–∞—Ç—É—Å:** ${company.data.state?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
**–†–∏—Å–∫-—É—Ä–æ–≤–µ–Ω—å:** ${riskLevel}%

**–ê–¥—Ä–µ—Å:** ${company.data.address?.value || '–ù–µ —É–∫–∞–∑–∞–Ω'}
**–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:** ${company.data.management?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
${getRiskRecommendations(riskLevel)}`;
    }
    
    // Fallback –Ω–∞ AI
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ò–ù–ù ${inn}. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.`;
    return await callOpenAI(prompt);
}

function calculateRiskLevel(company) {
    let risk = 0;
    
    if (company.data.state?.status !== 'ACTIVE') risk += 30;
    if (!company.data.address) risk += 20;
    if (!company.data.phones) risk += 15;
    if (company.data.capital?.value < 10000) risk += 10;
    
    return Math.min(risk, 100);
}

function getRiskRecommendations(riskLevel) {
    if (riskLevel > 70) {
        return '‚Ä¢ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–∞–∑ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\n‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞';
    } else if (riskLevel > 40) {
        return '‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π';
    } else {
        return '‚Ä¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫\n‚Ä¢ –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç—Å—Ä–æ—á–∫–∞ –ø–ª–∞—Ç–µ–∂–∞';
    }
}

async function generateInvoice(buyer, items, terms) {
    const prompt = `–°–æ–∑–¥–∞–π —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.

–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyer}
–¢–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏: ${items}
–£—Å–ª–æ–≤–∏—è: ${terms}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üßæ **–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É**

**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** [–¥–∞–Ω–Ω—ã–µ]
**–¢–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏:** [—Å–ø–∏—Å–æ–∫]
**–°—É–º–º–∞ –±–µ–∑ –ù–î–°:** [—Å—É–º–º–∞]
**–ù–î–° 20%:** [—Å—É–º–º–∞ –ù–î–°]
**–ò—Ç–æ–≥–æ –∫ –¥–æ–ø–ª–∞—Ç–µ:** [–æ–±—â–∞—è —Å—É–º–º–∞]

**–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:** [—É—Å–ª–æ–≤–∏—è]`;

    return await callOpenAI(prompt);
}

// Main handler function
export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const { message, callback_query } = req.body;

        // Handle callback queries (button presses)
        if (callback_query) {
            const chatId = callback_query.message.chat.id;
            const userId = callback_query.from.id;
            const data = callback_query.callback_data;

            if (data === 'main_menu') {
                stateManager.setState(userId, STATES.IDLE);
                stateManager.clearUserData(userId);
                await sendTelegramMessage(chatId, 
                    '‚öñÔ∏è **–ï–≤–∞ ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
                    getMainMenu()
                );
            } else if (data === 'cancel') {
                stateManager.setState(userId, STATES.IDLE);
                stateManager.clearUserData(userId);
                await sendTelegramMessage(chatId, 
                    '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n‚öñÔ∏è **–ï–≤–∞ ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
                    getMainMenu()
                );
            } else if (data.startsWith('act:')) {
                const action = data.replace('act:', '');
                
                if (action === ACTIONS.EVEREST_PACKAGE) {
                    await sendTelegramMessage(chatId, 
                        'üì¶ **–ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', 
                        getEverestMenu()
                    );
                } else {
                    // Start specific action
                    const startMessage = getActionStartMessage(action);
                    stateManager.setCurrentAction(userId, action);
                    
                    // Set appropriate state
                    switch (action) {
                        case ACTIONS.CONTRACT_REVIEW:
                            stateManager.setState(userId, STATES.CONTRACT_AWAIT_FILE);
                            break;
                        case ACTIONS.RISK_TABLE:
                            stateManager.setState(userId, STATES.RISK_AWAIT_FILE);
                            break;
                        case ACTIONS.LEGAL_OPINION:
                            stateManager.setState(userId, STATES.OPINION_AWAIT_TOPIC);
                            break;
                        case ACTIONS.CASE_LAW:
                            stateManager.setState(userId, STATES.CASE_AWAIT_QUESTION);
                            break;
                        case ACTIONS.DISPUTE_PREP:
                            stateManager.setState(userId, STATES.DISPUTE_AWAIT_TOPIC);
                            break;
                        case ACTIONS.CLAIM_REPLY:
                            stateManager.setState(userId, STATES.CLAIM_AWAIT_ESSENCE);
                            break;
                        case ACTIONS.COUNTERPARTY_SCORE:
                            stateManager.setState(userId, STATES.COUNTERPARTY_AWAIT_INN);
                            break;
                        case ACTIONS.INVOICE:
                            stateManager.setState(userId, STATES.INVOICE_AWAIT_BUYER);
                            break;
                    }
                    
                    await sendTelegramMessage(chatId, startMessage.text, { inline_keyboard: startMessage.buttons });
                }
            }

            return res.status(200).json({ ok: true });
        }

        // Handle regular messages
        if (message) {
            const chatId = message.chat.id;
            const userId = message.from.id;
            const text = message.text;
            const fileData = message.document;

            // Handle /start command
            if (text === '/start') {
                stateManager.setState(userId, STATES.IDLE);
                stateManager.clearUserData(userId);
                await sendTelegramMessage(chatId, 
                    '‚öñÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ï–≤–∞ ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!**\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –¥–æ–≥–æ–≤–æ—Ä–æ–≤\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤\n‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
                    getMainMenu()
                );
                return res.status(200).json({ ok: true });
            }

            // Process user input based on current state
            await processUserInput(userId, chatId, text, fileData);
        }

        return res.status(200).json({ ok: true });

    } catch (error) {
        console.error('Handler error:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

// Helper function to get action start message
function getActionStartMessage(action) {
    const messages = {
        [ACTIONS.CONTRACT_REVIEW]: {
            text: 'üìÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞**\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä (.docx –∏–ª–∏ .pdf) –∏ —É–∫–∞–∂–∏—Ç–µ, —á—å—é —Å—Ç–æ—Ä–æ–Ω—É –∑–∞—â–∏—â–∞–µ–º:\n‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫\n‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
            buttons: getCancelButton()
        },
        [ACTIONS.RISK_TABLE]: {
            text: 'üìä **–¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤**\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä (.docx –∏–ª–∏ .pdf) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤.',
            buttons: getCancelButton()
        },
        [ACTIONS.LEGAL_OPINION]: {
            text: '‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞:',
            buttons: getCancelButton()
        },
        [ACTIONS.CASE_LAW]: {
            text: 'üèõÔ∏è **–ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏**\n\n–£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:',
            buttons: getCancelButton()
        },
        [ACTIONS.DISPUTE_PREP]: {
            text: '‚öîÔ∏è **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É**\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É —Å–ø–æ—Ä–∞:',
            buttons: getCancelButton()
        },
        [ACTIONS.CLAIM_REPLY]: {
            text: 'üì¨ **–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é**\n\n–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏:',
            buttons: getCancelButton()
        },
        [ACTIONS.COUNTERPARTY_SCORE]: {
            text: 'üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
            buttons: getCancelButton()
        },
        [ACTIONS.INVOICE]: {
            text: 'üßæ **–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É**\n\n–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–ò–ù–ù/–ö–ü–ü/–∞–¥—Ä–µ—Å/—Ç–µ–ª):',
            buttons: getCancelButton()
        }
    };
    
    return messages[action] || {
        text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        buttons: getNavigationButtons()
    };
}

