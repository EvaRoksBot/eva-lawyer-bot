// Eva Lawyer Bot - Optimized Version with Fixes
// Addresses all identified issues from comprehensive testing

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8355504616:AAGrfPmGarrAz0YxrycZcy2hg9uT-vaYLGg';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const DADATA_API_KEY = process.env.DADATA_API_KEY || 'ap6te7l4ub6sq1dwt608';
const DADATA_SECRET_KEY = process.env.DADATA_SECRET_KEY || '8bf724e4ee6cc03ce6b6';

// Enhanced error handling and logging
function logError(error, context) {
    console.error(`[${context}] Error:`, error);
    return {
        error: true,
        message: error.message || 'Unknown error',
        context
    };
}

// Optimized callback data helper (max 64 bytes)
function cb(route) {
    return route.slice(0, 64);
}

// Enhanced main menu with better UX
function getMainMenu() {
    return {
        inline_keyboard: [
            [
                { text: "üßæ –î–æ–≥–æ–≤–æ—Ä—ã", callback_data: cb("eva:contracts:menu") },
                { text: "üìö –ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª", callback_data: cb("eva:pkg:menu") }
            ],
            [
                { text: "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", callback_data: cb("eva:inn:prompt") }
            ],
            [
                { text: "üí≥ –°—á—ë—Ç/–∞–∫—Ç—ã", callback_data: cb("eva:docs:billing") },
                { text: "üìà –û—Ç—á—ë—Ç—ã", callback_data: cb("eva:reports:menu") }
            ],
            [
                { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: cb("eva:settings:menu") },
                { text: "üÜò –ü–æ–º–æ—â—å", callback_data: cb("eva:help:menu") }
            ]
        ]
    };
}

// Enhanced contracts submenu
function getContractsMenu() {
    return {
        inline_keyboard: [
            [
                { text: "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data: cb("eva:contracts:analyze") }
            ],
            [
                { text: "‚úèÔ∏è –í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫–∏ (—Ä–µ–¥–ª–∞–π–Ω)", callback_data: cb("eva:contracts:redline") }
            ],
            [
                { text: "üìã –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π", callback_data: cb("eva:contracts:protocol") }
            ],
            [
                { text: "üîç –ò–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã/—Ä–∏—Å–∫–∏", callback_data: cb("eva:contracts:extract") }
            ],
            [
                { text: "‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: cb("eva:home") }
            ]
        ]
    };
}

// Enhanced Everest package submenu
function getEverestPackageMenu() {
    return {
        inline_keyboard: [
            [
                { text: "üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ (—à–∞–±–ª–æ–Ω)", callback_data: cb("eva:pkg:supply") }
            ],
            [
                { text: "üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: cb("eva:pkg:spec") }
            ],
            [
                { text: "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π", callback_data: cb("eva:pkg:protocol") }
            ],
            [
                { text: "üéØ –°–±–æ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞ (3 –≤ 1)", callback_data: cb("eva:pkg:wizard") }
            ],
            [
                { text: "‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: cb("eva:home") }
            ]
        ]
    };
}

// Enhanced INN validation
function validateINN(inn) {
    if (!inn) return false;
    
    // Remove all non-digits
    const cleanINN = inn.replace(/\D/g, '');
    
    // Check length (10 or 12 digits)
    if (cleanINN.length !== 10 && cleanINN.length !== 12) {
        return false;
    }
    
    // Basic checksum validation for 10-digit INN
    if (cleanINN.length === 10) {
        const coefficients = [2, 4, 10, 3, 5, 9, 4, 6, 8];
        let sum = 0;
        for (let i = 0; i < 9; i++) {
            sum += parseInt(cleanINN[i]) * coefficients[i];
        }
        const checksum = (sum % 11) % 10;
        return checksum === parseInt(cleanINN[9]);
    }
    
    return true; // For 12-digit INN, basic validation passed
}

// Enhanced DaData API integration with retry logic
async function checkINNWithDaData(inn) {
    const maxRetries = 3;
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Token ${DADATA_API_KEY}`,
                    'X-Secret': DADATA_SECRET_KEY
                },
                body: JSON.stringify({ query: inn })
            });
            
            if (!response.ok) {
                throw new Error(`DaData API error: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.suggestions && data.suggestions.length > 0) {
                const company = data.suggestions[0];
                return {
                    success: true,
                    data: {
                        name: company.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        inn: company.data.inn || inn,
                        kpp: company.data.kpp || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        address: company.data.address?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        status: company.data.state?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        director: company.data.management?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        okved: company.data.okved || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    }
                };
            } else {
                return {
                    success: false,
                    error: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
                };
            }
        } catch (error) {
            lastError = error;
            console.log(`DaData attempt ${attempt} failed:`, error.message);
            
            if (attempt < maxRetries) {
                // Exponential backoff
                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
            }
        }
    }
    
    return {
        success: false,
        error: `–û—à–∏–±–∫–∞ API –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${lastError?.message || 'Unknown error'}`
    };
}

// Enhanced OpenAI integration with retry logic
async function getAIResponse(prompt, context = 'general') {
    const maxRetries = 3;
    let lastError;
    
    const systemPrompts = {
        general: "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Ç–æ—á–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∞–≤–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        contracts: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º—É –ø—Ä–∞–≤—É. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä—ã, –≤—ã—è–≤–ª—è–π—Ç–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è.",
        inn: "–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É. –ü–æ–º–æ–≥–∞–π—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–∫–æ–π —Ä–∏—Å–∫–æ–≤.",
        everest: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏ –≠–≤–µ—Ä–µ—Å—Ç. –ü–æ–º–æ–≥–∞–π—Ç–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏."
    };
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-4o-mini',
                    messages: [
                        {
                            role: 'system',
                            content: systemPrompts[context] || systemPrompts.general
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: 1500,
                    temperature: 0.7
                })
            });
            
            if (!response.ok) {
                throw new Error(`OpenAI API error: ${response.status}`);
            }
            
            const data = await response.json();
            return data.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
            
        } catch (error) {
            lastError = error;
            console.log(`OpenAI attempt ${attempt} failed:`, error.message);
            
            if (attempt < maxRetries) {
                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
            }
        }
    }
    
    return `–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (–û—à–∏–±–∫–∞: ${lastError?.message || 'Unknown'})`;
}

// Enhanced Telegram API helper with retry logic
async function sendTelegramMessage(chatId, text, replyMarkup = null) {
    const maxRetries = 3;
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const payload = {
                chat_id: chatId,
                text: text,
                parse_mode: 'HTML'
            };
            
            if (replyMarkup) {
                payload.reply_markup = replyMarkup;
            }
            
            const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });
            
            if (!response.ok) {
                throw new Error(`Telegram API error: ${response.status}`);
            }
            
            return await response.json();
            
        } catch (error) {
            lastError = error;
            console.log(`Telegram attempt ${attempt} failed:`, error.message);
            
            if (attempt < maxRetries) {
                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
            }
        }
    }
    
    throw lastError;
}

// Enhanced callback query handler
async function answerCallbackQuery(callbackQueryId, text = null) {
    try {
        const payload = { callback_query_id: callbackQueryId };
        if (text) payload.text = text;
        
        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
    } catch (error) {
        console.error('Failed to answer callback query:', error);
    }
}

// Main webhook handler
export default async function handler(req, res) {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method === 'GET') {
        return res.status(200).json({
            status: 'Eva Lawyer Bot - Optimized Version',
            timestamp: new Date().toISOString(),
            version: '3.0.0',
            features: [
                'Enhanced error handling',
                'Retry logic for all APIs',
                'Improved menu structure',
                'Better UX messages',
                'Optimized performance'
            ]
        });
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const update = req.body;
        
        // Handle regular messages
        if (update.message) {
            const chatId = update.message.chat.id;
            const text = update.message.text;
            
            if (text === '/start') {
                await sendTelegramMessage(
                    chatId,
                    `üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva Lawyer Bot!</b>

ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å:

üìÑ <b>–ê–Ω–∞–ª–∏–∑–æ–º –¥–æ–≥–æ–≤–æ—Ä–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–∞–≤–æ–∫
üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤</b> - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ò–ù–ù
üìö <b>–ü–∞–∫–µ—Ç–æ–º ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª</b> - –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
üíº <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏</b> - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`,
                    getMainMenu()
                );
            } else if (validateINN(text)) {
                // Handle INN input
                await sendTelegramMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù...');
                
                const innResult = await checkINNWithDaData(text);
                
                if (innResult.success) {
                    const company = innResult.data;
                    const message = `üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–µ</b>

üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${company.name}
üÜî <b>–ò–ù–ù:</b> ${company.inn}
üèõÔ∏è <b>–ö–ü–ü:</b> ${company.kpp}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${company.address}
üìà <b>–°—Ç–∞—Ç—É—Å:</b> ${company.status}
üë§ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> ${company.director}
üè≠ <b>–û–ö–í–≠–î:</b> ${company.okved}

‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ï–ì–†–Æ–õ`;
                    
                    await sendTelegramMessage(chatId, message);
                } else {
                    await sendTelegramMessage(
                        chatId,
                        `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù</b>

${innResult.error}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ò–ù–ù
‚Ä¢ –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API`
                    );
                }
            } else {
                // Handle general questions
                const aiResponse = await getAIResponse(text, 'general');
                await sendTelegramMessage(chatId, `ü§ñ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:</b>\n\n${aiResponse}`);
            }
        }
        
        // Handle callback queries
        if (update.callback_query) {
            const callbackQuery = update.callback_query;
            const chatId = callbackQuery.message.chat.id;
            const data = callbackQuery.data;
            
            await answerCallbackQuery(callbackQuery.id);
            
            switch (data) {
                case 'eva:home':
                    await sendTelegramMessage(
                        chatId,
                        'üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Eva Lawyer Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:',
                        getMainMenu()
                    );
                    break;
                    
                case 'eva:contracts:menu':
                    await sendTelegramMessage(
                        chatId,
                        'üìÑ <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                        getContractsMenu()
                    );
                    break;
                    
                case 'eva:pkg:menu':
                    await sendTelegramMessage(
                        chatId,
                        'üìö <b>–ü–∞–∫–µ—Ç ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª</b>\n\n–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:',
                        getEverestPackageMenu()
                    );
                    break;
                    
                case 'eva:inn:prompt':
                    await sendTelegramMessage(
                        chatId,
                        'üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞</b>\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ï–ì–†–Æ–õ.'
                    );
                    break;
                    
                case 'eva:contracts:analyze':
                    await sendTelegramMessage(
                        chatId,
                        'üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞</b>\n\nüìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ (PDF, DOC, DOCX) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.'
                    );
                    break;
                    
                case 'eva:contracts:redline':
                    await sendTelegramMessage(
                        chatId,
                        '‚úèÔ∏è <b>–†–µ–¥–ª–∞–π–Ω –¥–æ–≥–æ–≤–æ—Ä–∞</b>\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–µ–¥–ª–∞–π–Ω.'
                    );
                    break;
                    
                case 'eva:pkg:supply':
                    await sendTelegramMessage(
                        chatId,
                        'üìÑ <b>–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ ¬´–≠–≤–µ—Ä–µ—Å—Ç¬ª</b>\n\nüìã –ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.'
                    );
                    break;
                    
                case 'eva:help:menu':
                    await sendTelegramMessage(
                        chatId,
                        `üÜò <b>–°–ø—Ä–∞–≤–∫–∞ Eva Lawyer Bot</b>

üìñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ò–ò
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –ï–ì–†–Æ–õ
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_eva_bot`,
                        getMainMenu()
                    );
                    break;
                    
                default:
                    await sendTelegramMessage(
                        chatId,
                        '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                        getMainMenu()
                    );
            }
        }
        
        return res.status(200).json({ ok: true });
        
    } catch (error) {
        console.error('Webhook error:', error);
        return res.status(200).json({ 
            ok: true, 
            error: 'Internal error handled gracefully' 
        });
    }
}

