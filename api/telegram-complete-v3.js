// Eva Lawyer Bot - Complete Implementation v3
// Implements all 13 stages from technical specification with FSM and enhanced features

const { VectorMemory } = require('./modules/vector-memory');
const { ReActAgent } = require('./modules/react-planner');
const { handleAction } = require('./modules/action-handlers');
const { addQuickActions, handleActionResult } = require('./modules/enhanced-ui');

// Initialize services
const vectorMemory = new VectorMemory(process.env.OPENAI_API_KEY);
const reactAgent = new ReActAgent(process.env.OPENAI_API_KEY, process.env.ASSISTANT_ID);

// User sessions storage
const userSessions = {};

// FSM States
const FSM_STATES = {
  IDLE: 'idle',
  WAITING_DOCUMENT: 'waiting_document',
  WAITING_INN: 'waiting_inn',
  WAITING_LETTER: 'waiting_letter',
  WAITING_TOPIC: 'waiting_topic',
  PROCESSING: 'processing'
};

/**
 * Main webhook handler
 */
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    
    // Handle different update types
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('[Bot] Error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

/**
 * Handle incoming messages
 */
async function handleMessage(message) {
  const chatId = message.chat.id;
  const userId = message.from.id;
  const text = message.text;
  
  // Initialize user session
  if (!userSessions[userId]) {
    userSessions[userId] = {
      state: FSM_STATES.IDLE,
      context: {},
      lastActivity: Date.now()
    };
  }
  
  const userSession = userSessions[userId];
  userSession.lastActivity = Date.now();
  
  try {
    // Handle commands
    if (text?.startsWith('/')) {
      await handleCommand(message, userSession);
      return;
    }
    
    // Handle document uploads
    if (message.document || message.photo) {
      await handleDocumentUpload(message, userSession);
      return;
    }
    
    // Handle text based on FSM state
    await handleTextMessage(message, userSession);
    
  } catch (error) {
    console.error('[Bot] Message handling error:', error);
    await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
}

/**
 * Handle callback queries (button presses)
 */
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  try {
    // Answer callback query
    await answerCallbackQuery(callbackQuery.id);
    
    // Get user session
    const userSession = userSessions[userId] || {
      state: FSM_STATES.IDLE,
      context: {},
      lastActivity: Date.now()
    };
    
    // Handle different callback types
    if (data.startsWith('MENU:')) {
      await handleMenuNavigation(data, chatId, messageId, userSession);
    } else if (data.startsWith('ACT:')) {
      await handleActionCallback(data, chatId, messageId, userSession);
    } else if (data.startsWith('FSM:')) {
      await handleFSMTransition(data, chatId, messageId, userSession);
    }
    
  } catch (error) {
    console.error('[Bot] Callback handling error:', error);
    await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.');
  }
}

/**
 * Handle commands
 */
async function handleCommand(message, userSession) {
  const chatId = message.chat.id;
  const command = message.text.split(' ')[0];
  
  switch (command) {
    case '/start':
      userSession.state = FSM_STATES.IDLE;
      await sendWelcomeMessage(chatId);
      break;
      
    case '/help':
      await sendHelpMessage(chatId);
      break;
      
    case '/clear':
      userSession.state = FSM_STATES.IDLE;
      userSession.context = {};
      vectorMemory.clearContext(chatId.toString());
      await sendMessage(chatId, 'üóë –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É!');
      break;
      
    case '/status':
      await sendStatusMessage(chatId, userSession);
      break;
      
    default:
      await sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
  }
}

/**
 * Handle document uploads
 */
async function handleDocumentUpload(message, userSession) {
  const chatId = message.chat.id;
  const userId = message.from.id;
  
  try {
    await sendTypingAction(chatId);
    
    let fileInfo;
    let fileContent = '';
    
    if (message.document) {
      fileInfo = message.document;
      // In real implementation, download and process file
      fileContent = `[–î–æ–∫—É–º–µ–Ω—Ç: ${fileInfo.file_name}]`;
    } else if (message.photo) {
      fileInfo = message.photo[message.photo.length - 1];
      // In real implementation, use OCR to extract text
      fileContent = '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞]';
    }
    
    // Store document in context
    userSession.context.lastDocument = fileContent;
    userSession.context.lastDocumentId = fileInfo.file_id;
    userSession.context.lastDocumentName = fileInfo.file_name || 'image.jpg';
    
    // Store in vector memory
    await vectorMemory.add(
      userId,
      'episodic',
      `–ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: ${fileContent}`,
      { type: 'document_upload', file_id: fileInfo.file_id }
    );
    
    // Send confirmation with actions
    const keyboard = [
      [
        { text: 'üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'ACT:CONTRACT:ANALYZE' },
        { text: 'üìà –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'ACT:CONTRACT:RISKTABLE' }
      ],
      [
        { text: 'üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: 'ACT:CONTRACT:PROTOCOL' },
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'MENU:MAIN' }
      ]
    ];
    
    await sendMessage(chatId, 
      `‚úÖ –î–æ–∫—É–º–µ–Ω—Ç "${userSession.context.lastDocumentName}" –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      { reply_markup: { inline_keyboard: keyboard } }
    );
    
  } catch (error) {
    console.error('[Bot] Document upload error:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
  }
}

/**
 * Handle text messages based on FSM state
 */
async function handleTextMessage(message, userSession) {
  const chatId = message.chat.id;
  const userId = message.from.id;
  const text = message.text;
  
  switch (userSession.state) {
    case FSM_STATES.WAITING_INN:
      await handleInnInput(text, chatId, userId, userSession);
      break;
      
    case FSM_STATES.WAITING_LETTER:
      await handleLetterInput(text, chatId, userId, userSession);
      break;
      
    case FSM_STATES.WAITING_TOPIC:
      await handleTopicInput(text, chatId, userId, userSession);
      break;
      
    case FSM_STATES.IDLE:
    default:
      await handleGeneralInput(text, chatId, userId, userSession);
      break;
  }
}

/**
 * Handle INN input
 */
async function handleInnInput(text, chatId, userId, userSession) {
  const inn = text.replace(/\D/g, ''); // Remove non-digits
  
  if (inn.length !== 10 && inn.length !== 12) {
    await sendMessage(chatId, '‚ùå –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä (–¥–ª—è –Æ–õ) –∏–ª–∏ 12 —Ü–∏—Ñ—Ä (–¥–ª—è –ò–ü).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }
  
  // Store INN in context
  userSession.context.lastInn = inn;
  userSession.state = FSM_STATES.IDLE;
  
  // Store in vector memory
  await vectorMemory.add(
    userId,
    'episodic',
    `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å –ò–ù–ù: ${inn}`,
    { type: 'inn_check', inn }
  );
  
  await sendTypingAction(chatId);
  
  try {
    // Check counterparty using DaData
    const companyData = await checkCounterpartyByINN(inn);
    
    if (companyData) {
      const response = await formatCounterpartyResponse(companyData);
      
      const keyboard = [
        [
          { text: 'üìä –ü–æ–ª–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥', callback_data: 'ACT:KYC:SCORING' },
          { text: 'üö© Red Flags', callback_data: 'ACT:KYC:RED_FLAGS' }
        ],
        [
          { text: 'üìã –ß–µ–∫-–ª–∏—Å—Ç', callback_data: 'ACT:KYC:CHECKLIST' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'MENU:MAIN' }
        ]
      ];
      
      await sendMessage(chatId, response, { reply_markup: { inline_keyboard: keyboard } });
    } else {
      await sendMessage(chatId, `‚ùå –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
    }
    
  } catch (error) {
    console.error('[Bot] INN check error:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.');
  }
}

/**
 * Handle letter input
 */
async function handleLetterInput(text, chatId, userId, userSession) {
  userSession.context.lastLetter = text;
  userSession.state = FSM_STATES.IDLE;
  
  // Store in vector memory
  await vectorMemory.add(
    userId,
    'episodic',
    `–ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: ${text.slice(0, 200)}...`,
    { type: 'letter_input' }
  );
  
  const keyboard = [
    [
      { text: 'üìù –ö–∞—Ä–∫–∞—Å –æ—Ç–≤–µ—Ç–∞', callback_data: 'ACT:LETTER:SKELETON' },
      { text: 'üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç', callback_data: 'ACT:LETTER:FULL' }
    ],
    [
      { text: '‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'ACT:LETTER:LEGAL_OPINION' },
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'MENU:MAIN' }
    ]
  ];
  
  await sendMessage(chatId, 
    '‚úÖ –ü–∏—Å—å–º–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:',
    { reply_markup: { inline_keyboard: keyboard } }
  );
}

/**
 * Handle topic input
 */
async function handleTopicInput(text, chatId, userId, userSession) {
  userSession.context.lastTopic = text;
  userSession.state = FSM_STATES.PROCESSING;
  
  await sendTypingAction(chatId);
  
  try {
    // Generate legal opinion using AI
    const response = await generateLegalOpinion(text, userId);
    
    userSession.state = FSM_STATES.IDLE;
    
    const keyboard = [
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'MENU:MAIN' }]
    ];
    
    await sendMessage(chatId, response, { reply_markup: { inline_keyboard: keyboard } });
    
  } catch (error) {
    console.error('[Bot] Legal opinion error:', error);
    userSession.state = FSM_STATES.IDLE;
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è.');
  }
}

/**
 * Handle general input (auto-detect intent)
 */
async function handleGeneralInput(text, chatId, userId, userSession) {
  // Auto-detect INN
  const innMatch = text.match(/\b(\d{10}|\d{12})\b/);
  if (innMatch) {
    await handleInnInput(innMatch[1], chatId, userId, userSession);
    return;
  }
  
  // Auto-detect legal question
  const legalKeywords = ['–¥–æ–≥–æ–≤–æ—Ä', '–ø—Ä–∞–≤–æ', '–∑–∞–∫–æ–Ω', '—Å—É–¥', '–∏—Å–∫', '–ø—Ä–µ—Ç–µ–Ω–∑–∏—è', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'];
  const hasLegalKeywords = legalKeywords.some(keyword => 
    text.toLowerCase().includes(keyword)
  );
  
  if (hasLegalKeywords) {
    await sendTypingAction(chatId);
    
    try {
      // Get memory context
      const memoryContext = await vectorMemory.enrichWithMemory(userId, text, 6);
      
      // Use ReAct agent for complex legal analysis
      const reactResult = await reactAgent.execute(
        text,
        memoryContext,
        {},
        { userSession }
      );
      
      if (reactResult.success) {
        await sendMessage(chatId, reactResult.answer);
        
        // Record interaction
        await vectorMemory.recordInteraction(
          userId,
          text,
          reactResult.answer,
          { type: 'legal_consultation' }
        );
      } else {
        await sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.');
      }
      
    } catch (error) {
      console.error('[Bot] Legal consultation error:', error);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.');
    }
    
    return;
  }
  
  // Default response with main menu
  await sendWelcomeMessage(chatId);
}

/**
 * Handle menu navigation
 */
async function handleMenuNavigation(data, chatId, messageId, userSession) {
  const section = data.replace('MENU:', '');
  
  const menus = {
    'MAIN': createMainMenu(),
    'CONTRACT': createContractMenu(),
    'KYC': createKycMenu(),
    'LETTER': createLetterMenu(),
    'TEMPLATES': createTemplatesMenu(),
    'UTILS': createUtilsMenu(),
    'SETTINGS': createSettingsMenu(),
    'FAQ': createFaqMenu()
  };
  
  const menu = menus[section];
  if (menu) {
    await editMessage(chatId, messageId, menu.text, { reply_markup: menu.reply_markup });
  }
}

/**
 * Handle action callbacks
 */
async function handleActionCallback(data, chatId, messageId, userSession) {
  const userId = chatId; // Assuming chatId = userId for simplicity
  
  try {
    const actionResult = await handleAction(data, chatId, messageId, userSession.context);
    await handleActionResult(actionResult, chatId, messageId, userId);
    
  } catch (error) {
    console.error('[Bot] Action callback error:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.');
  }
}

/**
 * Handle FSM transitions
 */
async function handleFSMTransition(data, chatId, messageId, userSession) {
  const transition = data.replace('FSM:', '');
  
  switch (transition) {
    case 'WAIT_INN':
      userSession.state = FSM_STATES.WAITING_INN;
      await editMessage(chatId, messageId, 
        'üìù –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):\n\n–ü—Ä–∏–º–µ—Ä: 7707083893'
      );
      break;
      
    case 'WAIT_LETTER':
      userSession.state = FSM_STATES.WAITING_LETTER;
      await editMessage(chatId, messageId, 
        'üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å:'
      );
      break;
      
    case 'WAIT_TOPIC':
      userSession.state = FSM_STATES.WAITING_TOPIC;
      await editMessage(chatId, messageId, 
        '‚öñÔ∏è –û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è:'
      );
      break;
      
    case 'RESET':
      userSession.state = FSM_STATES.IDLE;
      userSession.context = {};
      await sendWelcomeMessage(chatId);
      break;
  }
}

// Menu creation functions
function createMainMenu() {
  return {
    text: `ü§ñ **Eva Lawyer Bot**

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ò–ò

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ò–ù–ù
üì¨ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–∏—Å—å–º–∞
üìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä', callback_data: 'MENU:CONTRACT' },
          { text: 'üîç –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', callback_data: 'MENU:KYC' }
        ],
        [
          { text: 'üì¨ –ü–∏—Å—å–º–æ', callback_data: 'MENU:LETTER' },
          { text: 'üìë –®–∞–±–ª–æ–Ω—ã', callback_data: 'MENU:TEMPLATES' }
        ],
        [
          { text: 'üõ† –£—Ç–∏–ª–∏—Ç—ã', callback_data: 'MENU:UTILS' },
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'MENU:SETTINGS' }
        ],
        [
          { text: '‚ùî FAQ', callback_data: 'MENU:FAQ' }
        ]
      ]
    }
  };
}

function createContractMenu() {
  return {
    text: `üìÑ **–†–∞–±–æ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏**

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', callback_data: 'ACT:CONTRACT:UPLOAD' },
          { text: 'üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data: 'ACT:CONTRACT:ANALYZE' }
        ],
        [
          { text: 'üìà –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'ACT:CONTRACT:RISKTABLE' },
          { text: 'üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', callback_data: 'ACT:CONTRACT:PROTOCOL' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

function createKycMenu() {
  return {
    text: `üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤**

–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìù –í–≤–µ—Å—Ç–∏ –ò–ù–ù', callback_data: 'FSM:WAIT_INN' },
          { text: 'üìä –ü–æ–ª–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥', callback_data: 'ACT:KYC:SCORING' }
        ],
        [
          { text: 'üìã –ß–µ–∫-–ª–∏—Å—Ç', callback_data: 'ACT:KYC:CHECKLIST' },
          { text: 'üö© Red Flags', callback_data: 'ACT:KYC:RED_FLAGS' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

function createLetterMenu() {
  return {
    text: `üì¨ **–†–∞–±–æ—Ç–∞ —Å –ø–∏—Å—å–º–∞–º–∏**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üì• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ', callback_data: 'FSM:WAIT_LETTER' },
          { text: 'üìù –ö–∞—Ä–∫–∞—Å –æ—Ç–≤–µ—Ç–∞', callback_data: 'ACT:LETTER:SKELETON' }
        ],
        [
          { text: 'üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç', callback_data: 'ACT:LETTER:FULL' },
          { text: '‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'ACT:LETTER:LEGAL_OPINION' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

function createTemplatesMenu() {
  return {
    text: `üìë **–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'ACT:TPL:SUPPLY' },
          { text: 'üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data: 'ACT:TPL:SPEC' }
        ],
        [
          { text: 'üìù –ü—Ä–æ—Ç–æ–∫–æ–ª', callback_data: 'ACT:TPL:PROTOCOL' },
          { text: 'üßæ –°—á–µ—Ç', callback_data: 'ACT:TPL:INVOICE' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

function createUtilsMenu() {
  return {
    text: `üõ† **–£—Ç–∏–ª–∏—Ç—ã**

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤', callback_data: 'ACT:UTIL:RISKS_TABLE' },
          { text: 'üìù –¢—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫', callback_data: 'ACT:UTIL:WORDING_TRIPLE' }
        ],
        [
          { text: '‚öîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ø–æ—Ä—É', callback_data: 'ACT:UTIL:DISPUTE_PREP' },
          { text: '‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', callback_data: 'FSM:WAIT_TOPIC' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

function createSettingsMenu() {
  return {
    text: `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üåê –Ø–∑—ã–∫', callback_data: 'ACT:SET:LANG' },
          { text: 'üìÑ –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞', callback_data: 'ACT:SET:FORMAT' }
        ],
        [
          { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'ACT:SET:NOTIF' },
          { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç', callback_data: 'ACT:SET:CLEAR' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

function createFaqMenu() {
  return {
    text: `‚ùî **–°–ø—Ä–∞–≤–∫–∞**

–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:`,
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'ACT:FAQ:COMMON' },
          { text: '‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data: 'ACT:FAQ:HOW' }
        ],
        [
          { text: 'üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', callback_data: 'ACT:FAQ:PRIVACY' },
          { text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'ACT:FAQ:SUPPORT' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'MENU:MAIN' }
        ]
      ]
    }
  };
}

// Utility functions
async function sendWelcomeMessage(chatId) {
  const menu = createMainMenu();
  await sendMessage(chatId, menu.text, { reply_markup: menu.reply_markup });
}

async function sendHelpMessage(chatId) {
  const helpText = `üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Eva Lawyer Bot**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
3. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ PDF, DOCX, TXT —Ñ–∞–π–ª—ã
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR)
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @support_eva_bot`;

  await sendMessage(chatId, helpText);
}

async function sendStatusMessage(chatId, userSession) {
  const statusText = `üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏**

**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** ${userSession.state}
**–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç:** ${userSession.context.lastDocumentName || '–ù–µ—Ç'}
**–ü–æ—Å–ª–µ–¥–Ω–∏–π –ò–ù–ù:** ${userSession.context.lastInn || '–ù–µ—Ç'}
**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${new Date(userSession.lastActivity).toLocaleString('ru-RU')}

**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
${Object.keys(userSession.context).length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`;

  await sendMessage(chatId, statusText);
}

// API functions
async function sendMessage(chatId, text, options = {}) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error('[Bot] No Telegram token configured');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
        ...options
      })
    });

    if (!response.ok) {
      console.error('[Bot] Send message error:', await response.text());
    }
  } catch (error) {
    console.error('[Bot] Send message error:', error);
  }
}

async function editMessage(chatId, messageId, text, options = {}) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) return;

  try {
    await fetch(`https://api.telegram.org/bot${token}/editMessageText`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text: text,
        parse_mode: 'Markdown',
        ...options
      })
    });
  } catch (error) {
    console.error('[Bot] Edit message error:', error);
  }
}

async function sendTypingAction(chatId) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) return;

  try {
    await fetch(`https://api.telegram.org/bot${token}/sendChatAction`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        action: 'typing'
      })
    });
  } catch (error) {
    console.error('[Bot] Send typing action error:', error);
  }
}

async function answerCallbackQuery(callbackQueryId, text = '') {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) return;

  try {
    await fetch(`https://api.telegram.org/bot${token}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text
      })
    });
  } catch (error) {
    console.error('[Bot] Answer callback query error:', error);
  }
}

// Business logic functions
async function checkCounterpartyByINN(inn) {
  try {
    const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Token ${process.env.DADATA_API_KEY}`,
        'X-Secret': process.env.DADATA_SECRET_KEY
      },
      body: JSON.stringify({ query: inn })
    });

    if (!response.ok) {
      throw new Error(`DaData API error: ${response.status}`);
    }

    const data = await response.json();
    return data.suggestions?.[0]?.data || null;
  } catch (error) {
    console.error('[Bot] DaData API error:', error);
    return null;
  }
}

function formatCounterpartyResponse(companyData) {
  const name = companyData.name?.full_with_opf || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const inn = companyData.inn || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const status = companyData.state?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const regDate = companyData.state?.registration_date || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const address = companyData.address?.value || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  
  const statusEmoji = {
    'ACTIVE': '‚úÖ',
    'LIQUIDATING': '‚ö†Ô∏è',
    'LIQUIDATED': '‚ùå',
    'REORGANIZING': 'üîÑ'
  }[status] || '‚ùì';
  
  return `üè¢ **${name}**

${statusEmoji} **–°—Ç–∞—Ç—É—Å:** ${status}
üÜî **–ò–ù–ù:** ${inn}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** ${regDate}
üìç **–ê–¥—Ä–µ—Å:** ${address}

‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ï–ì–†–Æ–õ`;
}

async function generateLegalOpinion(topic, userId) {
  try {
    // Get memory context
    const memoryContext = await vectorMemory.enrichWithMemory(userId, topic, 6);
    
    // Build prompt with context
    let prompt = `–ü–æ–¥–≥–æ—Ç–æ–≤—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ: ${topic}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è:
1. –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
2. –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞
3. –ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
4. –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`;

    if (memoryContext.length > 0) {
      const contextText = memoryContext
        .map(m => `‚Ä¢ ${m.content.slice(0, 200)}...`)
        .join('\n');
      prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:\n${contextText}\n\n${prompt}`;
    }

    // Call OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—ã–µ, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.3
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const result = await response.json();
    const opinion = result.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.';

    // Record in memory
    await vectorMemory.recordInteraction(
      userId,
      topic,
      opinion,
      { type: 'legal_opinion' }
    );

    return `‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**\n\n${opinion}`;
    
  } catch (error) {
    console.error('[Bot] Legal opinion generation error:', error);
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è.';
  }
}

// Export for testing
module.exports = {
  userSessions,
  vectorMemory,
  reactAgent,
  FSM_STATES
};

