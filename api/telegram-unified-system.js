// Eva Lawyer Bot - Enhanced Logic v6.1
// –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ —Å GPT API, –ø—Ä–æ–º–ø—Ç–∞–º–∏, —Å–∫–æ—Ä–∏–Ω–≥–æ–º –∏ inline –º–µ–Ω—é

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
const UnifiedMenuSystem = require('./modules/unified-menu-system');
const UnifiedMessageHandler = require('./modules/unified-message-handler');
const UnifiedAIOrchestrator = require('./modules/unified-ai-orchestrator');
const AssistantTools = require('./modules/assistant-tools');
const EnhancedUISystem = require('./modules/enhanced-ui-system');
const PersonalizationEngine = require('./modules/personalization-engine');
const InteractiveHandlers = require('./modules/interactive-handlers');

class EvaLawyerBotUnified {
    constructor() {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            telegramToken: process.env.TELEGRAM_BOT_TOKEN,
            openaiApiKey: process.env.OPENAI_API_KEY,
            assistantId: process.env.OPENAI_ASSISTANT_ID,
            dadataApiKey: process.env.DADATA_API_KEY,
            dadataSecret: process.env.DADATA_SECRET_KEY,
            webhookSecret: process.env.TG_WEBHOOK_SECRET,
            environment: process.env.NODE_ENV || 'production'
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.validateConfiguration();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.bot = null;
        this.openai = null;
        
        // –°–∏—Å—Ç–µ–º—ã
        this.menuSystem = null;
        this.messageHandler = null;
        this.aiOrchestrator = null;
        this.assistantTools = null;
        this.uiSystem = null;
        this.personalization = null;
        this.interactiveHandlers = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        this.isInitialized = false;
        this.startTime = Date.now();
        
        // –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        this.systemMetrics = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            uptime: 0,
            memoryUsage: 0,
            activeUsers: new Set(),
            errorLog: []
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initialize();
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validateConfiguration() {
        const required = ['telegramToken', 'openaiApiKey'];
        const missing = required.filter(key => !this.config[key]);
        
        if (missing.length > 0) {
            throw new Error(`Missing required configuration: ${missing.join(', ')}`);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ñ–∏—Å–∞–º–∏)
        this.config.telegramToken = this.config.telegramToken.trim();
        this.config.openaiApiKey = this.config.openaiApiKey.trim();
        
        console.log('‚úÖ Configuration validated successfully');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    async initialize() {
        try {
            console.log('üöÄ Initializing Eva Lawyer Bot Unified System...');
            
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
            await this.initializeTelegramBot();
            
            // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
            await this.initializeOpenAI();
            
            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Orchestrator
            await this.initializeAIOrchestrator();
            
            // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Assistant Tools
            await this.initializeAssistantTools();
            
            // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI System
            await this.initializeUISystem();
            
            // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Personalization
            await this.initializePersonalization();
            
            // 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Menu System
            await this.initializeMenuSystem();
            
            // 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Interactive Handlers
            await this.initializeInteractiveHandlers();
            
            // 9. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Message Handler
            await this.initializeMessageHandler();
            
            // 10. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            await this.setupEventHandlers();
            
            // 11. –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á
            await this.startSystemTasks();
            
            this.isInitialized = true;
            console.log('‚úÖ Eva Lawyer Bot Unified System initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize system:', error);
            throw error;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
    async initializeTelegramBot() {
        try {
            this.bot = new TelegramBot(this.config.telegramToken, {
                webHook: this.config.environment === 'production'
            });
            
            if (this.config.environment === 'production') {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
                const webhookUrl = `${process.env.VERCEL_URL || 'https://your-domain.vercel.app'}/api/telegram-unified-system`;
                await this.bot.setWebHook(webhookUrl, {
                    secret_token: this.config.webhookSecret,
                    drop_pending_updates: true
                });
                console.log('‚úÖ Telegram webhook configured');
            } else {
                // Polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                this.bot.startPolling();
                console.log('‚úÖ Telegram polling started');
            }
            
        } catch (error) {
            console.error('‚ùå Telegram Bot initialization failed:', error);
            throw error;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
    async initializeOpenAI() {
        try {
            this.openai = new OpenAI({
                apiKey: this.config.openaiApiKey
            });
            
            // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await this.openai.models.list();
            console.log('‚úÖ OpenAI connection established');
            
        } catch (error) {
            console.error('‚ùå OpenAI initialization failed:', error);
            throw error;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Orchestrator
    async initializeAIOrchestrator() {
        try {
            this.aiOrchestrator = new UnifiedAIOrchestrator(
                this.config.openaiApiKey,
                this.config.assistantId
            );
            
            await this.aiOrchestrator.initialize();
            console.log('‚úÖ AI Orchestrator initialized');
            
        } catch (error) {
            console.error('‚ùå AI Orchestrator initialization failed:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ AI Orchestrator
            this.aiOrchestrator = null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Assistant Tools
    async initializeAssistantTools() {
        try {
            this.assistantTools = new AssistantTools(
                this.config.dadataApiKey,
                this.config.dadataSecret
            );
            
            console.log('‚úÖ Assistant Tools initialized');
            
        } catch (error) {
            console.error('‚ùå Assistant Tools initialization failed:', error);
            this.assistantTools = null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI System
    async initializeUISystem() {
        try {
            this.uiSystem = new EnhancedUISystem();
            console.log('‚úÖ UI System initialized');
            
        } catch (error) {
            console.error('‚ùå UI System initialization failed:', error);
            this.uiSystem = null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Personalization
    async initializePersonalization() {
        try {
            this.personalization = new PersonalizationEngine();
            console.log('‚úÖ Personalization Engine initialized');
            
        } catch (error) {
            console.error('‚ùå Personalization initialization failed:', error);
            this.personalization = null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Menu System
    async initializeMenuSystem() {
        try {
            this.menuSystem = new UnifiedMenuSystem(
                this.uiSystem,
                this.personalization
            );
            
            console.log('‚úÖ Menu System initialized');
            
        } catch (error) {
            console.error('‚ùå Menu System initialization failed:', error);
            this.menuSystem = null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Interactive Handlers
    async initializeInteractiveHandlers() {
        try {
            this.interactiveHandlers = new InteractiveHandlers(
                this.assistantTools,
                this.aiOrchestrator
            );
            
            console.log('‚úÖ Interactive Handlers initialized');
            
        } catch (error) {
            console.error('‚ùå Interactive Handlers initialization failed:', error);
            this.interactiveHandlers = null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Message Handler
    async initializeMessageHandler() {
        try {
            this.messageHandler = new UnifiedMessageHandler(
                this.bot,
                this.aiOrchestrator,
                this.menuSystem,
                this.assistantTools
            );
            
            console.log('‚úÖ Message Handler initialized');
            
        } catch (error) {
            console.error('‚ùå Message Handler initialization failed:', error);
            throw error; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    async setupEventHandlers() {
        try {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            this.bot.on('message', async (msg) => {
                await this.handleMessage(msg);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
            this.bot.on('callback_query', async (callbackQuery) => {
                await this.handleCallbackQuery(callbackQuery);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            this.bot.on('error', (error) => {
                this.handleError(error);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—à–∏–±–æ–∫
            this.bot.on('webhook_error', (error) => {
                this.handleWebhookError(error);
            });
            
            console.log('‚úÖ Event handlers configured');
            
        } catch (error) {
            console.error('‚ùå Event handlers setup failed:', error);
            throw error;
        }
    }

    // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    async startSystemTasks() {
        try {
            // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            setInterval(() => {
                this.cleanupCache();
            }, 30 * 60 * 1000);
            
            // –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            setInterval(() => {
                this.collectMetrics();
            }, 5 * 60 * 1000);
            
            // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö threads –∫–∞–∂–¥—ã–π —á–∞—Å
            setInterval(() => {
                if (this.aiOrchestrator) {
                    this.aiOrchestrator.cleanupThreads();
                }
            }, 60 * 60 * 1000);
            
            console.log('‚úÖ System tasks started');
            
        } catch (error) {
            console.error('‚ùå System tasks startup failed:', error);
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleMessage(message) {
        const startTime = Date.now();
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            this.systemMetrics.activeUsers.add(message.from.id);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (!this.isInitialized) {
                await this.sendMessage(message.chat.id, '‚è≥ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Message Handler
            const response = await this.messageHandler.handleMessage(message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if (response) {
                await this.sendResponse(message.chat.id, response);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.updateMetrics(startTime, true);
            
        } catch (error) {
            console.error('Error handling message:', error);
            this.updateMetrics(startTime, false);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await this.sendErrorResponse(message.chat.id, error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
    async handleCallbackQuery(callbackQuery) {
        const startTime = Date.now();
        
        try {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback query
            await this.bot.answerCallbackQuery(callbackQuery.id);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Message Handler
            const response = await this.messageHandler.handleCallbackQuery(callbackQuery);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if (response) {
                await this.editOrSendMessage(callbackQuery.message, response);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.updateMetrics(startTime, true);
            
        } catch (error) {
            console.error('Error handling callback query:', error);
            this.updateMetrics(startTime, false);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            await this.sendErrorResponse(callbackQuery.message.chat.id, error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    async sendResponse(chatId, response) {
        try {
            const options = {
                parse_mode: response.parse_mode || 'HTML',
                reply_markup: response.reply_markup,
                disable_web_page_preview: true
            };
            
            await this.bot.sendMessage(chatId, response.text, options);
            
        } catch (error) {
            console.error('Error sending response:', error);
            
            // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await this.bot.sendMessage(chatId, response.text || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            } catch (fallbackError) {
                console.error('Fallback send also failed:', fallbackError);
            }
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async editOrSendMessage(originalMessage, response) {
        try {
            const options = {
                parse_mode: response.parse_mode || 'HTML',
                reply_markup: response.reply_markup,
                disable_web_page_preview: true
            };
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await this.bot.editMessageText(response.text, {
                chat_id: originalMessage.chat.id,
                message_id: originalMessage.message_id,
                ...options
            });
            
        } catch (error) {
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.sendResponse(originalMessage.chat.id, response);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async sendMessage(chatId, text, options = {}) {
        try {
            const defaultOptions = {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                ...options
            };
            
            return await this.bot.sendMessage(chatId, text, defaultOptions);
            
        } catch (error) {
            console.error('Error sending message:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async sendErrorResponse(chatId, error) {
        try {
            let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
            
            // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if (error.message.includes('rate limit')) {
                errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.';
            } else if (error.message.includes('timeout')) {
                errorMessage = '‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            } else if (error.message.includes('API')) {
                errorMessage = 'üîß –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            
            const response = {
                text: errorMessage,
                reply_markup: {
                    inline_keyboard: [[
                        { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'main' },
                        { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'help_menu' }
                    ]]
                }
            };
            
            await this.sendResponse(chatId, response);
            
        } catch (sendError) {
            console.error('Error sending error response:', sendError);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    handleError(error) {
        console.error('Bot error:', error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        this.systemMetrics.errorLog.push({
            type: 'bot_error',
            message: error.message,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if (this.systemMetrics.errorLog.length > 100) {
            this.systemMetrics.errorLog = this.systemMetrics.errorLog.slice(-50);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—à–∏–±–æ–∫
    handleWebhookError(error) {
        console.error('Webhook error:', error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        this.systemMetrics.errorLog.push({
            type: 'webhook_error',
            message: error.message,
            timestamp: Date.now()
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    updateMetrics(startTime, success) {
        this.systemMetrics.totalRequests++;
        
        if (success) {
            this.systemMetrics.successfulRequests++;
        } else {
            this.systemMetrics.failedRequests++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        const responseTime = Date.now() - startTime;
        const total = this.systemMetrics.totalRequests;
        this.systemMetrics.averageResponseTime = 
            (this.systemMetrics.averageResponseTime * (total - 1) + responseTime) / total;
    }

    // –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
    collectMetrics() {
        try {
            // Uptime
            this.systemMetrics.uptime = Date.now() - this.startTime;
            
            // Memory usage
            const memUsage = process.memoryUsage();
            this.systemMetrics.memoryUsage = {
                rss: Math.round(memUsage.rss / 1024 / 1024),
                heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
                heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024)
            };
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
        } catch (error) {
            console.error('Error collecting metrics:', error);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    cleanupCache() {
        try {
            if (this.aiOrchestrator) {
                this.aiOrchestrator.clearCache();
            }
            
            if (this.messageHandler) {
                // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                const handlerStats = this.messageHandler.getHandlerStatistics();
                console.log('üìä Handler stats:', handlerStats);
            }
            
            console.log('üßπ Cache cleanup completed');
            
        } catch (error) {
            console.error('Error during cache cleanup:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    getSystemStatistics() {
        const stats = {
            system: {
                ...this.systemMetrics,
                uptime: Date.now() - this.startTime,
                isInitialized: this.isInitialized,
                activeUsersCount: this.systemMetrics.activeUsers.size
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if (this.aiOrchestrator) {
            stats.ai = this.aiOrchestrator.getStatistics();
        }
        
        if (this.messageHandler) {
            stats.messageHandler = this.messageHandler.getHandlerStatistics();
        }
        
        if (this.menuSystem) {
            stats.menu = this.menuSystem.getStatistics();
        }
        
        return stats;
    }

    // Health check
    async healthCheck() {
        const health = {
            status: 'healthy',
            timestamp: Date.now(),
            uptime: Date.now() - this.startTime,
            components: {}
        };
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot
            health.components.telegram = this.bot ? 'healthy' : 'unhealthy';
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
            if (this.openai) {
                try {
                    await this.openai.models.list();
                    health.components.openai = 'healthy';
                } catch (error) {
                    health.components.openai = 'unhealthy';
                }
            } else {
                health.components.openai = 'not_initialized';
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Orchestrator
            health.components.aiOrchestrator = this.aiOrchestrator ? 'healthy' : 'not_initialized';
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Message Handler
            health.components.messageHandler = this.messageHandler ? 'healthy' : 'unhealthy';
            
            // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            const unhealthyComponents = Object.values(health.components)
                .filter(status => status === 'unhealthy').length;
            
            if (unhealthyComponents > 0) {
                health.status = 'degraded';
            }
            
            if (!this.isInitialized) {
                health.status = 'initializing';
            }
            
        } catch (error) {
            health.status = 'unhealthy';
            health.error = error.message;
        }
        
        return health;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    exportConfiguration() {
        return {
            config: {
                ...this.config,
                telegramToken: '***',
                openaiApiKey: '***',
                dadataApiKey: '***',
                dadataSecret: '***'
            },
            isInitialized: this.isInitialized,
            startTime: this.startTime,
            components: {
                bot: !!this.bot,
                openai: !!this.openai,
                aiOrchestrator: !!this.aiOrchestrator,
                assistantTools: !!this.assistantTools,
                uiSystem: !!this.uiSystem,
                personalization: !!this.personalization,
                menuSystem: !!this.menuSystem,
                interactiveHandlers: !!this.interactiveHandlers,
                messageHandler: !!this.messageHandler
            }
        };
    }

    // Graceful shutdown
    async shutdown() {
        console.log('üîÑ Shutting down Eva Lawyer Bot...');
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
            if (this.bot && this.config.environment !== 'production') {
                this.bot.stopPolling();
            }
            
            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            console.log('üìä Final statistics:', this.getSystemStatistics());
            
            console.log('‚úÖ Eva Lawyer Bot shutdown completed');
            
        } catch (error) {
            console.error('‚ùå Error during shutdown:', error);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
let botInstance = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
function getBotInstance() {
    if (!botInstance) {
        botInstance = new EvaLawyerBotUnified();
    }
    return botInstance;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
async function handler(req, res) {
    try {
        const bot = getBotInstance();
        
        // Health check endpoint
        if (req.url === '/health') {
            const health = await bot.healthCheck();
            return res.status(200).json(health);
        }
        
        // Statistics endpoint
        if (req.url === '/stats') {
            const stats = bot.getSystemStatistics();
            return res.status(200).json(stats);
        }
        
        // Webhook endpoint
        if (req.method === 'POST') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token
            const secretToken = req.headers['x-telegram-bot-api-secret-token'];
            if (bot.config.webhookSecret && secretToken !== bot.config.webhookSecret) {
                return res.status(401).json({ error: 'Unauthorized' });
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
            const update = req.body;
            
            if (update.message) {
                await bot.handleMessage(update.message);
            } else if (update.callback_query) {
                await bot.handleCallbackQuery(update.callback_query);
            }
            
            return res.status(200).json({ ok: true });
        }
        
        // GET –∑–∞–ø—Ä–æ—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        return res.status(200).json({
            name: 'Eva Lawyer Bot Unified System',
            version: '6.0',
            status: bot.isInitialized ? 'ready' : 'initializing',
            uptime: Date.now() - bot.startTime
        });
        
    } catch (error) {
        console.error('Handler error:', error);
        return res.status(500).json({ 
            error: 'Internal server error',
            message: error.message 
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
module.exports = handler;

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports.EvaLawyerBotUnified = EvaLawyerBotUnified;
module.exports.getBotInstance = getBotInstance;

